cscope 15 D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7"               0000247173
	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\comm.c

1 
	~"comm.h
"

7 
CommHódî_T
 
	gcomm_hódî
[ 
MAX_COMM_ID
 ];

10 
CommHódî_T
 
	$GëCommHódî
–
U8
 
id
 )

13  
comm_hódî
[ 
id
 ];

14 
	}
}

16 
	$SëCommHódî
–
U8
 
id
, 
CommHódî_T
 
vÆ
 )

19 
comm_hódî
[ 
id
 ] = 
vÆ
;

20 
	}
}

27 
I16
 
	$CommSídPackë
–
U8
 
id
, U8 *
£nd_pkt
 , 
I16
 
Àn
 )

29 
U8
 
i
;

32 if–
	`HAL_IsFuŒSídBuf„r
–
id
 ) !
TRUE
 )

34  
i
 = 0 ; i < 
Àn
 ; i++ )

36 
	`HAL_SëSídBuf„r
–
id
, 
£nd_pkt
[ 
i
 ] );

39 
	`HAL_SídByã
–
id
 );

40  
Àn
;

44 
	}
}

50 
I8
 
	$CommRecvPackë
–
U8
 
id
 , U8 *
ªcv_pkt
 )

52 
U16
 
i
;

53 
I16
 
Àn
;

55 if–
	`HAL_IsEm±yRecvBuf„r
–
id
 ) !
TRUE
 )

57 
Àn
 = 
	`HAL_GëRecvLígth
–
id
 );

58  
i
 = 0; i < 
Àn
 ; i++ )

60 
ªcv_pkt
[ 
i
 ] = 
	`HAL_GëRecvBuf„r
–
id
, i );

63  
Àn
;

67 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\comm.h

1 #i‚de‡
__COMM_H__


2 
	#__COMM_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"hÆ_£rül.h
"

7 
	#COMM_ID_TOF
 
COMM_ID_UART_1


	)

9 
U16
 
	tCommHódî_T
;

11 
CommHódî_T
 
GëCommHódî
–
U8
 
id
 );

12 
SëCommHódî
–
U8
 
id
, 
CommHódî_T
 
vÆ
 );

14 
I16
 
CommSídPackë
–
U8
 
id
, U8 *
£nd_pkt
, I16 
Àn
 );

15 
I8
 
CommRecvPackë
–
U8
 
id
 , U8 *
ªcv_pkt
 );

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\crc16.c

1 
	~"¸c16.h
"

5 
	#MASK
 0xA001

	)

6 
	$CÆCrc16
(
Crc
,
C
)

8 
j
;

9 
CrcSum
;

10 
CrcBuf
;

13 
CrcSum
 = 
Crc
;

14 
CrcBuf
 = 
C
;

16 
j
=0;j < 8;j++) {

17 if(((
CrcSum
 ^ 
CrcBuf
Ë& 0x0001Ë!0ËCrcSum = (CrcSum >> 1Ë^ 
MASK
;

18 
CrcSum
 >>= 1;

20 
CrcBuf
 >>= 1;

23  
CrcSum
;

24 
	}
}

29 c⁄° 
U16
 
	g¸c16èb
[256] =

71 
U16
 
	$¸c16_ˇl
(
U8
 *
uc_d©a
, U8 
uc_numbî
)

73 
U16
 
ui_¸c
 = 0xFFFF;

74 
U16
 
ui_ãmp_¸c
;

76 ; 
uc_numbî
 > 0; uc_number--) {

77 
ui_ãmp_¸c
 = 
ui_¸c
 ^ (*
uc_d©a
);

78 
ui_¸c
=(ui_¸c>>8)^
¸c16èb
[
ui_ãmp_¸c
 & 0x00ff];

80 
uc_d©a
++;

82 (
ui_¸c
);

83 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\crc16.h

1 #i‚de‡
__CRC16_H__


2 
	#__CRC16_H__


	)

4 
	~"¥j_ty≥.h
"

7 
CÆCrc16
(
Crc
,
C
);

10 
U16
 
¸c16_ˇl
(
U8
 *
uc_d©a
, U8 
uc_numbî
);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser.c

4 
	~"hw.h
"

5 
	~"hÆ_£rül.h
"

6 
	~"∑r£r.h
"

7 
	~"comm.h
"

8 
	~"timî.h
"

10 
	~"∑r£r_tof.h
"

13 #i‡
DEBUG_COMM


14 
	s_debug_comm_


16 
U32
 
	mrx_˙t
;

17 
U32
 
	mrx_îr
;

19 
U32
 
	mtx_˙t
;

20 } 
	tdebug_comm_t
;

21 
debug_comm_t
 
	gd_comm
[ 
MAX_COMM_ID
 ];

25 vﬁ©ûê
U8
 
	gpkt_ªcv
[ 
MAX_COMM_RX_BUF_SZ
 ];

26 
I16
 
	gpkt_ªcv_Àn
 = 0;

29 vﬁ©ûê
U8
 
	gpkt_£nd
[ 
MAX_COMM_TX_BUF_SZ
 ];

30 
I16
 
	gpkt_£nd_Àn
 = 0;

35 
	$I16
 (*
	t‚_∑r£r_rx_t
)–
	tU8
 *
	tbuf
, 
	tI16
 
	tÀn
 );

36 
	s_∑r£r_li°_


38 
U8
 
TimîId
;

39 
U8
 
CommId
;

40 
‚_∑r£r_rx_t
 
IsVÆidPkt
;

41 
‚_∑r£r_rx_t
 
P¨£rPkt
;

42 } 
	t∑r£r_rx_li°_t
;

44 c⁄° 
∑r£r_rx_li°_t
 
∑r£r_rx_li°
[] =

46 { 
TIMER_ID_COMM_UART_1_RX
, 
COMM_ID_TOF
, 
IsVÆidPkt_TOF
, 
P¨£rPkt_TOF
 },

47 
	}
};

48 
	#MAX_PARSER_RX_NUM
 ( –
∑r£r_rx_li°
Ë/ –
∑r£r_rx_li°_t
 ) )

	)

50 
	$RecvPackëH™dÀr
( )

52 
∑r£r_rx_li°_t
 *
p_li°
;

53 
U8
 
i
;

55  
i
 = 0 ; i < 
MAX_PARSER_RX_NUM
 ; i++ )

58 
p_li°
 = &
∑r£r_rx_li°
[ 
i
 ];

59 if–
	`IsExpúedTimî
–
p_li°
->
TimîId
 ) =
TIMER_EXPIRE
 )

61 
	`DißbÀTimî
–
p_li°
->
TimîId
 );

63 if––
pkt_ªcv_Àn
 = 
	`CommRecvPackë
–
p_li°
->
CommId
, &
pkt_ªcv
[0] ) ) > 0 )

65 
	`HAL_InôRecvLígth
–
p_li°
->
CommId
 );

67 if–
p_li°
->
	`IsVÆidPkt
–&
pkt_ªcv
[0], 
pkt_ªcv_Àn
 ) =
TRUE
 )

69 
p_li°
->
	`P¨£rPkt
–&
pkt_ªcv
[0], 
pkt_ªcv_Àn
 );

70 #i‡
DEBUG_COMM


71 
d_comm
[ 
p_li°
->
CommId
 ].
rx_˙t
++;

76 #i‡
DEBUG_COMM


77 
d_comm
[ 
p_li°
->
CommId
 ].
rx_îr
++;

83 
	}
}

89 
	$I16
 (*
	t‚_∑r£r_tx_t
)–
	tCommHódî_T
 *
	tp_comm
, 
	tU8
 *
	tbuf
 );

90 
	$I16
 (*
	t‚_¸c16_t
)–
	tU8
 *
	tbuf
, 
	tI16
 
	tÀn
 );

91 
	s_∑r£r_tx_li°_


93 
U8
 
TimîId
;

94 
U8
 
CommId
;

95 
‚_∑r£r_tx_t
 
make_pkt
;

96 
‚_¸c16_t
 
¸c16
;

98 } 
	t∑r£r_tx_li°_t
;

100 c⁄° 
∑r£r_tx_li°_t
 
∑r£r_tx_li°
[] =

102 { 
TIMER_ID_COMM_UART_1_TX
, 
COMM_ID_TOF
, 
MakePkt_TOF
, 
Crc16_TOF
 },

103 
	}
};

104 
	#MAX_PARSER_TX_NUM
 ( –
∑r£r_tx_li°
Ë/ –
∑r£r_tx_li°_t
 ) )

	)

106 
	$SídPackëH™dÀr
( )

108 
∑r£r_tx_li°_t
 *
p_li°
;

109 
U8
 
i
;

110 
CommHódî_T
 
p_comm
;

113  
i
 = 0 ; i < 
MAX_PARSER_TX_NUM
 ; i++ )

115 
p_li°
 = &
∑r£r_tx_li°
[ 
i
 ];

117 if–
	`IsExpúedTimî
–
p_li°
->
TimîId
 ) =
TIMER_EXPIRE
 )

119 
	`DißbÀTimî
–
p_li°
->
TimîId
 );

121 
p_comm
 = 
	`GëCommHódî
–
p_li°
->
CommId
 );

124 
	`MEMSET
–(
__FAR
 *)
pkt_£nd
, 0, 
MAX_COMM_TX_BUF_SZ
 );

125 
pkt_£nd_Àn
 = 
p_li°
->
	`make_pkt
–(
CommHódî_T
 *)
p_comm
, 
pkt_£nd
 );

126 if–
pkt_£nd_Àn
 > 0 )

129 
pkt_£nd_Àn
 = 
p_li°
->
	`¸c16
–
pkt_£nd
,Ökt_send_len );

132 
	`CommSídPackë
–
p_li°
->
CommId
, 
pkt_£nd
, 
pkt_£nd_Àn
 );

134 #i‡
DEBUG_COMM


135 
d_comm
[ 
p_li°
->
CommId
 ].
tx_˙t
++;

140 
	`HAL_InôCommId
–
p_li°
->
CommId
 );

144 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser.h

1 #i‚de‡
__PARSER_H__


2 
	#__PARSER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
RecvPackëH™dÀr
( );

7 
SídPackëH™dÀr
( );

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_debug.c

4 
	~"hw.h
"

5 
	~"Àvñ.h
"

6 
	~"ªœy.h
"

7 
	~"vÆve.h
"

8 
	~"room_w©î.h
"

9 
	~"cﬁd_w©î.h
"

10 
	~"hŸ_w©î.h
"

11 
	~"comp.h
"

12 
	~"ãmp.h
"

13 
	~"hÆ_adc.h
"

14 
	~"powî_ßvög.h
"

15 
	~"îr‹.h
"

16 
	~"„ed_pump.h
"

17 
	~"pump.h
"

19 
	~"∑r£r_debug.h
"

20 
	~"utû.h
"

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

28 
	#MIN_PKT_SZ
 6

	)

31 
U8
 
	$check_¸c
–
U8
 *
buf
, U8 
Àn
 )

34 
U16
 
¸c16
 = 0;

36 
¸c16
 = ( ( (
U16
)
buf
[ 
Àn
 - 1 ] ) << 8 ) & 0xFF00;

37 
¸c16
 |–
buf
[ 
Àn
 - 2 ] );

39 if–
¸c16
 !
	`¸c16_ˇl
–
buf
, (
U8
)–
Àn
 - 2 ) ) )

41  
FALSE
;

45  
TRUE
;

46 
	}
}

48 
I16
 
	$IsVÆidPkt_Debug
–
U8
 *
buf
, 
I16
 
Àn
 )

50 if–
buf
 =
NULL
 )

52  
FALSE
;

56 if–
Àn
 < 
MIN_PKT_SZ
 )

58  
FALSE
;

60 if–
	`check_¸c
–
buf
, 
Àn
 ) =
FALSE
 )

62  
FALSE
;

66  
TRUE
;

67 
	}
}

70 
	$I16
 (*
	ta˘i⁄_t
)–
	tU8
 *
	tbuf
 );

71 
	s_∑r£r_li°_t


73 
a˘i⁄_t
 
∑r£r_pkt
;

74 } 
	t∑r£r_li°_t
;

75 c⁄° 
∑r£r_li°_t
 
∑r£r_li°
[] =

77 { 
NULL
 },

78 
	}
};

80 
	#SZ_PS_TABLE
 ( –
∑r£r_li°
 ) / –
∑r£r_li°_t
 ))

	)

82 
I16
 
	$P¨£rPkt_Debug
–
U8
 *
buf
, 
I16
 
Àn
)

85 if–
buf
[0] == '1' )

87 
	`SëCompPrŸe˘OffTime
(1);

90 if–
buf
[0] == '7' )

92 
	`SëSavögC⁄fTimîSÀï
(1);

93 
	`SëSavögC⁄fTimîWakeUp
(1);

95 if–
buf
[0] == '2' )

97 
	`SëCﬁdW©îExåaMakeTime
( 1 );

99 if–
buf
[0] == '3' )

101 
	`Tu∫OnTempSís‹
–
TEMP_ID_COLD_WATER
, 
DEFAULT_TEMP_READ_TIME
 );

103 if–
buf
[0] == '4' )

105 
	`SëPumpOnCuºítTime
( 100 );

107 if–
buf
[0] == '5' )

109 
	`SëRoomW©îFìdTime
( 1 );

141 
	}
}

143 
I16
 
	$Crc16_Debug
–
U8
 *
buf
, 
I16
 
Àn
 )

145  
Àn
;

146 
	}
}

148 
	s_make_li°_t


150 
U8
 
	mTx
;

151 
a˘i⁄_t
 
	mmake_pkt
;

152 } 
	tmake_li°_t
;

154 
I16
 
MakePktTy≥_1
–
U8
 *
buf
 );

155 
I16
 
MakePktTy≥_2
–
U8
 *
buf
 );

156 
make_li°_t
 
	gmake_li°
[] =

158 { 
TRUE
, 
MakePktTy≥_1
 },

159 { 
TRUE
, 
MakePktTy≥_2
 }

162 
	#SZ_TABLE
 ( –
make_li°
 ) / –
make_li°_t
 ))

	)

164 
I16
 
	$MakePkt_Debug
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 )

166 
U8
 
mCou¡
 = 0;

167 
a˘i⁄_t
 
p_make_pkt
;

168 
I16
 
Àn
 = -1;

171 
p_make_pkt
 = 
make_li°
[ 
mCou¡
 ].
make_pkt
;

172 if–
p_make_pkt
 !
NULL
 )

174 if–
make_li°
[ 
mCou¡
 ].
Tx
 =
TRUE
 )

176 
Àn
 = 
	`p_make_pkt
–
buf
 );

180 
mCou¡
 = 0;

182  
Àn
;

186 
mCou¡
++;

187 if–
mCou¡
 >
SZ_TABLE
 )

189 
mCou¡
 = 0;

192  
Àn
;

193 
	}
}

196 
U8
 
gu8F™OnOff
;

197 
I16
 
	$MakePktTy≥_1
–
U8
 *
buf
 )

199 
I16
 
Àn
 = 0;

201 
RoomW©î_T
 
mRoomD©a
;

202 
CﬁdW©î_T
 
mCﬁdD©a
;

203 
HŸW©î_T
 
mHŸD©a
;

204 
Com¥ess‹_T
 
mCompD©a
;

205 
FìdPump_T
 
mFìdPump
;

206 
Pump_T
 
mPump
;

210 
Àn
 = 
	`•rötf
–(*)&
buf
[Üen ], "TYPE_1=");

212 
	`GëRoomW©îD©a
–&
mRoomD©a
 );

213 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d:%d:%d:%d:%d@",

214 
	`GET_ROOM_TANK_LOW
(),

215 
	`GET_ROOM_TANK_HIGH
(),

216 
	`GET_ROOM_TANK_OVERFLOW
(),

217 
mRoomD©a
.
Levñ
,

218 
mRoomD©a
.
InôFuŒ
,

219 –
mRoomD©a
.
FìdTime
 / 10 )

223 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d@",

224 
	`GëT™kLevñ
–
LEVEL_ID_COLD
 ),

225 
	`GëCﬁdW©îInôFuŒ
()

229 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d@",

230 !
	`GET_STATUS_VALVE_NOS
(),

231 
	`GET_STATUS_VALVE_FEED
()

235 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d@",

236 
	`IsTu∫OnRñay
–
RELAY_COMP
 ),

237 
	`IsTu∫OnRñay
–
RELAY_HEATER
 )

241 
	`GëCﬁdW©îD©a
–&
mCﬁdD©a
 );

242 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d:%.1f:%.1f:%.1f:%d:%u@",

243 
mCﬁdD©a
.
C⁄figMake
,

244 
mCﬁdD©a
.
Make
,

245 
mCﬁdD©a
.
TempT¨gëOn
,

246 
mCﬁdD©a
.
TempT¨gëOff
,

247 
mCﬁdD©a
.
TempCuºít
,

248 
mCﬁdD©a
.
ExåaMake
,

249 
mCﬁdD©a
.
ExåaMakeTime


253 
	`GëHŸW©îD©a
–&
mHŸD©a
 );

254 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d:%.1f:%.1f:%.1f:%d:%d:%d:%u@",

255 
mHŸD©a
.
C⁄figMake
,

256 
mHŸD©a
.
Make
,

257 
mHŸD©a
.
TempT¨gëOn
,

258 
mHŸD©a
.
TempT¨gëOff
,

259 
mHŸD©a
.
TempCuºít
,

260 
mHŸD©a
.
Levñ
,

261 
mHŸD©a
.
A…ôude
,

262 
mHŸD©a
.
InôFuŒ
,

263 
mHŸD©a
.
InôWaôTime


267 
	`GëCompD©a
–&
mCompD©a
 );

268 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d:%lu:%lu:%d@",

269 
	`GëCompOnOff
(),

270 
mCompD©a
.
PrŸe˘OffTime
,

271 
mCompD©a
.
OnTime
,

272 
mCompD©a
.
OffTime
,

273 
gu8F™OnOff


278 
	`GëFìdPumpD©a
–&
mFìdPump
 );

279 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d:%d:%d:%d@",

280 
mFìdPump
.
C⁄n
,

281 
mFìdPump
.
OnOff
,

282 
mFìdPump
.
OnSãp
,

283 
mFìdPump
.
OffSãp
,

284 
	`GET_PUMP_ONOFF
()

288 
	`GëPumpD©a
–&
mPump
 );

289 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d:%d:%lu:%lu@",

290 
mPump
.
OnOff
,

291 
mPump
.
OnSãp
,

292 
mPump
.
OnPumpCmd
,

293 (
mPump
.
OnT¨gëTime
 / 10UL) ,

294 (
mPump
.
OnCuºítTime
 / 10UL)

298 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "\r\n" );

300  
Àn
;

301 
	}
}

304 
I16
 
	$MakePktTy≥_2
–
U8
 *
buf
 )

306 
I16
 
Àn
 = 0;

307 
PowîSavög_T
 
mSavögD©a
;

310 
	`GëSavögD©a
–&
mSavögD©a
 );

313 
Àn
 = 
	`•rötf
–(*)&
buf
[Üen ], "TYPE_2=");

316 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%u:%u:%u:",

317 
	`HAL_GëAdcVÆue
–
ANI_TEMP_HOT_WATER
 ),

318 
	`HAL_GëAdcVÆue
–
ANI_TEMP_COLD_WATER
 ),

319 
	`HAL_GëAdcVÆue
–
ANI_SENSOR_PHOTO
 )

323 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%.1f:%.1f@",

324 
	`GëTemp
–
TEMP_ID_HOT_WATER
 ),

325 
	`GëTemp
–
TEMP_ID_COLD_WATER
 )

329 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d@",

330 
	`GëTempSís‹Time
–
TEMP_ID_COLD_WATER
 ),

331 
	`GëTempSís‹Time
–
TEMP_ID_HOT_WATER
 )

335 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d:%d:%d:",

336 
mSavögD©a
.
C⁄fig
,

337 
mSavögD©a
.
Sètus
,

338 
mSavögD©a
.
D¨k2Light
,

339 
mSavögD©a
.
Light2D¨k


343 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d:%d:%d:%d:%d@",

344 
mSavögD©a
.
IsD¨k
,

345 
mSavögD©a
.
PhŸoAdc
,

346 
mSavögD©a
.
AdcLimôSÀï
,

347 
mSavögD©a
.
AdcLimôWakeUp
,

348 
mSavögD©a
.
TimîSÀï
,

349 
mSavögD©a
.
TimîWakeUp


353 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "%d:%d:%d:%d:%d:%d@",

354 
	`IsEº‹
–
ERR_TEMP_COLD_WATER
 ),

355 
	`IsEº‹
–
ERR_TEMP_HOT_WATER
 ),

356 
	`IsEº‹
–
ERR_ROOM_OVF
 ),

357 
	`IsEº‹
–
ERR_ROOM_COMPLEX
 ),

358 
	`IsEº‹
–
ERR_ROOM_LOW_LEVEL
 ),

359 
	`IsEº‹
–
ERR_ROOM_HIGH_LEVEL
 )

364 
Àn
 +
	`•rötf
–(*)&
buf
[Üen ], "\r\n" );

367  
Àn
;

369 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_debug.h

1 #i‚de‡
__PARSER_DEBUG_H__


2 
	#__PARSER_DEBUG_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

7 
I16
 
IsVÆidPkt_Debug
–
U8
 *
buf
, I16 
Àn
 );

8 
I16
 
P¨£rPkt_Debug
–
U8
 *
buf
, I16 
Àn
);

9 
I16
 
Crc16_Debug
–
U8
 *
buf
, I16 
Àn
 );

10 
I16
 
MakePkt_Debug
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 );

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_eol.c

5 
	~"hw.h
"

6 
	~"∑r£r_eﬁ.h
"

7 
	~"utû.h
"

8 
	~"eﬁ.h
"

9 
	~"¥o˚ss_eﬁ.h
"

10 
	~"timî.h
"

12 
	~"ãmp.h
"

13 
	~"îr_ãmp.h
"

14 
	~"Àvñ.h
"

15 
	~"ªœy.h
"

16 
	~"vÆve.h
"

17 
	~"room_w©î.h
"

18 
	~"cﬁd_w©î.h
"

19 
	~"comp.h
"

21 
	~"hÆ_adc.h
"

22 
	~"hÆ_Án_mŸ‹.h
"

23 
	~"powî_ßvög.h
"

24 
	~"îr‹.h
"

25 
	~"¥o˚ss_di•œy.h
"

27 
	~<°dio.h
>

28 
	~<°dlib.h
>

33 
	#PKT_STX
 0x01

	)

34 
	#PKT_ETX
 0x04

	)

36 
	#PKT_ACK
 0x06

	)

37 
	#PKT_NAK
 0x15

	)

39 
	#MIN_PKT_SZ
 6

	)

42 
	#MK_DATA
–
_buf
, 
_Àn
, 
_s
, 
_vÆ
 ) \

44 
_Àn
 +
	`•rötf
–(*)&
_buf
[ _À¿], 
_s
, 
_vÆ
 );\

45 }0)

	)

48 
I16
 
	$MkTemp
(
TEMP_T
 
mTemp
, 
U8
 *
pBuf
, 
I16
 
mi16Lí
)

50 
U16
 
mu16Temp
;

52 
mu16Temp
 = (
U16
)–
mTemp
 * 10.0f );

54 
pBuf
[ 
mi16Lí
++ ] = 
	`GET_HIGH_BYTE
–
mu16Temp
 );

55 
pBuf
[ 
mi16Lí
++ ] = 
	`GET_LOW_BYTE
–
mu16Temp
 );

57  
mi16Lí
;

58 
	}
}

60 
U8
 
	$check_¸c
–
U8
 *
buf
, 
I16
 
Àn
 )

62 
U8
 
i
 = 0;

63 
U8
 
mu8Chksum
 = 0;

65  
i
 = 0; i < 
Àn
 - 3 ; i++ )

67 
mu8Chksum
 ^
buf
[ 
i
 ];

70  
mu8Chksum
;

71 
	}
}

73 
U8
 
	$IsTrueChksum
–
U8
 *
buf
, 
I16
 
Àn
 )

75 
U8
 
mu8CÆ
;

76 
U8
 
mu8VÆ
;

79 
mu8CÆ
 = 
	`check_¸c
–
buf
, 
Àn
 );

80 
mu8VÆ
 = 
	`C⁄vAsc2Byã
–
buf
[ 
Àn
 - 3 ], buf[Üen - 2 ] );

81 if–
mu8CÆ
 !
mu8VÆ
 )

83  
FALSE
;

86  
TRUE
;

87 
	}
}

90 
I16
 
	$IsVÆidPkt_EOL
–
U8
 *
buf
, 
I16
 
Àn
 )

92 
U8
 
mu8Chksum
 = 0;

94 if–
buf
 =
NULL
 )

96  
FALSE
;

99 if–
Àn
 < 
MIN_PKT_SZ
 )

101  
FALSE
;

104 if–
buf
[0] !
PKT_STX


105 || 
buf
[ 
Àn
 - 1] !
PKT_ETX
 )

107  
FALSE
;

110 if–
	`IsTrueChksum
–
buf
, 
Àn
 ) =
FALSE
 )

112  
FALSE
;

117 if–
	`GëEﬁMode
(Ë=
EOL_MODE_DONE
 )

119  
FALSE
;

122 if–
	`GëEﬁSètus
(Ë=
FALSE
 )

125 if–
	`IsExpúedEﬁLimôTimî
(Ë=
TRUE
 )

127  
FALSE
;

132 
	`SèπEﬁ
–
EOL_TYPE_LOAD
 );

133 
	`SèπDi•œyInô
();

134 
	`SëVîsi⁄Di•
( 50 );

137  
TRUE
;

138 
	}
}

141 (*
	tA˘i⁄P¨£r_t
)();

142 
	s_∑r£r_li°_t


144 
U8
 
Ty≥
;

145 
A˘i⁄P¨£r_t
 
P¨£rPkt
;

146 } 
	t∑r£r_li°_t
;

149 
	`P¨£rSís‹
();

150 
	`P¨£rNoLﬂd
();

151 
	`P¨£rF™MŸ‹
();

152 
	`P¨£rFìdVÆve
();

153 
	`P¨£rNosVÆve
();

154 
	`P¨£rHóãr
();

155 
	`P¨£rGasFìdVÆve
();

156 
	`P¨£rGasNosVÆveClo£
();

157 
	`P¨£rGasNosVÆveO≥n
();

158 
	`P¨£rComp
();

159 
	`P¨£rCom∂ëe
();

161 c⁄° 
∑r£r_li°_t
 
∑r£r_li°
[] =

163 { 
PKT_EOL_MODEL
, 
NULL
 },

164 { 
PKT_EOL_MODE
, 
NULL
 },

166 { 
PKT_EOL_EEPROM
, 
P¨£rSís‹
 },

167 { 
PKT_EOL_SENSOR_TEMP
, 
NULL
 },

168 { 
PKT_EOL_SENSOR_LEVEL
, 
NULL
 },

170 { 
PKT_EOL_HEATER
, 
P¨£rHóãr
 },

171 { 
PKT_EOL_NO_LOAD
, 
P¨£rNoLﬂd
 },

173 { 
PKT_EOL_FEED_VALVE
, 
P¨£rFìdVÆve
 },

174 { 
PKT_EOL_NOS_VALVE
, 
P¨£rNosVÆve
 },

176 { 
PKT_EOL_GAS_FEED_VALVE
, 
P¨£rGasFìdVÆve
 },

177 { 
PKT_EOL_GAS_NOS_VALVE_CLOSE
, 
P¨£rGasNosVÆveClo£
 },

178 { 
PKT_EOL_GAS_NOS_VALVE_OPEN
, 
P¨£rGasNosVÆveO≥n
 },

180 { 
PKT_EOL_COMP
, 
P¨£rComp
 },

181 { 
PKT_EOL_COMPLETE
, 
P¨£rCom∂ëe
 }

184 
	}
};

185 
	#SZ_PARSER_TABLE
 (–
∑r£r_li°
 ) / –
∑r£r_li°_t
 ))

	)

188 
I16
 
	$P¨£rPkt_EOL
–
U8
 *
buf
, 
I16
 
Àn
)

190 
U8
 
mu8Index
 = 0;

191 
U8
 
mu8PktTy≥
 = 0;

192 
A˘i⁄P¨£r_t
 
pP¨£r
 = 
NULL
;

196 
mu8PktTy≥
 = 
	`C⁄vAsc2Byã
–
buf
[1], buf[2] );

197  
mu8Index
 = 0; mu8Index < 
SZ_PARSER_TABLE
; mu8Index++ )

199 if–
mu8PktTy≥
 =
∑r£r_li°
[ 
mu8Index
 ].
Ty≥
 )

201 
pP¨£r
 = 
∑r£r_li°
[ 
mu8Index
 ].
P¨£rPkt
;

202 if–
pP¨£r
 !
NULL
 )

204 
	`pP¨£r
();

208 
	`SëCommHódî
–
COMM_ID_EOL
, 
mu8PktTy≥
 );

209 
	`SèπTimî
–
TIMER_ID_COMM_EOL_TX
, 0 );

215 
	}
}

217 
	$Tu∫OffAŒLﬂd
()

220 
	`Clo£VÆve
–
VALVE_ALL
 );

221 
	`O≥nVÆve
–
VALVE_NOS
 );

224 
	`Tu∫OffRñayAŒ
();

227 
	`HAL_Tu∫OffF™MŸ‹
();

228 
	}
}

247 
	$P¨£rSís‹
()

249 
	`SëEﬁMode
–
EOL_MODE_CHECK_SENSOR
 );

250 
	}
}

252 
	$P¨£rNoLﬂd
()

254 
	`SëEﬁMode
–
EOL_MODE_CHECK_LOAD
 );

256 
	`Tu∫OffAŒLﬂd
();

257 
	}
}

260 
	$P¨£rF™MŸ‹
()

262 
	`Tu∫OffAŒLﬂd
();

264 
	`HAL_Tu∫OnF™MŸ‹
();

265 
	}
}

268 
	$P¨£rFìdVÆve
()

270 
	`Tu∫OffAŒLﬂd
();

272 
	`O≥nVÆve
–
VALVE_FEED
 );

273 
	}
}

275 
	$P¨£rNosVÆve
()

277 
	`Tu∫OffAŒLﬂd
();

279 
	`Clo£VÆve
–
VALVE_NOS
 );

280 
	}
}

283 
	$P¨£rHóãr
()

285 
U8
 
mu8PrŸe˘HóãrFœg
 = 0;

287 
	`Tu∫OffAŒLﬂd
();

289 if–
mu8PrŸe˘HóãrFœg
 == 0 )

291 
mu8PrŸe˘HóãrFœg
 = 1;

292 
	`Tu∫OnRñay
–
RELAY_HEATER
 );

295 
	}
}

297 
	$P¨£rGasFìdVÆve
()

299 
	`O≥nVÆve
–
VALVE_FEED
 );

300 
	`O≥nVÆve
–
VALVE_NOS
 );

301 
	}
}

303 
	$P¨£rGasNosVÆveClo£
()

305 
	`Clo£VÆve
–
VALVE_NOS
 );

306 
	}
}

308 
	$P¨£rGasNosVÆveO≥n
()

310 
	`O≥nVÆve
–
VALVE_NOS
 );

311 
	}
}

314 
	$P¨£rComp
()

316 
	`Tu∫OffAŒLﬂd
();

319 
	`Tu∫OnRñay
–
RELAY_COMP
 );

320 
	`HAL_Tu∫OnF™MŸ‹
();

322 
	`SèπEﬁI˚Sy°em
();

323 
	}
}

326 
	$P¨£rCom∂ëe
()

328 
	`SëEﬁMode
–
EOL_MODE_DONE
 );

330 
	`Tu∫OffAŒLﬂd
();

331 
	}
}

335 
I16
 
	$Crc16_EOL
–
U8
 *
buf
, 
I16
 
Àn
 )

337 
U8
 
i
 = 0;

338 
U8
 
mu8Chksum
 = 0;

339 
U8
 
¸c_buf
[5];

342 if–
Àn
 < 
MIN_PKT_SZ
 )

347 
mu8Chksum
 = 
	`check_¸c
–
buf
, 
Àn
);

348 
	`•rötf
–(*)
¸c_buf
, "%02X", 
mu8Chksum
 );

350 
buf
[ 
Àn
 - 3 ] = 
¸c_buf
[0];

351 
buf
[ 
Àn
 - 2 ] = 
¸c_buf
[1];

353  
Àn
;

354 
	}
}

356 
	$I16
 (*
	tA˘i⁄_t
)–
	tU8
 *
	tbuf
, U8 
	tmu8PktTy≥
 );

357 
	s_make_li°_t


359 
U8
 
Ty≥
;

360 
A˘i⁄_t
 
MakePkt
;

361 } 
	tmake_li°_t
;

362 
I16
 
	`MakePkt_Modñ
–
U8
 *
buf
, U8 
mu8PktTy≥
 );

363 
I16
 
	`MakePkt_Eïrom
–
U8
 *
buf
, U8 
mu8PktTy≥
 );

364 
I16
 
	`MakePkt_Sís‹Temp
–
U8
 *
buf
, U8 
mu8PktTy≥
 );

365 
I16
 
	`MakePkt_Sís‹Levñ
–
U8
 *
buf
, U8 
mu8PktTy≥
 );

366 
I16
 
	`MakePkt_Comp
–
U8
 *
buf
, U8 
mu8PktTy≥
 );

367 
I16
 
	`MakePkt_NoPayLﬂd
–
U8
 *
buf
, U8 
mu8PktTy≥
 );

369 c⁄° 
make_li°_t
 
make_li°
[] =

371 { 
PKT_EOL_MODEL
, 
MakePkt_Modñ
 },

372 { 
PKT_EOL_MODE
, 
MakePkt_NoPayLﬂd
 },

374 { 
PKT_EOL_EEPROM
, 
MakePkt_Eïrom
 },

375 { 
PKT_EOL_SENSOR_TEMP
, 
MakePkt_Sís‹Temp
 },

376 { 
PKT_EOL_SENSOR_LEVEL
, 
MakePkt_Sís‹Levñ
 },

378 { 
PKT_EOL_HEATER
, 
MakePkt_NoPayLﬂd
 },

379 { 
PKT_EOL_NO_LOAD
, 
MakePkt_NoPayLﬂd
 },

381 { 
PKT_EOL_FEED_VALVE
, 
MakePkt_NoPayLﬂd
 },

382 { 
PKT_EOL_NOS_VALVE
, 
MakePkt_NoPayLﬂd
 },

384 { 
PKT_EOL_GAS_FEED_VALVE
, 
MakePkt_NoPayLﬂd
 },

385 { 
PKT_EOL_GAS_NOS_VALVE_CLOSE
, 
MakePkt_NoPayLﬂd
 },

386 { 
PKT_EOL_GAS_NOS_VALVE_OPEN
, 
MakePkt_NoPayLﬂd
 },

388 { 
PKT_EOL_COMP
, 
MakePkt_Comp
 },

389 { 
PKT_EOL_COMPLETE
, 
MakePkt_NoPayLﬂd
 }

392 
	}
};

394 
	#SZ_MAKE_TABLE
 ( –
make_li°
 ) / –
make_li°_t
 ))

	)

396 
I16
 
	$MakePkt_EOL
–
CommHódî_T
 *
pComm
, 
U8
 *
buf
 )

398 
U8
 
mu8Ty≥
;

399 
A˘i⁄_t
 
p_make_pkt
;

400 
U8
 
i
;

401 
I16
 
Àn
 = -1;

404  
i
 = 0; i < 
SZ_MAKE_TABLE
; i++ )

406 
mu8Ty≥
 = 
make_li°
[ 
i
 ].
Ty≥
;

407 
p_make_pkt
 = 
make_li°
[ 
i
 ].
MakePkt
;

409 if–
mu8Ty≥
 =(
U8
)
pComm
 )

411 if–
p_make_pkt
 !
NULL
 )

413 
Àn
 = 
	`p_make_pkt
–
buf
, 
mu8Ty≥
 );

419  
Àn
;

420 
	}
}

423 
I16
 
	$MakePkt_Modñ
–
U8
 *
buf
, U8 
mu8PktTy≥
 )

425 
I16
 
mi16Lí
 = 0;

428 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

429 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
PKT_ACK
 );

430 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
mu8PktTy≥
 );

431 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
MODEL_CODE
 );

432 
buf
[ 
mi16Lí
++ ] = 0;

433 
buf
[ 
mi16Lí
++ ] = 0;

434 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

436  
mi16Lí
;

437 
	}
}

439 
I16
 
	$MakePkt_Eïrom
–
U8
 *
buf
, U8 
mu8PktTy≥
 )

441 
I16
 
mi16Lí
 = 0;

444 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

445 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
PKT_ACK
 );

446 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
mu8PktTy≥
 );

447 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GëEﬁCheckSètus
–
EOL_CHK_ID_EEPROM
 ) );

448 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Len ], "%02X", 0x03 );

449 
buf
[ 
mi16Lí
++ ] = 0;

450 
buf
[ 
mi16Lí
++ ] = 0;

451 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

453  
mi16Lí
;

454 
	}
}

456 
	#TEMP_ERROR
 0xFF

457 
	#TEMP_UNDER
 0x00

458 
U8
 
	`C⁄vEﬁTemp
(U8 
mu8AdcId
, 
TEMP_T
 
mTemp
)

	)

460 
U8
 
	gmu8Rë
 = 
TEMP_ERROR
;

462 
U16
 
	gmu16Adc
 = 0;

466 
	gmu16Adc
 = 
HAL_GëAdcVÆue
–
mu8AdcId
 );

467 if–
GëTempEº‹Ty≥
–
mu16Adc
 ) !
STATUS_NORMAL
 )

469 
mu8Rë
 = 
TEMP_ERROR
;

473 if–
	gmTemp
 > 0.0f )

475 
	gmu8Rë
 = (
U8
)
mTemp
;

479 
	gmu8Rë
 = 
TEMP_UNDER
;

483  
	gmu8Rë
;

486 
I16
 
	$MakePkt_Sís‹Temp
–
U8
 *
buf
, U8 
mu8PktTy≥
 )

488 
I16
 
mi16Lí
 = 0;

489 
U16
 
mu16Adc
;

491 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

492 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
PKT_ACK
 );

493 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
mu8PktTy≥
 );

496 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`C⁄vEﬁTemp
–
ANI_TEMP_COLD_WATER
, 
	`GëTemp
–
TEMP_ID_COLD_WATER
) ));

497 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`C⁄vEﬁTemp
–
ANI_TEMP_HOT_WATER
, 
	`GëTemp
–
TEMP_ID_HOT_WATER
) ));

499 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_COLD_WATER
 );

500 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GET_HIGH_BYTE
–
mu16Adc
 ) );

501 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GET_LOW_BYTE
–
mu16Adc
 ));

503 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_HOT_WATER
 );

504 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GET_HIGH_BYTE
–
mu16Adc
 ) );

505 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GET_LOW_BYTE
–
mu16Adc
 ));

508 
buf
[ 
mi16Lí
++ ] = 0;

509 
buf
[ 
mi16Lí
++ ] = 0;

510 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

512  
mi16Lí
;

513 
	}
}

515 
I16
 
	$MakePkt_Sís‹Levñ
–
U8
 *
buf
, U8 
mu8PktTy≥
 )

517 
I16
 
mi16Lí
 = 0;

520 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

521 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
PKT_ACK
 );

522 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
mu8PktTy≥
 );

523 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GET_ROOM_TANK_LOW
() );

524 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GET_ROOM_TANK_HIGH
() );

525 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GET_ROOM_TANK_OVERFLOW
() );

526 
buf
[ 
mi16Lí
++ ] = 0;

527 
buf
[ 
mi16Lí
++ ] = 0;

528 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

530  
mi16Lí
;

531 
	}
}

533 
I16
 
	$MakePkt_Comp
–
U8
 *
buf
, U8 
mu8PktTy≥
 )

535 
I16
 
mi16Lí
 = 0;

536 
U16
 
mu16Adc
;

538 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

539 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
PKT_ACK
 );

540 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
mu8PktTy≥
 );

542 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_COLD_WATER
 );

543 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GET_HIGH_BYTE
–
mu16Adc
 ) );

544 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
	`GET_LOW_BYTE
–
mu16Adc
 ));

546 
buf
[ 
mi16Lí
++ ] = 0;

547 
buf
[ 
mi16Lí
++ ] = 0;

548 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

550  
mi16Lí
;

551 
	}
}

554 
I16
 
	$MakePkt_NoPayLﬂd
–
U8
 *
buf
, U8 
mu8PktTy≥
 )

556 
I16
 
mi16Lí
 = 0;

558 
buf
[ 
mi16Lí
++ ] = 
PKT_STX
;

559 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
PKT_ACK
 );

560 
mi16Lí
 +
	`•rötf
–(*)&
buf
[ mi16Lí ], "%02X", 
mu8PktTy≥
 );

561 
buf
[ 
mi16Lí
++ ] = 0;

562 
buf
[ 
mi16Lí
++ ] = 0;

563 
buf
[ 
mi16Lí
++ ] = 
PKT_ETX
;

565  
mi16Lí
;

566 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_eol.h

1 #i‚de‡
__PARSER_EOL_H__


2 
	#__PARSER_EOL_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

9 
	mPKT_EOL_NONE
 = 0x00,

11 
	mPKT_EOL_MODEL
 = 0x20,

12 
	mPKT_EOL_MODE
 = 0x22,

14 
	mPKT_EOL_EEPROM
 = 0x32,

15 
	mPKT_EOL_SENSOR_TEMP
 = 0x35,

16 
	mPKT_EOL_SENSOR_LEVEL
 = 0x38,

18 
	mPKT_EOL_HEATER
 = 0x50,

19 
	mPKT_EOL_NO_LOAD
 = 0x54,

21 
	mPKT_EOL_FEED_VALVE
 = 0x58,

22 
	mPKT_EOL_NOS_VALVE
 = 0x5C,

24 
	mPKT_EOL_GAS_FEED_VALVE
 = 0x78,

25 
	mPKT_EOL_GAS_NOS_VALVE_CLOSE
 = 0x7D,

26 
	mPKT_EOL_GAS_NOS_VALVE_OPEN
 = 0x83,

28 
	mPKT_EOL_COMP
 = 0x99,

29 
	mPKT_EOL_COMPLETE
 = 0xF1,

33 
I16
 
IsVÆidPkt_EOL
–
U8
 *
buf
, I16 
Àn
 );

34 
I16
 
P¨£rPkt_EOL
–
U8
 *
buf
, I16 
Àn
);

35 
I16
 
Crc16_EOL
–
U8
 *
buf
, I16 
Àn
 );

36 
I16
 
MakePkt_EOL
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 );

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_tof.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

7 
	~"∑r£r_tof.h
"

8 
	~"utû.h
"

9 
	~"timî.h
"

10 
	~"tof.h
"

16 
	#STX
 0x11

	)

17 
	#ETX
 0x88

	)

20 
	#MIN_PKT_SZ
 4

	)

22 
U16
 
	$Rx_CRC_CCITT
(
U8
 *
puchMsg
, 
U16
 
usD©aLí
)

24 
U8
 
i
 = 0;

25 
U16
 
wCRCö
 = 0x0000;

26 
U16
 
wCPﬁy
 = 0x1021;

27 
U8
 
wCh¨
 = 0;

29 
usD©aLí
--)

31 
wCh¨
 = *(
puchMsg
++);

32 
wCRCö
 ^((
U16
)
wCh¨
 << 8);

33 
i
 = 0; i < 8; i++)

35 i‡(
wCRCö
 & 0x8000)

37 
wCRCö
 = (wCRCö << 1Ë^ 
wCPﬁy
;

41 
wCRCö
 = wCRCin << 1;

46  (
wCRCö
);

47 
	}
}

49 
U8
 
	$check_¸c
–
U8
 *
buf
, 
I16
 
Àn
 )

51 
U16
 
¸c16
 = 0;

53 
¸c16
 = 
	`GET_UINT_WORD
–
buf
[
Àn
-2], buf[len-3] );

54 if–
¸c16
 !
	`Rx_CRC_CCITT
–
buf
, (
U16
)–
Àn
 - 3 ) ) )

56  
FALSE
;

59  
TRUE
;

60 
	}
}

62 
I16
 
	$IsVÆidPkt_TOF
–
U8
 *
buf
, 
I16
 
Àn
 )

64 if–
buf
 =
NULL
 )

66  
FALSE
;

69 if–
Àn
 < 
MIN_PKT_SZ
 )

71  
FALSE
;

74 if–
	`check_¸c
–
buf
, 
Àn
 ) =
FALSE
 )

76  
FALSE
;

79  
TRUE
;

80 
	}
}

83 
I16
 
P¨£rAck
(
U8
 *
buf
);

84 
I16
 
P¨£rAckCÆi
(
U8
 *
buf
);

86 
	$I16
 (*
	ta˘i⁄_t
)–
	tU8
 *
	tbuf
 );

87 
	s_∑r£r_li°_t


89 
U8
 
Ty≥
;

90 
a˘i⁄_t
 
P¨£r
;

91 } 
	t∑r£r_li°_t
;

92 c⁄° 
∑r£r_li°_t
 
∑r£r_li°
[] =

94 { 
PKT_TOF_ACK
, 
P¨£rAck
 },

95 { 
PKT_TOF_ACK_CALI
, 
P¨£rAckCÆi
 },

96 
	}
};

98 
	#SZ_PS_TABLE
 ( –
∑r£r_li°
 ) / –
∑r£r_li°_t
 ))

	)

100 
I16
 
	$P¨£rPkt_TOF
–
U8
 *
buf
, 
I16
 
Àn
)

102 
U8
 
mu8Ty≥
;

103 
a˘i⁄_t
 
pP¨£r
;

104 
U8
 
i
;

107  
i
 = 0; i < 
SZ_PS_TABLE
; i++ )

109 
mu8Ty≥
 = 
∑r£r_li°
[ 
i
 ].
Ty≥
;

110 
pP¨£r
 = 
∑r£r_li°
[ 
i
 ].
P¨£r
;

112 if–
mu8Ty≥
 =
buf
[1] )

114 if–
pP¨£r
 !
NULL
 )

116 
Àn
 = 
	`pP¨£r
–&
buf
[2] );

122  
Àn
;

123 
	}
}

125 
I16
 
	$Crc16_TOF
–
U8
 *
buf
, 
I16
 
Àn
 )

127 
U16
 
mu16Chksum
 = 0;

130 if–
Àn
 < 
MIN_PKT_SZ
 )

135 
mu16Chksum
 = 
	`Rx_CRC_CCITT
–
buf
, (
U16
)(
Àn
 - 3));

136 
buf
[ 
Àn
 - 3 ] = 
	`GET_HIGH_BYTE
(
mu16Chksum
);

137 
buf
[ 
Àn
 - 2 ] = 
	`GET_LOW_BYTE
(
mu16Chksum
);

139  
Àn
;

140 
	}
}

147 
I16
 
	$P¨£rAck
(
U8
 *
buf
)

151 if–
buf
[0] !
TRUE
 || buf[1] != TRUE )

153  
TRUE
;

156 if–
InôPowîOn
 =
FALSE
 )

158 
InôPowîOn
 = 
TRUE
;

162 
°¨t
 = 
buf
[2];

165 
tof_£ns‹
[0] = 
	`GET_UINT_WORD
–
buf
[4], buf[3] );

166 
tof_£ns‹
[1] = 
	`GET_UINT_WORD
–
buf
[6], buf[5] );

167 
tof_£ns‹
[2] = 
	`GET_UINT_WORD
–
buf
[8], buf[7] );

168 
tof_£ns‹
[3] = 
	`GET_UINT_WORD
–
buf
[10], buf[9] );

169 
tof_£ns‹
[4] = 
	`GET_UINT_WORD
–
buf
[12], buf[11] );

170 
tof_£ns‹
[5] = 
	`GET_UINT_WORD
–
buf
[14], buf[13] );

171 
tof_£ns‹
[6] = 
	`GET_UINT_WORD
–
buf
[16], buf[15] );

174  
TRUE
;

175 
	}
}

177 
I16
 
	$P¨£rAckCÆi
(
U8
 *
buf
)

184  
TRUE
;

185 
	}
}

188 
	s_make_li°_t


190 
U8
 
	mTy≥
;

191 
a˘i⁄_t
 
	mMakePkt
;

192 } 
	tmake_li°_t
;

194 
I16
 
MakePktReq
–
U8
 *
buf
 );

195 
I16
 
MakePktReqCÆi
–
U8
 *
buf
 );

196 c⁄° 
make_li°_t
 
	gmake_li°
[] =

198 { 
PKT_TOF_REQ
, 
MakePktReq
 },

199 { 
PKT_TOF_REQ_CALI
, 
MakePktReqCÆi
 },

201 
	#SZ_TABLE
 ( –
make_li°
 ) / –
make_li°_t
 ))

	)

203 
I16
 
	$MakePkt_TOF
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 )

205 
U8
 
mu8Ty≥
;

206 
a˘i⁄_t
 
p_make_pkt
;

207 
U8
 
i
;

208 
I16
 
Àn
 = -1;

211  
i
 = 0; i < 
SZ_TABLE
; i++ )

213 
mu8Ty≥
 = 
make_li°
[ 
i
 ].
Ty≥
;

214 
p_make_pkt
 = 
make_li°
[ 
i
 ].
MakePkt
;

216 if–
mu8Ty≥
 =(
U8
)
p_comm
 )

218 if–
p_make_pkt
 !
NULL
 )

220 
Àn
 = 
	`p_make_pkt
–
buf
 );

226  
Àn
;

227 
	}
}

232 
I16
 
	$MakePktReq
–
U8
 *
buf
 )

234 
I16
 
mi16Lí
 = 0;

237 
buf
[ 
mi16Lí
++ ] = 
STX
;

240 
buf
[ 
mi16Lí
++ ] = 
PKT_TOF_REQ
;

246 
buf
[ 
mi16Lí
++ ] = 0;

247 
buf
[ 
mi16Lí
++ ] = 0;

249 
buf
[ 
mi16Lí
++ ] = 
ETX
;

251  
mi16Lí
;

252 
	}
}

254 
I16
 
	$MakePktReqCÆi
–
U8
 *
buf
 )

256 
I16
 
mi16Lí
 = 0;

259 
buf
[ 
mi16Lí
++ ] = 
STX
;

262 
buf
[ 
mi16Lí
++ ] = 
PKT_TOF_REQ_CALI
;

266 
buf
[ 
mi16Lí
++ ] = 0;

267 
buf
[ 
mi16Lí
++ ] = 0;

269 
buf
[ 
mi16Lí
++ ] = 
ETX
;

271  
mi16Lí
;

272 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_tof.h

1 #i‚de‡
__PARSER_TOF_H__


2 
	#__PARSER_TOF_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"comm.h
"

8 
	#PKT_TOF_REQ
 0x01

	)

9 
	#PKT_TOF_ACK
 0x81

	)

11 
	#PKT_TOF_REQ_CALI
 0x02

	)

12 
	#PKT_TOF_ACK_CALI
 0x82

	)

14 
I16
 
IsVÆidPkt_TOF
–
U8
 *
buf
, I16 
Àn
 );

15 
I16
 
P¨£rPkt_TOF
–
U8
 *
buf
, I16 
Àn
);

16 
I16
 
Crc16_TOF
–
U8
 *
buf
, I16 
Àn
 );

17 
I16
 
MakePkt_TOF
–
CommHódî_T
 *
p_comm
, 
U8
 *
buf
 );

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\config.h

1 #i‚de‡
__CONFIG_H__


2 
	#__CONFIG_H__


	)

9 
	#CONFIG_TEST
 0

10 
	#CONFIG_MMI
 0

11 
	#CONFIG_TEST_LED
 0

12 
	#CONFIG_TEST_SAVING
 0

13 
	#CONFIG_TEST_TEMP_READ
 0

14 
	#CONFIG_TEST_FILTER
 0

15 

	)

17 
	#CONFIG_TEST_FLOW_METER
 1

	)

20 
	#CONFIG_ERR_ALL
 1

	)

23 
	#DEBUG_COMM
 1

	)

26 
	#VERSION
 1

	)

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\eeprom\eeprom.c

1 
	~"hÆ_ì¥om.h
"

2 
	~"ì¥om.h
"

3 
	~"utû.h
"

4 
	~"¸c16.h
"

6 
	~"îr‹.h
"

10 
	#EEP_ADDR_OFFSET
 0x0010

	)

16 
	mEEP_BLOCK_NONE
,

17 
	mEEP_BLOCK_0
,

18 
	mEEP_BLOCK_1
,

23 
	mNUM_EEP_BLOCK


24 } 
	tEïromBlock_T
;

26 
	s_ì¥om_c⁄åﬁ_


29 
U8
 
	mInô
;

30 
U8
 
	mWrôe
;

31 
U8
 
	mEø£
;

32 
U8
 
	mFa˘‹yRe£t
;

34 
U16
 
	mDñayTime
;

35 
U8
 
	mRódD©a
[ 
EEP_PAGE_SIZE
 ];

36 
U8
 
	mWrôeD©a
[ 
EEP_PAGE_SIZE
 ];

37 } 
	tEEP_C⁄åﬁ_T
;

40 
EEP_C⁄åﬁ_T
 
	gEï
;

43 
U8
 
RódD©aBlocks
();

44 
U8
 
WrôeD©aBlocks
();

45 
InôBlockTabÀAŒSë
();

47 
	$InôEïrom
()

49 
Eï
.
Inô
 = 
FALSE
;

50 
Eï
.
Eø£
 = 
FALSE
;

51 
Eï
.
Fa˘‹yRe£t
 = 
FALSE
;

53 if–
	`RódD©aBlocks
(Ë=
TRUE
 )

56 
Eï
.
Inô
 = 
TRUE
;

61 
Eï
.
Fa˘‹yRe£t
 = 
TRUE
;

63 
	`InôBlockTabÀAŒSë
();

64 
	`WrôeD©aBlocks
();

70 
Eï
.
Wrôe
 = 
FALSE
;

71 
Eï
.
DñayTime
 = 0;

72 
	}
}

74 
	s_ì¥om_block_m≠_


76 
EïromId_T
 
	mid
;

77 
EïromBlock_T
 
	mblockId
;

78 } 
	tEïromM≠_T
;

80 c⁄° 
EïromM≠_T
 
	gEïromM≠pögTabÀ
[] =

82 { 
EEP_ID_CONF_MAKE_COLD
, 
EEP_BLOCK_0
 },

83 { 
EEP_ID_CONF_MAKE_HOT
, 
EEP_BLOCK_0
 },

84 { 
EEP_ID_CONF_POWER_SAVING
, 
EEP_BLOCK_0
 },

85 { 
EEP_ID_CONF_UNUSED_SAVE
, 
EEP_BLOCK_0
 },

86 { 
EEP_ID_HOT_ALTITUDE
, 
EEP_BLOCK_0
 },

88 { 
EEP_ID_MEMENTO_1
, 
EEP_BLOCK_1
 },

89 { 
EEP_ID_MEMENTO_2
, 
EEP_BLOCK_1
 },

90 { 
EEP_ID_MEMENTO_3
, 
EEP_BLOCK_1
 },

91 { 
EEP_ID_MEMENTO_4
, 
EEP_BLOCK_1
 },

92 { 
EEP_ID_MEMENTO_5
, 
EEP_BLOCK_1
 },

95 
	#SZ_EEPROM_MAPPING_TABLE
 ((
EïromM≠pögTabÀ
)/(
EïromM≠_T
))

	)

98 
EïromBlock_T
 
	$GëBlockId
(
EïromId_T
 
mu8Id
 )

100 
U8
 
i
;

102  
i
 = 0; i < 
SZ_EEPROM_MAPPING_TABLE
; i++ )

104 if–
mu8Id
 =
EïromM≠pögTabÀ
[ 
i
 ].
id
 )

106  
EïromM≠pögTabÀ
[ 
i
 ].
blockId
;

110  
EEP_BLOCK_NONE
;

111 
	}
}

114 
	$U8
 (*
	tA˘i⁄_T
)(
	tEïromBlock_T
);

115 
	s_ì¥om_block_èbÀ_


117 
EïromBlock_T
 
blockId
;

118 
U8
 
wrôe
;

119 
A˘i⁄_T
 
pWrôeA˘i⁄
;

120 
A˘i⁄_T
 
pRódA˘i⁄
;

121 }
	tEïBlockTabÀ_T
;

123 
U8
 
	`WrôeBlock0
(
EïromBlock_T
 
mBlockId
);

124 
U8
 
	`RódBlock0
(
EïromBlock_T
 
mBlockId
);

125 
U8
 
	`WrôeBlock1
(
EïromBlock_T
 
mBlockId
);

126 
U8
 
	`RódBlock1
(
EïromBlock_T
 
mBlockId
);

128 
U8
 
	`WrôeBlock2
(
EïromBlock_T
 
mBlockId
);

129 
U8
 
	`RódBlock2
(
EïromBlock_T
 
mBlockId
);

130 
U8
 
	`WrôeBlock3
(
EïromBlock_T
 
mBlockId
);

131 
U8
 
	`RódBlock3
(
EïromBlock_T
 
mBlockId
);

132 
U8
 
	`WrôeBlock4
(
EïromBlock_T
 
mBlockId
);

133 
U8
 
	`RódBlock4
(
EïromBlock_T
 
mBlockId
);

136 
EïBlockTabÀ_T
 
EïromBlockTabÀLi°
[] =

138 { 
EEP_BLOCK_0
, 
FALSE
, 
WrôeBlock0
, 
RódBlock0
 },

139 { 
EEP_BLOCK_1
, 
FALSE
, 
WrôeBlock1
, 
RódBlock1
 },

140 
	}
};

141 
	#SZ_BLOCK_TABLE
 ((
EïromBlockTabÀLi°
)/(
EïBlockTabÀ_T
))

	)

143 
	$InôBlockTabÀAŒSë
()

145 
U8
 
i
;

147  
i
 = 0; i < 
SZ_BLOCK_TABLE
; i++ )

149 
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 = 
TRUE
;

151 
	}
}

153 
	$SëBlockWrôe
–
EïromBlock_T
 
muBlockId
 )

155 
U8
 
i
;

157  
i
 = 0; i < 
SZ_BLOCK_TABLE
; i++ )

159 if–
muBlockId
 =
EïromBlockTabÀLi°
[ 
i
 ].
blockId
 )

161 
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 = 
TRUE
;

164 
	}
}

167 
	$SaveEïromId
–
EïromId_T
 
mu8Id
 )

169 
EïromBlock_T
 
muBlockId
;

171 if–
mu8Id
 > 
EEP_ID_NUM
 )

176 
Eï
.
DñayTime
 = 1;

177 
Eï
.
Wrôe
 = 
TRUE
;

179 
muBlockId
 = 
	`GëBlockId
–
mu8Id
 );

180 if–
muBlockId
 !
EEP_BLOCK_NONE
 )

182 
	`SëBlockWrôe
–
muBlockId
 );

184 
	}
}

186 
	$Eø£Eïrom
()

188 
Eï
.
Wrôe
 = 
TRUE
;

189 
Eï
.
Eø£
 = 
TRUE
;

190 
	}
}

193 
U8
 
	$EïromPageWrôe
–
U16
 
mu16Addr
, 
U8
 *
pD©a
 )

200 
mu16Addr
 +
EEP_ADDR_OFFSET
;

201  
	`HAL_RTC_PageWrôe
–
DEV_ADDR_EEP
, 
mu16Addr
, 
pD©a
, 
EEP_PAGE_SIZE
);

202 
	}
}

204 
U8
 
	$EïromSeqRód
–
U16
 
mu16Addr
, 
U8
 *
pD©a
, U8 
mu16Lígth
 )

211 
mu16Addr
 +
EEP_ADDR_OFFSET
;

212  
	`HAL_RTC_SeqRód
–
DEV_ADDR_EEP
, 
mu16Addr
, 
pD©a
, 
mu16Lígth
 );

213 
	}
}

216 
U8
 
	$WrôeBlock0
(
EïromBlock_T
 
mBlockId
)

218 
U16
 
mu16CheckSum
 = 0U;

220 
Eï
.
WrôeD©a
[ 0 ] = 0;

221 
Eï
.
WrôeD©a
[ 1 ] = 0;

222 
Eï
.
WrôeD©a
[ 2 ] = 0;

223 
Eï
.
WrôeD©a
[ 3 ] = 0;

224 
Eï
.
WrôeD©a
[ 4 ] = 0;

225 
Eï
.
WrôeD©a
[ 5 ] = 0;

226 
Eï
.
WrôeD©a
[ 6 ] = 0;

227 
Eï
.
WrôeD©a
[ 7 ] = 0;

228 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

230 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

231 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

235  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

236 
	}
}

238 
U8
 
	$RódBlockId
(
U8
 
mu8BlockId
, U8 *
pBuf
)

240 
U8
 
mu8Rë
;

241 
U16
 
mu16SrcChksum
 = 0U;

242 
U16
 
mu16CÆcChksum
 = 0U;

246 
mu8Rë
 = 
	`EïromSeqRód
–((
U16
)
mu8BlockId
 * 
EEP_PAGE_SIZE
 ), 
pBuf
, EEP_PAGE_SIZE );

247 if–
mu8Rë
 =
FALSE
 )

249  
FALSE
;

253 
mu16SrcChksum
 = 
	`GET_UINT_WORD
–
pBuf
[
EEP_PAGE_SIZE
 - 1],ÖBuf[EEP_PAGE_SIZE - 2] );

254 
mu16CÆcChksum
 = 
	`¸c16_ˇl
–
pBuf
, (
EEP_PAGE_SIZE
 - 2) );

255 if–
mu16SrcChksum
 !
mu16CÆcChksum
 )

257  
FALSE
;

260  
TRUE
;

261 
	}
}

263 
U8
 
	$RódBlock0
(
EïromBlock_T
 
mBlockId
)

265 
U8
 
mu8Rë
;

267 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

268 if–
mu8Rë
 =
FALSE
 )

270  
FALSE
;

279  
TRUE
;

280 
	}
}

282 
U8
 
	$WrôeBlock1
(
EïromBlock_T
 
mBlockId
)

284 
U16
 
mu16CheckSum
 = 0U;

287 
Memíto_T
 
mMemíto
;

290 
	`GëMemítoEº‹
–0, &
mMemíto
 );

291 
Eï
.
WrôeD©a
[ 0 ] = 
mMemíto
.
Eº‹
;

294 
	`GëMemítoEº‹
–1, &
mMemíto
 );

295 
Eï
.
WrôeD©a
[ 1 ] = 
mMemíto
.
Eº‹
;

298 
	`GëMemítoEº‹
–2, &
mMemíto
 );

299 
Eï
.
WrôeD©a
[ 2 ] = 
mMemíto
.
Eº‹
;

302 
	`GëMemítoEº‹
–3, &
mMemíto
 );

303 
Eï
.
WrôeD©a
[ 3 ] = 
mMemíto
.
Eº‹
;

306 
	`GëMemítoEº‹
–4, &
mMemíto
 );

307 
Eï
.
WrôeD©a
[ 4 ] = 
mMemíto
.
Eº‹
;

310 
mu16CheckSum
 = 
	`¸c16_ˇl
–&
Eï
.
WrôeD©a
[0], (
EEP_PAGE_SIZE
 - 2) );

312 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 2] = 
	`GET_HIGH_BYTE
–
mu16CheckSum
 );

313 
Eï
.
WrôeD©a
[
EEP_PAGE_SIZE
 - 1] = 
	`GET_LOW_BYTE
–
mu16CheckSum
 );

317  
	`EïromPageWrôe
–((
U16
)
mBlockId
 * 
EEP_PAGE_SIZE
Ë, &
Eï
.
WrôeD©a
[0] );

318 
	}
}

320 
U8
 
	$RódBlock1
(
EïromBlock_T
 
mBlockId
)

322 
U8
 
mu8Rë
;

323 
Memíto_T
 
mMemíto
;

326 
mu8Rë
 = 
	`RódBlockId
–
mBlockId
, &
Eï
.
RódD©a
[0] );

327 if–
mu8Rë
 =
FALSE
 )

329  
FALSE
;

333 
mMemíto
.
D©e
.
u16Yór
 = 0;

334 
mMemíto
.
D©e
.
u8M⁄th
 = 0;

335 
mMemíto
.
D©e
.
u8D©e
 = 0;

338 
mMemíto
.
Eº‹
 = 
Eï
.
RódD©a
[0];

339 
	`SëMemítoEº‹
–0, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

341 
mMemíto
.
Eº‹
 = 
Eï
.
RódD©a
[1];

342 
	`SëMemítoEº‹
–1, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

344 
mMemíto
.
Eº‹
 = 
Eï
.
RódD©a
[2];

345 
	`SëMemítoEº‹
–2, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

347 
mMemíto
.
Eº‹
 = 
Eï
.
RódD©a
[3];

348 
	`SëMemítoEº‹
–3, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

350 
mMemíto
.
Eº‹
 = 
Eï
.
RódD©a
[4];

351 
	`SëMemítoEº‹
–4, 
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

354  
TRUE
;

355 
	}
}

358 
U8
 
	$WrôeD©aBlocks
()

360 
U8
 
i
 = 0;

361 vﬁ©ûê
U8
 
mu8Rë
 = 
TRUE
;

362 
EïromBlock_T
 
mBlockId
;

364  
i
 = 0; i < 
SZ_BLOCK_TABLE
 ; i++ )

366 if–
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 =
TRUE
 )

368 if–
EïromBlockTabÀLi°
[ 
i
 ].
pWrôeA˘i⁄
 !
NULL
 )

370 
mBlockId
 = 
EïromBlockTabÀLi°
[ 
i
 ].
blockId
;

371 
mu8Rë
 = 
EïromBlockTabÀLi°
[ 
i
 ].
	`pWrôeA˘i⁄
–
mBlockId
 );

372 if–
mu8Rë
 =
TRUE
 )

374 
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 = 
FALSE
;

379 
EïromBlockTabÀLi°
[ 
i
 ].
wrôe
 = 
FALSE
;

384  
TRUE
;

385 
	}
}

388 
U8
 
	$RódD©aBlocks
()

390 
U8
 
i
 = 0;

391 vﬁ©ûê
U8
 
mu8Rë
 = 
TRUE
;

392 
EïromBlock_T
 
mBlockId
;

395  
i
 = 0; i < 
SZ_BLOCK_TABLE
 ; i++ )

397 if–
EïromBlockTabÀLi°
[ 
i
 ].
pRódA˘i⁄
 !
NULL
 )

399 
mBlockId
 = 
EïromBlockTabÀLi°
[ 
i
 ].
blockId
;

400 
mu8Rë
 = 
EïromBlockTabÀLi°
[ 
i
 ].
	`pRódA˘i⁄
–
mBlockId
 );

401 if–
mu8Rë
 =
FALSE
 )

403  
FALSE
;

408  
TRUE
;

409 
	}
}

412 
	$Pro˚ssEïrom
()

429 if–
Eï
.
Wrôe
 =
FALSE
 )

435 if–
Eï
.
DñayTime
 != 0 )

437 
Eï
.
DñayTime
--;

444 if–
Eï
.
Eø£
 =
TRUE
 )

447 if–
	`HAL_RTC_EEPROM_AŒEø£
(Ë=
TRUE
 )

449 
Eï
.
Wrôe
 = 
FALSE
;

450 
Eï
.
Eø£
 = 
FALSE
;

451 
	`Re£t
();

456 
	`WrôeD©aBlocks
();

457 
Eï
.
Wrôe
 = 
FALSE
;

461 
	}
}

463 
U8
 
	$Te°Eïrom
()

465 vﬁ©ûê
U8
 
mu8Rë
 = 0;

466 vﬁ©ûê
U8
 
mu8Ród
 = 0;

467 
U16
 
mu16Addr
;

473 
mu16Addr
 = (
EEP_BLOCK_0
 * 
EEP_PAGE_SIZE
Ë+ 
EEP_ADDR_OFFSET
;

474 
	`HAL_RTC_ByãWrôe
–
DEV_ADDR_EEP
, 
mu16Addr
, 0x12 );

475 
	`HAL_RTC_ByãRód
–
DEV_ADDR_EEP
, 
mu16Addr
, &
mu8Ród
 );

478 if–
mu8Ród
 == 0x12 )

480  
TRUE
;

483  
FALSE
;

484 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\eeprom\eeprom.h

1 #i‚de‡
__EEPROM_H__


2 
	#__EEPROM_H__


	)

4 
	~"¥j_ty≥.h
"

9 
	mEEP_ID_LOCK_ALL
,

10 
	mEEP_ID_LOCK_HOT
,

11 
	mEEP_ID_CONF_DECO_LED
,

12 
	mEEP_ID_FACTORY_SETUP
,

14 
	mEEP_ID_CONF_MAKE_COLD
,

15 
	mEEP_ID_CONF_MAKE_HOT
,

16 
	mEEP_ID_CONF_POWER_SAVING
,

17 
	mEEP_ID_CONF_UNUSED_SAVE
,

18 
	mEEP_ID_HOT_ALTITUDE
,

20 
	mEEP_ID_MEMENTO_1
,

21 
	mEEP_ID_MEMENTO_2
,

22 
	mEEP_ID_MEMENTO_3
,

23 
	mEEP_ID_MEMENTO_4
,

24 
	mEEP_ID_MEMENTO_5
,

26 
	mEEP_ID_NUM


27 } 
	tEïromId_T
;

29 
InôEïrom
();

31 
SaveEïromId
–
EïromId_T
 
mu8Id
 );

33 
Eø£Eïrom
();

35 
Pro˚ssEïrom
();

37 
U8
 
Te°Eïrom
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_room_level.c

1 
	~"îr_room_Àvñ.h
"

2 
	~"Àvñ.h
"

5 
U8
 
	ggu8EºCou¡Limô
 = 
DEFAULT_ROOM_ERR_COUNT
;

7 
	$SëRoomEºCou¡Limô
(
U8
 
mu8Cou¡
)

9 
gu8EºCou¡Limô
 = 
mu8Cou¡
;

10 
	}
}

12 
U8
 
	$GëRoomEºCou¡Limô
()

14  
gu8EºCou¡Limô
;

15 
	}
}

19 
U8
 
	$CheckEºRoomOvf
(
U8
 
mu8Eº‹
)

21 
U8
 
mu8Cou¡
;

24 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_OVF
 );

25 if–
mu8Cou¡
 >
gu8EºCou¡Limô
 )

27  
TRUE
;

29  
mu8Eº‹
;

30 
	}
}

32 
U8
 
	$Rñó£EºRoomOvf
(
U8
 
mu8Eº‹
)

34 
U8
 
mu8Cou¡
;

37 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_OVF
 );

38 if–
mu8Cou¡
 == 0 )

40  
FALSE
;

42  
mu8Eº‹
;

43 
	}
}

47 
U8
 
	$CheckEºRoomCom∂ex
(
U8
 
mu8Eº‹
)

49 
U8
 
mu8Cou¡
;

52 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_COMPLEX
 );

53 if–
mu8Cou¡
 >
gu8EºCou¡Limô
 )

55  
TRUE
;

57  
mu8Eº‹
;

58 
	}
}

60 
U8
 
	$Rñó£EºRoomCom∂ex
(
U8
 
mu8Eº‹
)

62 
U8
 
mu8Cou¡
;

65 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_COMPLEX
 );

66 if–
mu8Cou¡
 == 0 )

68  
FALSE
;

70  
mu8Eº‹
;

71 
	}
}

74 
U8
 
	$CheckEºRoomHigh
(
U8
 
mu8Eº‹
)

76 
U8
 
mu8Cou¡
;

79 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_HIGH
 );

80 if–
mu8Cou¡
 >
gu8EºCou¡Limô
 )

82  
TRUE
;

84  
mu8Eº‹
;

85 
	}
}

87 
U8
 
	$Rñó£EºRoomHigh
(
U8
 
mu8Eº‹
)

89 
U8
 
mu8Cou¡
;

92 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_HIGH
 );

93 if–
mu8Cou¡
 == 0 )

95  
FALSE
;

97  
mu8Eº‹
;

98 
	}
}

101 
U8
 
	$CheckEºRoomLow
(
U8
 
mu8Eº‹
)

103 
U8
 
mu8Cou¡
;

106 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_LOW
 );

107 if–
mu8Cou¡
 >= 1 )

109  
TRUE
;

111  
mu8Eº‹
;

112 
	}
}

114 
U8
 
	$Rñó£EºRoomLow
(
U8
 
mu8Eº‹
)

116 
U8
 
mu8Cou¡
;

119 
mu8Cou¡
 = 
	`GëT™kLevñEº‹Cou¡
–
LEVEL_ID_ROOM
, 
ERR_TYPE_LOW
 );

120 if–
mu8Cou¡
 == 0 )

122  
FALSE
;

124  
mu8Eº‹
;

125 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_room_level.h

1 #i‚de‡
__ERR_ROOM_LEVEL_H__


2 
	#__ERR_ROOM_LEVEL_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#DEFAULT_ROOM_ERR_COUNT
 3

	)

8 
SëRoomEºCou¡Limô
(
U8
 
mu8Cou¡
);

9 
U8
 
GëRoomEºCou¡Limô
();

12 
U8
 
CheckEºRoomOvf
(U8 
mu8Eº‹
);

13 
U8
 
Rñó£EºRoomOvf
(U8 
mu8Eº‹
);

15 
U8
 
CheckEºRoomCom∂ex
(U8 
mu8Eº‹
);

16 
U8
 
Rñó£EºRoomCom∂ex
(U8 
mu8Eº‹
);

18 
U8
 
CheckEºRoomLow
(U8 
mu8Eº‹
);

19 
U8
 
Rñó£EºRoomLow
(U8 
mu8Eº‹
);

21 
U8
 
CheckEºRoomHigh
(U8 
mu8Eº‹
);

22 
U8
 
Rñó£EºRoomHigh
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp.c

1 
	~"îr_ãmp.h
"

9 
	#ADC_10BIT_TOP
 985

	)

10 
	#ADC_10BIT_BOTTOM
 41

	)

12 
U8
 
	$GëTempEº‹Ty≥
(
U16
 
mu16Adc
)

14 if–
mu16Adc
 > 
ADC_10BIT_TOP
 )

16  
STATUS_SHORT
;

18 if–
mu16Adc
 < 
ADC_10BIT_BOTTOM
 )

20  
STATUS_OPEN
;

23  
STATUS_NORMAL
;

24 
	}
}

27 
U8
 
	$CheckEº‹Temp
(
U8
 
mu8Eº‹
, 
U16
 
mu16Adc
, U8 *
pBuf
)

29 
U8
 
mu8Index
;

32 
mu8Index
 = 
	`GëTempEº‹Ty≥
–
mu16Adc
 );

33 if–
mu8Index
 !
pBuf
[0] )

35 
pBuf
[0] = 
mu8Index
;

37 
pBuf
[1] = 
COUNT_NUM
;

38 
pBuf
[2] = 
COUNT_NUM
;

39 
pBuf
[3] = 
COUNT_NUM
;

40  
mu8Eº‹
;

43 if–
pBuf
[ 
mu8Index
 ] != 0 )

45 
pBuf
[ 
mu8Index
 ]--;

48 if–
pBuf
[ 
mu8Index
 ] == 0 )

50 if–
mu8Index
 =
STATUS_NORMAL
 )

52 
mu8Eº‹
 = 
FALSE
;

56 
mu8Eº‹
 = 
TRUE
;

60  
mu8Eº‹
;

61 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp.h

1 #i‚de‡
__ERR_TEMP_H__


2 
	#__ERR_TEMP_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#STATUS_NORMAL
 1

	)

8 
	#STATUS_OPEN
 2

	)

9 
	#STATUS_SHORT
 3

	)

10 
U8
 
GëTempEº‹Ty≥
(
U16
 
mu16Adc
);

12 
	#COUNT_NUM
 30

	)

13 
U8
 
CheckEº‹Temp
(U8 
mu8Eº‹
, 
U16
 
mu16Adc
, U8 *
pTimîBuf
);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp_cold_water.c

1 
	~"îr_ãmp_cﬁd_w©î.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hÆ_adc.h
"

4 
	~"cﬁd_w©î.h
"

5 
	~"ãmp.h
"

7 
U8
 
	gmu8Cou¡Li°
[4] =

10 
COUNT_NUM
,

11 
COUNT_NUM
,

12 
COUNT_NUM


15 
U8
 
	$CheckEºTempCﬁdW©î
(
U8
 
mu8Eº‹
)

17 
U16
 
mu16Adc
;

19 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

21  
FALSE
;

23 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_COLD_WATER
 );

24  
	`CheckEº‹Temp
–
mu8Eº‹
, 
mu16Adc
, 
mu8Cou¡Li°
 );

25 
	}
}

27 
U8
 
	$Rñó£EºTempCﬁdW©î
(
U8
 
mu8Eº‹
 )

29 if–
	`GëCﬁdW©îC⁄figMake
(Ë=
FALSE
 )

31  
FALSE
;

35 
	`Tu∫OnTempSís‹
–
TEMP_ID_COLD_WATER
, 10 );

37  
	`CheckEºTempCﬁdW©î
–
mu8Eº‹
 );

38 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp_cold_water.h

1 #i‚de‡
__ERR_TEMP_COLD_WATER_H__


2 
	#__ERR_TEMP_COLD_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºTempCﬁdW©î
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºTempCﬁdW©î
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp_hot_water.c

1 
	~"îr_ãmp_hŸ_w©î.h
"

2 
	~"îr_ãmp.h
"

3 
	~"hÆ_adc.h
"

4 
	~"hŸ_w©î.h
"

6 
U8
 
	gmu8Cou¡Li°
[4] =

9 
COUNT_NUM
,

10 
COUNT_NUM
,

11 
COUNT_NUM


14 
U8
 
	$CheckEºTempHŸW©î
(
U8
 
mu8Eº‹
)

16 
U16
 
mu16Adc
;

18 if–
	`GëHŸW©îC⁄figMake
(Ë=
FALSE
 )

20  
FALSE
;

22 
mu16Adc
 = 
	`HAL_GëAdcVÆue
–
ANI_TEMP_HOT_WATER
 );

23  
	`CheckEº‹Temp
–
mu8Eº‹
, 
mu16Adc
, 
mu8Cou¡Li°
 );

24 
	}
}

26 
U8
 
	$Rñó£EºTempHŸW©î
(
U8
 
mu8Eº‹
)

29 if–
	`GëHŸW©îC⁄figMake
(Ë=
FALSE
 )

31  
FALSE
;

34  
	`CheckEºTempHŸW©î
(
mu8Eº‹
);

35 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp_hot_water.h

1 #i‚de‡
__ERR_TEMP_HOT_WATER_H__


2 
	#__ERR_TEMP_HOT_WATER_H__


	)

4 
	~"¥j_ty≥.h
"

6 
U8
 
CheckEºTempHŸW©î
(U8 
mu8Eº‹
);

8 
U8
 
Rñó£EºTempHŸW©î
(U8 
mu8Eº‹
);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\error.c

1 
	~"îr‹.h
"

2 
	~"ì¥om.h
"

3 
	~"time_sh‹t.h
"

6 
Eº‹_T
 
	gEº
;

8 
	$InôEº‹
()

10 
	`mem£t
–&
Eº
, 0, –
Eº‹_T
 ));

11 
	}
}

13 
	$GëEº‹D©a
(
Eº‹_T
 *
pD©a
)

15 
	`mem˝y
–
pD©a
, &
Eº
, –
Eº‹_T
));

16 
	}
}

18 
	$SëEº‹Sètus
(
Eº‹Id_T
 
mId
, 
U8
 
mu8Sètus
)

20 if–
mId
 < 
ERR_NUM
 )

22 
Eº
.
Sètus
[ 
mId
 ] = 
mu8Sètus
;

24 
	}
}

26 
	$SëEº‹SètusD©e
(
Eº‹Id_T
 
mId
, 
U8
 
mu8Sètus
, 
Eº‹D©e_T
 *
pD©e
)

28 if–
mId
 < 
ERR_NUM
 )

30 
Eº
.
Sètus
[ 
mId
 ] = 
mu8Sètus
;

31 
	`mem˝y
–&
Eº
.
SètusD©e
[ 
mId
 ], 
pD©e
, –
Eº‹D©e_T
 ));

33 
	}
}

35 
U8
 
	$GëEº‹Sètus
(
Eº‹Id_T
 
mId
)

37  
Eº
.
Sètus
[ 
mId
 ];

38 
	}
}

40 
	$GëEº‹SètusD©e
(
Eº‹Id_T
 
mId
, 
Eº‹D©e_T
 *
pD©e
)

42 if–
mId
 < 
ERR_NUM
 )

44 
	`mem˝y
–
pD©e
, &
Eº
.
SètusD©e
[ 
mId
 ], –
Eº‹D©e_T
 ));

46 
	}
}

48 
U8
 
	$IsEº‹
(
Eº‹Id_T
 
mId
 )

50  
Eº
.
Sètus
[ 
mId
 ];

51 
	}
}

53 
Eº‹Id_T
 
	$GëEº‹Id
()

55  
Eº
.
Eº‹Id
;

56 
	}
}

58 
	$SëEº‹Id
(
Eº‹Id_T
 
mEºId
)

60 
Eº
.
Eº‹Id
 = 
mEºId
;

61 
	}
}

63 
U8
 
	$GëEº‹Di•œyId
(
Eº‹Id_T
 
mEºId
)

65 
U8
 
mu8Eº‹Code
 = 0;

68  
mEºId
 )

70 
ERR_ROOM_LOW_LEVEL
: 
mu8Eº‹Code
 = 11; ;

71 
ERR_ROOM_HIGH_LEVEL
: 
mu8Eº‹Code
 = 13; ;

72 
ERR_ROOM_COMPLEX
: 
mu8Eº‹Code
 = 14; ;

73 
ERR_ROOM_OVF
: 
mu8Eº‹Code
 = 10; ;

74 
ERR_LEAK
: 
mu8Eº‹Code
 = 1; ;

75 
ERR_TEMP_COLD_WATER
: 
mu8Eº‹Code
 = 44; ;

76 
ERR_TEMP_ROOM_WATER
: 
mu8Eº‹Code
 = 42; ;

77 
ERR_TEMP_AMBIENT
: 
mu8Eº‹Code
 = 43; ;

79 
ERR_DRAIN_PUMP
: 
mu8Eº‹Code
 = 60; ;

80 
ERR_TEMP_EVA_2
: 
mu8Eº‹Code
 = 63; ;

81 
ERR_TEMP_EVA_1
: 
mu8Eº‹Code
 = 63; ;

82 
ERR_COLD_LOW_LEVEL
: 
mu8Eº‹Code
 = 20; ;

83 
ERR_SODA_PUMP
: 
mu8Eº‹Code
 = 94; ;

84 
ERR_MICRO_SW_DETECT
: 
mu8Eº‹Code
 = 61; ;

85 
ERR_MICRO_SW_MOVE
: 
mu8Eº‹Code
 = 62; ;

89 : 
mu8Eº‹Code
 = 0; ;

94  
mu8Eº‹Code
;

95 
	}
}

97 
	$GëEº‹D©e
(
Eº‹D©e_T
 *
pD©e
)

100 
TimeD©a_T
 
mTime
;

102 if–
pD©e
 !
NULL
 )

104 
	`GëRtcTime
–&
mTime
 );

106 
pD©e
->
u16Yór
 = 
mTime
.
Yór
 + 2000;

107 
pD©e
->
u8M⁄th
 = 
mTime
.
M⁄th
;

108 
pD©e
->
u8D©e
 = 
mTime
.
D©e
;

111 
	}
}

113 
U8
 
	$IsEm±yMemítoEº‹
()

115 
U8
 
mu8Num
;

116 
Memíto_T
 
mMemíto
;

118 
mu8Num
 = 
MEMENTO_LIST_NUM
 - 1;

119 
	`GëMemítoEº‹
–
mu8Num
, &
mMemíto
 );

120 if–
mMemíto
.
Eº‹
 =
ERR_NONE
 )

122  
TRUE
;

125  
FALSE
;

126 
	}
}

128 
U8
 
	$GëMemítoEº‹
(
U8
 
mu8Index
, 
Memíto_T
 *
pMemíto
)

130 if–
mu8Index
 < 
MEMENTO_LIST_NUM
 )

132 
	`mem˝y
–
pMemíto
, &
Eº
.
MemítoLi°
[ 
mu8Index
 ], –
Memíto_T
 ));

133  
TRUE
;

136  
FALSE
;

137 
	}
}

139 
	$SëMemítoEº‹
(
U8
 
mu8Index
, 
Eº‹Id_T
 
mEº‹
, 
Eº‹D©e_T
 *
pD©e
 )

141 if–
mu8Index
 >
MEMENTO_LIST_NUM
 )

146 if–
mEº‹
 >
ERR_NUM
 )

151 
Eº
.
MemítoLi°
[ 
mu8Index
 ].
Eº‹
 = 
mEº‹
;

152 
	`mem˝y
–&
Eº
.
MemítoLi°
[ 
mu8Index
 ].
D©e
, 
pD©e
, –
Eº‹D©e_T
 ));

153 
	}
}

155 
	$CÀ¨MemítoEº‹
()

157 
U8
 
i
;

158 
Eº‹D©e_T
 
mD©e
;

160 
	`mem£t
–&
mD©e
, 0, –
Eº‹D©e_T
 ));

161  
i
 = 0; i < 
MEMENTO_LIST_NUM
 ; i++ )

163 
	`SëMemítoEº‹
–
i
, 
ERR_NONE
, &
mD©e
 );

164 
	`SaveEïromId
–
EEP_ID_MEMENTO_1
 );

165 
	`SaveEïromId
–
EEP_ID_MEMENTO_2
 );

166 
	`SaveEïromId
–
EEP_ID_MEMENTO_3
 );

167 
	`SaveEïromId
–
EEP_ID_MEMENTO_4
 );

168 
	`SaveEïromId
–
EEP_ID_MEMENTO_5
 );

170 
	}
}

172 
	$Upd©eMemítoEº‹
–
Memíto_T
 *
pMemíto
 )

174 if–
pMemíto
->
Eº‹
 !
ERR_NONE
 )

178 if–
Eº
.
MemítoLi°
[ 
MEMENTO_LIST_NUM
 - 1 ].
Eº‹
 !
pMemíto
->Error )

182 
	`mem˝y
–&
Eº
.
MemítoLi°
[ 0 ], &Eº.MemítoLi°[1], –
Memíto_T
 ) * (
MEMENTO_LIST_NUM
 - 1) );

183 
	`mem˝y
–&
Eº
.
MemítoLi°
[ 
MEMENTO_LIST_NUM
 - 1 ], 
pMemíto
, –
Memíto_T
 ) );

185 
	`SaveEïromId
–
EEP_ID_MEMENTO_1
 );

186 
	`SaveEïromId
–
EEP_ID_MEMENTO_2
 );

187 
	`SaveEïromId
–
EEP_ID_MEMENTO_3
 );

188 
	`SaveEïromId
–
EEP_ID_MEMENTO_4
 );

189 
	`SaveEïromId
–
EEP_ID_MEMENTO_5
 );

192 
	}
}

196 
U8
 
	$IsEº‹Ty≥NosFìd
()

199 if–
	`IsEº‹
–
ERR_ROOM_OVF
 ) =
TRUE


200 || 
	`IsEº‹
–
ERR_ROOM_COMPLEX
 ) =
TRUE


201 || 
	`IsEº‹
–
ERR_ROOM_HIGH_LEVEL
 ) =
TRUE


202 || 
	`IsEº‹
–
ERR_ROOM_LOW_LEVEL
 ) =
TRUE


206  
TRUE
;

209  
FALSE
;

210 
	}
}

215 
U8
 
	$IsEº‹Ty≥CﬁdW©î
()

217 if–
	`IsEº‹
–
ERR_TEMP_COLD_WATER
 ) =
TRUE


218 || 
	`IsEº‹
–
ERR_ROOM_COMPLEX
 ) =
TRUE


219 || 
	`IsEº‹
–
ERR_ROOM_HIGH_LEVEL
 ) =
TRUE


220 || 
	`IsEº‹
–
ERR_ROOM_OVF
 ) =
TRUE


221 || 
	`IsEº‹
–
ERR_ROOM_LOW_LEVEL
 ) =
TRUE


224  
TRUE
;

227  
FALSE
;

228 
	}
}

231 
U8
 
	$IsEº‹Ty≥HŸW©î
()

233 if–
	`IsEº‹
–
ERR_TEMP_HOT_WATER
 ) =
TRUE


234 || 
	`IsEº‹
–
ERR_ROOM_COMPLEX
 ) =
TRUE


235 || 
	`IsEº‹
–
ERR_ROOM_HIGH_LEVEL
 ) =
TRUE


236 || 
	`IsEº‹
–
ERR_ROOM_OVF
 ) =
TRUE


237 || 
	`IsEº‹
–
ERR_ROOM_LOW_LEVEL
 ) =
TRUE


240  
TRUE
;

244  
FALSE
;

245 
	}
}

248 
U8
 
	$IsEº‹Ty≥CﬁdW©î
()

251 if–
	`GëTimeSh‹tSètus
(Ë=
FALSE
 )

253 if–
	`IsEº‹
–
ERR_ROOM_COMPLEX
 ) =
TRUE


254 || 
	`IsEº‹
–
ERR_ROOM_HIGH_LEVEL
 ) =
TRUE


255 || 
	`IsEº‹
–
ERR_ROOM_OVF
 ) =
TRUE


256 || 
	`IsEº‹
–
ERR_ROOM_LOW_LEVEL
 ) =
TRUE
 )

258  
TRUE
;

262 if–
	`IsEº‹
–
ERR_TEMP_COLD_WATER
 ) =
TRUE
 )

264  
TRUE
;

267  
FALSE
;

268 
	}
}

271 
U8
 
	$IsEº‹Ty≥HŸW©î
()

274 if–
	`GëTimeSh‹tSètus
(Ë=
FALSE
 )

276 if–
	`IsEº‹
–
ERR_ROOM_COMPLEX
 ) =
TRUE


277 || 
	`IsEº‹
–
ERR_ROOM_HIGH_LEVEL
 ) =
TRUE


278 || 
	`IsEº‹
–
ERR_ROOM_OVF
 ) =
TRUE


279 || 
	`IsEº‹
–
ERR_ROOM_LOW_LEVEL
 ) =
TRUE
 )

281  
TRUE
;

285 if–
	`IsEº‹
–
ERR_TEMP_HOT_WATER
 ) =
TRUE
 )

287  
TRUE
;

291  
FALSE
;

292 
	}
}

295 
U8
 
	$IsEº‹Ty≥I˚
()

298 if–
	`IsEº‹
–
ERR_TEMP_ROOM_WATER
 ) =
TRUE


299 || 
	`IsEº‹
–
ERR_TEMP_AMBIENT
 ) =
TRUE


300 || 
	`IsEº‹
–
ERR_ROOM_COMPLEX
 ) =
TRUE


301 || 
	`IsEº‹
–
ERR_ROOM_HIGH_LEVEL
 ) =
TRUE


302 || 
	`IsEº‹
–
ERR_ROOM_OVF
 ) =
TRUE


303 || 
	`IsEº‹
–
ERR_ROOM_LOW_LEVEL
 ) =
TRUE


304 || 
	`IsEº‹
–
ERR_DRAIN_PUMP
 ) =
TRUE


305 || 
	`IsEº‹
–
ERR_MICRO_SW_DETECT
 ) =
TRUE


306 || 
	`IsEº‹
–
ERR_MICRO_SW_MOVE
 ) =
TRUE


307 || 
	`IsEº‹
–
ERR_LEAK
 ) =
TRUE


310  
TRUE
;

314  
FALSE
;

315 
	}
}

317 
U8
 
	$IsEº‹Ty≥Soda
()

320 if–
	`IsEº‹
–
ERR_COLD_LOW_LEVEL
 ) =
TRUE
 )

322  
TRUE
;

326  
FALSE
;

327 
	}
}

329 
U8
 
	$IsEº‹Ty≥DøöW©î
()

332 if–
	`IsEº‹
–
ERR_ROOM_COMPLEX
 ) =
TRUE


333 || 
	`IsEº‹
–
ERR_ROOM_HIGH_LEVEL
 ) =
TRUE


334 || 
	`IsEº‹
–
ERR_ROOM_OVF
 ) =
TRUE


335 || 
	`IsEº‹
–
ERR_ROOM_LOW_LEVEL
 ) =
TRUE


336 || 
	`IsEº‹
–
ERR_COLD_LOW_LEVEL
 ) =
TRUE


337 || 
	`IsEº‹
–
ERR_DRAIN_PUMP
 ) =
TRUE


338 || 
	`IsEº‹
–
ERR_LEAK
 ) =
TRUE


341  
TRUE
;

345  
FALSE
;

346 
	}
}

348 
U8
 
	$IsEº‹Ty≥Sãr
()

351 if–
	`IsEº‹Ty≥DøöW©î
(Ë=
TRUE
 )

353  
TRUE
;

356 if–
	`IsEº‹
–
ERR_NFC_COMM
 ) =
TRUE
 )

358  
TRUE
;

362  
FALSE
;

363 
	}
}

367 
	$Upd©eNewEº‹
(
U8
 
mu8Eº‹
)

369 
Memíto_T
 
mMemíto
;

373 if–
mu8Eº‹
 =
ERR_TEMP_EVA_1


374 || 
mu8Eº‹
 =
ERR_TEMP_EVA_2
 )

380 if–
Eº
.
Eº‹Id
 !
mu8Eº‹
 )

382 
Eº
.
PªvEº‹Id
 = Eº.
Eº‹Id
;

384 
mMemíto
.
Eº‹
 = 
mu8Eº‹
;

385 
	`GëEº‹SètusD©e
–
mMemíto
.
Eº‹
, &mMemíto.
D©e
 );

390 
Eº
.
Eº‹Id
 = 
mu8Eº‹
;

391 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\error.h

1 #i‚de‡
__ERROR_H__


2 
	#__ERROR_H__


	)

4 
	~"¥j_ty≥.h
"

12 
	e_îr‹_id_


14 
	mERR_NONE
,

16 
	mERR_TEMP_COLD_WATER
,

17 
	mERR_TEMP_HOT_WATER
,

21 
	mERR_ROOM_COMPLEX
,

22 
	mERR_ROOM_HIGH_LEVEL
,

23 
	mERR_ROOM_LOW_LEVEL
,

24 
	mERR_ROOM_OVF
,

26 
	mERR_NUM


27 } 
	tEº‹Id_T
;

30 
	s_îr‹_d©e_


32 
U16
 
	mu16Yór
;

33 
U8
 
	mu8M⁄th
;

34 
U8
 
	mu8D©e
;

35 } 
	tEº‹D©e_T
;

37 
	s_memíto_


39 
Eº‹Id_T
 
	mEº‹
;

40 
Eº‹D©e_T
 
	mD©e
;

41 } 
	tMemíto_T
;

44 
	#MEMENTO_LIST_NUM
 5

	)

45 
	s_îr‹_


47 
Eº‹Id_T
 
	mPªvEº‹Id
;

48 
Eº‹Id_T
 
	mEº‹Id
;

49 
Eº‹D©e_T
 
	mEº‹D©e
;

51 
U8
 
	mSètus
[ 
ERR_NUM
 ];

52 
Eº‹D©e_T
 
	mSètusD©e
[ 
ERR_NUM
 ];

56 
Memíto_T
 
	mMemítoLi°
[ 
MEMENTO_LIST_NUM
 ];

57 }
	tEº‹_T
;

60 
InôEº‹
();

62 
GëEº‹D©a
(
Eº‹_T
 *
pD©a
);

64 
SëEº‹Sètus
(
Eº‹Id_T
 
mId
, 
U8
 
mu8Sètus
);

65 
SëEº‹SètusD©e
(
Eº‹Id_T
 
mId
, 
U8
 
mu8Sètus
, 
Eº‹D©e_T
 *
pD©e
);

67 
U8
 
GëEº‹Sètus
(
Eº‹Id_T
 
mId
);

68 
GëEº‹SètusD©e
(
Eº‹Id_T
 
mId
, 
Eº‹D©e_T
 *
pD©e
);

70 
Eº‹Id_T
 
GëEº‹Id
();

71 
SëEº‹Id
(
Eº‹Id_T
 
mEºId
);

72 
U8
 
GëEº‹Di•œyId
(
Eº‹Id_T
 
mEºId
);

73 
GëEº‹D©e
(
Eº‹D©e_T
 *
pD©e
);

77 
U8
 
IsEm±yMemítoEº‹
();

78 
U8
 
GëMemítoEº‹
(U8 
mu8Index
, 
Memíto_T
 *
pMemíto
);

79 
SëMemítoEº‹
(
U8
 
mu8Index
, 
Eº‹Id_T
 
mEº‹
, 
Eº‹D©e_T
 *
pD©e
 );

80 
CÀ¨MemítoEº‹
();

82 
U8
 
IsEº‹
(
Eº‹Id_T
 
mId
 );

83 
U8
 
IsEº‹Ty≥NosFìd
();

84 
U8
 
IsEº‹Ty≥CﬁdW©î
();

85 
U8
 
IsEº‹Ty≥HŸW©î
();

86 
U8
 
IsEº‹Ty≥I˚
();

87 
U8
 
IsEº‹Ty≥Soda
();

88 
U8
 
IsEº‹Ty≥DøöW©î
();

89 
U8
 
IsEº‹Ty≥Sãr
();

91 
Upd©eNewEº‹
(
U8
 
mu8Eº‹
);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\process_error.c

1 
	~"¥o˚ss_îr‹.h
"

2 
	~"îr‹.h
"

4 
	~"ì¥om.h
"

5 
	~"Àvñ.h
"

6 
	~"time_sh‹t.h
"

8 
	~"îr_ãmp_cﬁd_w©î.h
"

9 
	~"îr_ãmp_hŸ_w©î.h
"

10 
	~"îr_room_Àvñ.h
"

14 
	$U8
 (*
	tEºFun_T
)(
	tU8
 
	tmu8Eº‹
);

15 
	s_îr‹_li°_


17 
Eº‹Id_T
 
Id
;

18 
U8
 
PªvEº‹
;

19 
U8
 
Eº‹
;

20 
U8
 
SãrA˘ive
;

21 
U8
 
Di•A˘ive
;

23 
EºFun_T
 
Check
;

24 
EºFun_T
 
Rñó£
;

25 } 
	tEº‹Li°_T
;

27 
	$InôEº‹Li°
()

29 
	`InôEº‹
();

30 
	}
}

32 
U8
 
Rñó£EºRoomOvfEx
(U8 
mu8Eº‹
);

33 
U8
 
Rñó£EºRoomCom∂exEx
(U8 
mu8Eº‹
);

34 
U8
 
Rñó£EºRoomHighEx
(U8 
mu8Eº‹
);

35 
U8
 
Rñó£EºRoomLowEx
(U8 
mu8Eº‹
);

38 
Eº‹Li°_T
 
	gEºLi°
[] =

41 { 
ERR_ROOM_COMPLEX
, 
FALSE
, FALSE, 
TRUE
, TRUE, 
CheckEºRoomCom∂ex
, 
Rñó£EºRoomCom∂exEx
 },

42 { 
ERR_ROOM_HIGH_LEVEL
, 
FALSE
, FALSE, 
TRUE
, TRUE, 
CheckEºRoomHigh
, 
Rñó£EºRoomHighEx
 },

43 { 
ERR_ROOM_LOW_LEVEL
, 
FALSE
, FALSE, 
TRUE
, TRUE, 
CheckEºRoomLow
, 
Rñó£EºRoomLowEx
 },

44 { 
ERR_ROOM_OVF
, 
FALSE
, FALSE, 
TRUE
, TRUE, 
CheckEºRoomOvf
, 
Rñó£EºRoomOvfEx
 },

45 { 
ERR_TEMP_COLD_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, 
CheckEºTempCﬁdW©î
, 
Rñó£EºTempCﬁdW©î
 },

46 { 
ERR_TEMP_HOT_WATER
, 
FALSE
, FALSE, 
TRUE
, TRUE, 
CheckEºTempHŸW©î
, 
Rñó£EºTempHŸW©î
 }

48 
	#SZ_ERR_LIST
 ((
EºLi°
)/(
Eº‹Li°_T
))

	)

51 
Eº‹Id_T
 
	$FödCheckEº‹
–
Eº‹Li°_T
 *
pEºLi°
, 
U16
 
mu16Size
 )

53 
U8
 
i
;

54 
EºFun_T
 
pCheck
;

55 
EºFun_T
 
pRñó£
;

56 
Eº‹Id_T
 
mId
 = 
ERR_NONE
;

57 
Eº‹Id_T
 
mNewId
 = 
ERR_NONE
;

58 
U8
 
mu8Eº‹
 = 
FALSE
;

60 
Eº‹Li°_T
 *
pLi°
 = 
NULL
;

64  
i
 = 0; i < 
mu16Size
; i++ )

66 
pLi°
 = (
pEºLi°
 + 
i
 );

69 
mId
 = 
pLi°
->
Id
;

70 
mu8Eº‹
 = 
pLi°
->
Eº‹
;

71 
pCheck
 = 
pLi°
->
Check
;

72 
pRñó£
 = 
pLi°
->
Rñó£
;

74 #i‡
CONFIG_STER


75 if–
	`IsSèπSãr
(Ë=
TRUE
 )

77 if–
pLi°
->
SãrA˘ive
 =
FALSE
 )

84 if–
mu8Eº‹
 =
TRUE
 )

86 #i‡
CONFIG_STER


87 if–
	`GëSãrEºW©îOut
(Ë=
FALSE
 )

90 if–
pRñó£
 !
NULL
 )

92 
mu8Eº‹
 = 
	`pRñó£
( mu8Error );

98 if–
pCheck
 !
NULL
 )

100 
mu8Eº‹
 = 
	`pCheck
( mu8Error );

105 if–
pLi°
->
PªvEº‹
 !
mu8Eº‹
 )

107 
pLi°
->
PªvEº‹
 =ÖLi°->
Eº‹
;

108 
pLi°
->
Eº‹
 = 
mu8Eº‹
;

110 
	`SëEº‹Sètus
–
mId
, 
pLi°
->
Eº‹
 );

114 if–
pLi°
->
Di•A˘ive
 =
TRUE
 )

117 if–
	`GëEº‹Sètus
–
mId
 ) =
TRUE
 )

119 
mNewId
 = 
mId
;

125  
mNewId
;

126 
	}
}

129 
	$Pro˚ssEº‹
()

131 #i‡
CONFIG_ERR_ALL


132 
Eº‹Id_T
 
mNewId
 = 
ERR_NONE
;

135 
mNewId
 = 
	`FödCheckEº‹
–&
EºLi°
[0], 
SZ_ERR_LIST
 );

138 
	`Upd©eNewEº‹
–
mNewId
 );

140 
	}
}

143 
U8
 
	$Rñó£EºRoomOvfEx
(
U8
 
mu8Eº‹
)

145 if–
	`GëTimeSh‹tSètus
(Ë=
FALSE
 )

147  
mu8Eº‹
;

150  
	`Rñó£EºRoomOvf
–
mu8Eº‹
 );

151 
	}
}

153 
U8
 
	$Rñó£EºRoomCom∂exEx
(
U8
 
mu8Eº‹
)

155 if–
	`GëTimeSh‹tSètus
(Ë=
FALSE
 )

157  
mu8Eº‹
;

160  
	`Rñó£EºRoomCom∂ex
–
mu8Eº‹
 );

161 
	}
}

163 
U8
 
	$Rñó£EºRoomHighEx
(
U8
 
mu8Eº‹
)

165 if–
	`GëTimeSh‹tSètus
(Ë=
FALSE
 )

167  
mu8Eº‹
;

170  
	`Rñó£EºRoomHigh
–
mu8Eº‹
 );

171 
	}
}

173 
U8
 
	$Rñó£EºRoomLowEx
(
U8
 
mu8Eº‹
)

175 if–
	`GëTimeSh‹tSètus
(Ë=
FALSE
 )

177  
mu8Eº‹
;

180  
	`Rñó£EºRoomLow
–
mu8Eº‹
 );

181 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\process_error.h

1 #i‚de‡
__PROCESS_ERROR_H__


2 
	#__PROCESS_ERROR_H__


	)

4 
	~"¥j_ty≥.h
"

7 
InôEº‹Li°
();

8 
Pro˚ssEº‹
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\fct.c

1 
	~"f˘.h
"

4 
	#DEFAULT_LIMIT_TIME_VALUE
 30U

	)

5 
	#DEFAULT_TEST_TIME_VALUE
 1800U

	)

8 
	s_f˘_


10 
U8
 
	mSètus
;

11 
U16
 
	mLimôTimî
;

12 
U16
 
	mTe°Timî
;

15 
U32
 
	mI≈utTe°
;

16 } 
	tF˘_T
;

18 
F˘_T
 
	gf˘
;

21 
	$InôF˘
()

23 
f˘
.
Sètus
 = 
FALSE
;

24 
f˘
.
LimôTimî
 = 
DEFAULT_LIMIT_TIME_VALUE
;

25 
f˘
.
Te°Timî
 = 
DEFAULT_TEST_TIME_VALUE
;

26 
f˘
.
I≈utTe°
 = 0UL;

27 
	}
}

29 
	$SèπF˘
()

31 if–
f˘
.
LimôTimî
 == 0 )

36 
f˘
.
Sètus
 = 
TRUE
;

37 
	}
}

39 
	$St›F˘
()

41 
f˘
.
Sètus
 = 
FALSE
;

42 
	}
}

44 
U8
 
	$IsExpúedF˘LimôTimî
()

46 if–
f˘
.
LimôTimî
 != 0 )

48  
FALSE
;

50  
TRUE
;

51 
	}
}

53 
U8
 
	$GëF˘Sètus
()

55  
f˘
.
Sètus
;

56 
	}
}

58 
	$SëF˘Te°Timî
(
U16
 
mu16Time
)

60 
f˘
.
Te°Timî
 = 
mu16Time
;

61 
	}
}

63 
U16
 
	$GëF˘Te°Timî
()

65  
f˘
.
Te°Timî
;

66 
	}
}

70 
	$SëF˘Te°I≈utBô
(
U32
 
mu32MaskBô
)

72 
f˘
.
I≈utTe°
 |
mu32MaskBô
;

73 
	}
}

75 
	$CÀ¨F˘Te°I≈utBô
(
U32
 
mu32MaskBô
)

77 
f˘
.
I≈utTe°
 &~
mu32MaskBô
;

78 
	}
}

80 
	$SëF˘Te°I≈utVÆ
(
U32
 
mu32MaskBô
)

82 
f˘
.
I≈utTe°
 = 
mu32MaskBô
;

83 
	}
}

85 
U8
 
	$IsSëF˘Te°I≈utVÆ
–
U32
 
mu32MaskBô
 )

87 if–(
f˘
.
I≈utTe°
 & 
mu32MaskBô
) != 0 )

89  
TRUE
;

92  
FALSE
;

93 
	}
}

95 
U32
 
	$GëF˘Te°I≈utVÆ
()

97  
f˘
.
I≈utTe°
;

98 
	}
}

101 
	$Upd©eF˘Timî
()

103 if–
f˘
.
LimôTimî
 != 0 )

105 
f˘
.
LimôTimî
--;

107 if–
f˘
.
Te°Timî
 != 0 )

109 
f˘
.
Te°Timî
--;

111 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\fct.h

1 #i‚de‡
__FCT_H__


2 
	#__FCT_H__


	)

4 
	~"¥j_ty≥.h
"

6 
InôF˘
();

8 
SèπF˘
();

9 
St›F˘
();

10 
U8
 
IsExpúedF˘LimôTimî
();

11 
U8
 
GëF˘Sètus
();

13 
SëF˘Te°Timî
(
U16
 
mu16Time
);

14 
U16
 
GëF˘Te°Timî
();

18 
	#MK_FCT_KEY_BACK
 0x00000001UL

	)

19 
	#MK_FCT_KEY_SETTING
 0x00000002UL

	)

20 
	#MK_FCT_KEY_LEFT
 0x00000004UL

	)

21 
	#MK_FCT_KEY_RIGHT
 0x00000008UL

	)

23 
	#MK_FCT_KEY_ROOM
 0x00000010UL

	)

24 
	#MK_FCT_KEY_COLD
 0x00000020UL

	)

25 
	#MK_FCT_KEY_CONTY
 0x00000040UL

	)

26 
	#MK_FCT_KEY_SODA
 0x00000080UL

	)

28 
	#MK_FCT_KEY_USER
 0x00000100UL

	)

29 
	#MK_FCT_LEVER_WATER
 0x00000200UL

	)

30 
	#MK_FCT_LEVER_ICE
 0x00000400UL

	)

31 
	#MK_FCT_TANK_OPEN
 0x00000800UL

	)

33 
	#MK_FCT_EEPROM
 0x00001000UL

	)

34 
	#MK_FCT_LCD_MUTE
 0x00002000UL

	)

35 
	#MK_FCT_LCD_COLD
 0x00004000UL

	)

36 
	#MK_FCT_LCD_SAVING
 0x00008000UL

	)

38 
	#MK_FCT_LCD_ERROR
 0x00010000UL

	)

39 
	#MK_FCT_LCD_ICE
 0x00020000UL

	)

40 
	#MK_FCT_LCD_LOW
 0x00040000UL

	)

42 
	#MK_FCT_ALL
 0x0007FFFFUL

	)

43 
SëF˘Te°I≈utBô
(
U32
 
mu32MaskBô
);

44 
CÀ¨F˘Te°I≈utBô
(
U32
 
mu32MaskBô
);

45 
SëF˘Te°I≈utVÆ
(
U32
 
mu32MaksBô
);

46 
U8
 
IsSëF˘Te°I≈utVÆ
–
U32
 
mu32MaskBô
 );

47 
U32
 
GëF˘Te°I≈utVÆ
();

50 
Upd©eF˘Timî
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\key_fct_handler.c

1 
	~"key_f˘_h™dÀr.h
"

2 
	~"key.h
"

3 
	~"key_comm⁄_h™dÀr.h
"

4 
	~"di•œy.h
"

5 
	~"sound.h
"

6 
	~"¥o˚ss_f˘.h
"

8 
SëKeyBô
(
U32
 
mu32MaskBô
 );

9 
U8
 
FCT_Room
();

10 
U8
 
FCT_Cﬁd
();

11 
U8
 
FCT_C⁄ty
();

13 
U8
 
FCT_Soda
();

14 
U8
 
FCT_U£r
();

15 
U8
 
FCT_Back
();

16 
U8
 
FCT_Sëtög
();

17 
U8
 
FCT_Le·
();

18 
U8
 
FCT_Right
();

21 c⁄° 
KeyEvítLi°_T
 
	gFCT_KeyEvítLi°
[] =

27 { 
K_COLD
, 
FCT_Cﬁd
, 
NULL
, NULL, NULL, NULL, NULL }

31 
U8
 
	$IsVÆidF˘KeyC⁄dôi⁄
(
U16
 
mu16Key
)

34  
TRUE
;

35 
	}
}

37 * 
	$GëF˘KeyEvítLi°
()

39  (*)
FCT_KeyEvítLi°
;

40 
	}
}

42 
U8
 
	$GëF˘KeyEvítLi°Size
()

44  ( (
FCT_KeyEvítLi°
Ë/ (
KeyEvítLi°_T
) );

45 
	}
}

47 
	$SëKeyBô
(
U32
 
mu32MaskBô
 )

49 
U32
 
mu32I≈utVÆ
;

52 
mu32I≈utVÆ
 = 
	`GëF˘Te°I≈utVÆ
();

53 if–(
mu32I≈utVÆ
 & 
mu32MaskBô
 ) != 0 )

55 
	`CÀ¨F˘Te°I≈utBô
–
mu32MaskBô
 );

59 
	`SëF˘Te°I≈utBô
–
mu32MaskBô
 );

61 
	}
}

63 
U8
 
	$FCT_Room
()

65 
	`SëKeyBô
–
MK_FCT_KEY_ROOM
 );

68 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_KEY_COLD
 );

69 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_KEY_SODA
 );

70  
SOUND_SELECT
;

71 
	}
}

73 
U8
 
	$FCT_Cﬁd
()

75 
	`SëKeyBô
–
MK_FCT_KEY_COLD
 );

77 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_KEY_ROOM
 );

78 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_KEY_SODA
 );

80  
SOUND_SELECT
;

81 
	}
}

83 
U8
 
	$FCT_C⁄ty
()

85 
	`SëKeyBô
–
MK_FCT_KEY_CONTY
 );

87  
SOUND_SELECT
;

88 
	}
}

90 
U8
 
	$FCT_Soda
()

92 
	`SëKeyBô
–
MK_FCT_KEY_SODA
 );

94 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_KEY_ROOM
 );

95 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_KEY_COLD
 );

97  
SOUND_SELECT
;

98 
	}
}

100 
U8
 
	$FCT_U£r
()

102 
	`SëKeyBô
–
MK_FCT_KEY_USER
 );

104  
SOUND_SELECT
;

105 
	}
}

107 
U8
 
	$FCT_Back
()

109 
	`SëKeyBô
–
MK_FCT_KEY_BACK
 );

111  
SOUND_SELECT
;

112 
	}
}

114 
U8
 
	$FCT_Sëtög
()

116 
	`SëKeyBô
–
MK_FCT_KEY_SETTING
 );

118  
SOUND_SELECT
;

119 
	}
}

121 
U8
 
	$FCT_Le·
()

123 
	`SëKeyBô
–
MK_FCT_KEY_LEFT
 );

125  
SOUND_SELECT
;

126 
	}
}

128 
U8
 
	$FCT_Right
()

130 
	`SëKeyBô
–
MK_FCT_KEY_RIGHT
 );

132  
SOUND_SELECT
;

133 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\key_fct_handler.h

1 #i‚de‡
__KEY_FCT_HANDLER_H__


2 
	#__KEY_FCT_HANDLER_H__


	)

4 
	~"¥j_ty≥.h
"

5 
	~"f˘.h
"

8 
U8
 
IsVÆidF˘KeyC⁄dôi⁄
(
U16
 
mu16Key
);

10 * 
GëF˘KeyEvítLi°
();

12 
U8
 
GëF˘KeyEvítLi°Size
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\process_fct.c

1 
	~"hw.h
"

2 
	~"¥o˚ss_f˘.h
"

3 
	~"f˘.h
"

5 
	~"hÆ_adc.h
"

7 
	~"key.h
"

8 
	~"ì¥om.h
"

9 
	~"utû.h
"

10 
	~"comm.h
"

11 
	~"timî.h
"

12 
	~"di•œy.h
"

13 
	~"ãmp.h
"

15 
	~"vÆve.h
"

16 
	~"ªœy.h
"

19 
U8
 
	$IsExpúedTe°Time
()

21 if–
	`GëF˘Te°Timî
() != 0 )

23  
FALSE
;

26  
TRUE
;

27 
	}
}

30 
	$InôLﬂd
()

33 
U8
 
mu8Rë
;

36 /
	`R_UART1_St›
();

39 
	`Clo£VÆve
–
VALVE_ALL
 );

40 
	`O≥nVÆve
–
VALVE_NOS
 );

43 
	`Tu∫OffRñayAŒ
();

46 
mu8Rë
 = 
	`Te°Eïrom
();

47 if–
mu8Rë
 =
TRUE
 )

49 
	`SëF˘Te°I≈utBô
–
MK_FCT_EEPROM
 );

53 
	`CÀ¨F˘Te°I≈utBô
–
MK_FCT_EEPROM
 );

56 
	}
}

60 
	$Pro˚ssF˘LﬂdTe°
()

64 
	`Tu∫OffAŒLED
();

73 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_EEPROM
 ) =
TRUE
 )

83 if–
	`HAL_GëAdcVÆue
–
ANI_SENSOR_PHOTO
 ) < 650 )

94 if–
	`IsSëF˘Te°I≈utVÆ
–
MK_FCT_KEY_COLD
 ) =
TRUE
 )

106 if–
	`GET_ROOM_TANK_HIGH
(Ë=
HIGH
 )

111 if–
	`GET_ROOM_TANK_LOW
(Ë=
HIGH
 )

123 if–
	`GET_ROOM_TANK_OVERFLOW
(Ë=
HIGH
 )

135 if–
	`GëTemp
–
TEMP_ID_COLD_WATER
 ) >= 8.0f

136 && 
	`GëTemp
–
TEMP_ID_COLD_WATER
 ) <= 12.0f )

145 
	}
}

148 
	$Pro˚ssF˘
()

150 
U8
 
mu8Inô
 = 0;

153 if–
	`IsExpúedTe°Time
(Ë=
TRUE
 )

155 
	`Re£t
();

159 if–
mu8Inô
 == 0 )

161 
mu8Inô
 = 1;

162 
	`InôLﬂd
();

164 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\process_fct.h

1 #i‚de‡
__PROCESS_FCT_H__


2 
	#__PROCESS_FCT_H__


	)

4 
	~"¥j_ty≥.h
"

6 
Pro˚ssF˘LﬂdTe°
();

8 
Pro˚ssF˘
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap04vt_api.c

7 
	~"gp2≠04vt_≠i.h
"

8 
	~"gp2≠04vt_fúmw¨e.h
"

14 
	$gp2≠04vt_öô_∑øms
(
gp2≠04vt_£ns‹
 *
pdev
)

16 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

18 i‡(
pd©a
->
mode
 =
MODE_OFFSET_CALIBRATION
) {

19 
pd©a
->
£ns‹_°©us
 = 
NOT_CALIBRATED
;

20 
pd©a
->
off£t_u£r
 = 0;

21 
pd©a
->
off£t_0p1mm
 = 0;

22 
pd©a
->
xèlk_u£r
 = 0;

25 i‡(
pd©a
->
mode
 =
MODE_XTALK_CALIBRATION
) {

26 
pd©a
->
xèlk_u£r
 = 0;

28 
	}
}

34 
	$gp2≠04vt_öô_£ns‹
(
gp2≠04vt_£ns‹
 *
pdev
)

36 
uöt8_t
 
wd©a
;

37 
uöt8_t
 
wd©a_mu…i
[4] = {0x00, 0x00, 0x00, 0x00};

39 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

41 
	`gp2≠04vt_öô_∑øms
(
pdev
);

45 
wd©a
 = 
RAM
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, &wdata, 1);

46 
wd©a
 = 0x80; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, &wdata, 1);

47 
	`DELAY_FUNCTION
(1);

49 
wd©a
 = 0x44; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

50 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

53 
wd©a_mu…i
[0] = 
SET_CONV1
;

54 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

57 
wd©a
 = 0x40; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

58 
wd©a
 = 0x01; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

59 
wd©a_mu…i
[0] = 
SET_SPAD_SL
;

60 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

63 
wd©a_mu…i
[0] = 0;

64 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

67 
wd©a
 = 0xAC; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

68 
wd©a
 = 0x01; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

69 
wd©a_mu…i
[0] = 
SET_DIS_SPAD_AUTO
;

70 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

73 
wd©a
 = 0xF4; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

74 
wd©a
 = 0x01; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

75 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_XTALK_AMB
 & 0x00FF);

76 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_TH_XTALK_AMB
 & 0xFF00) >> 8);

77 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

80 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_MAXCOUNT_XTALK
 & 0x00FF);

81 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_MAXCOUNT_XTALK
 & 0xFF00) >> 8);

82 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

85 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_HXTALK
 & 0x00FF);

86 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_TH_HXTALK
 & 0xFF00) >> 8);

87 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

90 
wd©a
 = 0x04; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

91 
wd©a
 = 0x02; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

92 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_LOWSIG
 & 0x00FF);

93 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_TH_LOWSIG
 & 0xFF00) >> 8);

94 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

97 
wd©a
 = 0x0C; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

98 
wd©a
 = 0x02; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

99 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_LOWSN
 & 0x00FF);

100 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_TH_LOWSN
 & 0xFF00) >> 8);

101 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

104 
wd©a
 = 0x14; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

105 
wd©a
 = 0x02; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

106 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_HSIG
 & 0x0000FF);

107 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_TH_HSIG
 & 0x00FF00) >> 8);

108 
wd©a_mu…i
[2] = (
uöt8_t
)((
SET_TH_HSIG
 & 0xFF0000) >> 16);

109 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

112 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_CONFI_LV
);

113 
wd©a_mu…i
[1] = 0;

114 
wd©a_mu…i
[2] = 0;

115 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

118 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_PARAM_CONFI1
 & 0x00FF);

119 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_PARAM_CONFI1
 & 0xFF00) >> 8);

120 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

123 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_PARAM_CONFI2
 & 0x00FF);

124 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_PARAM_CONFI2
 & 0xFF00) >> 8);

125 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

128 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_SQ_3SIGMA
 & 0x00FF);

129 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_TH_SQ_3SIGMA
 & 0xFF00) >> 8);

130 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

133 
wd©a_mu…i
[0] = 
SET_EN_RAWRANGE
;

134 
wd©a_mu…i
[1] = 0;

135 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

138 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_PROX
 & 0x00FF);

139 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_TH_PROX
 & 0xFF00) >> 8);

140 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

143 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_RANGE_L
 & 0x00FF);

144 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_TH_RANGE_L
 & 0xFF00) >> 8);

145 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

148 
wd©a_mu…i
[0] = (
uöt8_t
)(
SET_TH_RANGE_H
 & 0x00FF);

149 
wd©a_mu…i
[1] = (
uöt8_t
)((
SET_TH_RANGE_H
 & 0xFF00) >> 8);

150 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

153 
wd©a_mu…i
[0] = 
SET_TH_HYS
;

154 
wd©a_mu…i
[1] = 0;

155 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

158 
wd©a
 = 0x1C; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

159 
wd©a
 = 0x03; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

161 i‡(
pd©a
->
mode
 =
MODE_OFFSET_CALIBRATION
) {

162 
wd©a_mu…i
[0] = 
OFFSET_CALIBRAION_DISTANCE_MM
;

164 
wd©a_mu…i
[0] = 0x00;

166 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

169 
wd©a
 = 0xA4; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

170 
wd©a
 = 0x02; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

172 i‡(
pd©a
->
mode
 =
MODE_XTALK_CALIBRATION
) {

173 
wd©a_mu…i
[0] = 0x01;

175 
wd©a_mu…i
[0] = 0x00;

177 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a_mu…i
, 4);

179 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

180 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

181 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, &wdata, 1);

182 
wd©a
 = 
NO_ACCESS
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, &wdata, 1);

183 
	`DELAY_FUNCTION
(2);

186 
	`gp2≠04vt_£t_off£t_d©a
(
pdev
);

187 
	`gp2≠04vt_£t_xèlk_d©a
(
pdev
);

190 
wd©a
 = 
SET_INTERRUPT
;

191 
	`gp2≠_i2c_wrôe
(
pdev
, 0x01, &
wd©a
, 1);

192 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x02, &wdata, 1);

193 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x03, &wdata, 1);

194 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x04, &wdata, 1);

195 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x05, &wdata, 1);

196 
wd©a
 = 
SET_INTERVAL
 & 0xFF;

197 
	`gp2≠_i2c_wrôe
(
pdev
, 0x06, &
wd©a
, 1);

198 
wd©a
 = (((
uöt16_t
)
SET_INTERVAL
 & 0xFF00) >> 8);

199 
	`gp2≠_i2c_wrôe
(
pdev
, 0x07, &
wd©a
, 1);

200 
wd©a
 = 0x10; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x08, &wdata, 1);

201 
wd©a
 = 0x68; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x09, &wdata, 1);

202 
wd©a
 = 0x03; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x0A, &wdata, 1);

203 
wd©a
 = 0xBE; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x0B, &wdata, 1);

204 
wd©a
 = 0x04; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x0C, &wdata, 1);

205 
wd©a
 = 0x08; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x0D, &wdata, 1);

206 
wd©a
 = 
SET_VCSEL
;

207 
	`gp2≠_i2c_wrôe
(
pdev
, 0x0E, &
wd©a
, 1);

208 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x0F, &wdata, 1);

209 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x10, &wdata, 1);

210 
wd©a
 = 0x70; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x11, &wdata, 1);

211 
wd©a
 = 
SET_VCSEL
;

212 
	`gp2≠_i2c_wrôe
(
pdev
, 0x12, &
wd©a
, 1);

213 
wd©a
 = 0x05; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x13, &wdata, 1);

214 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x14, &wdata, 1);

215 
wd©a
 = 0x02; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x15, &wdata, 1);

216 
wd©a
 = 0x01; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x16, &wdata, 1);

217 
wd©a
 = 0x11; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x17, &wdata, 1);

218 
wd©a
 = 0xBF; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x18, &wdata, 1);

219 
wd©a
 = 0x01; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x19, &wdata, 1);

220 
wd©a
 = 0x70; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1A, &wdata, 1);

221 
wd©a
 = 0x01; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1B, &wdata, 1);

222 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1C, &wdata, 1);

223 
wd©a
 = 0x80; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1D, &wdata, 1);

224 
wd©a
 = 0x07; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1E, &wdata, 1);

226 #ifde‡
__KERNEL__


227 
wd©a
 = 0x04; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x46, &wdata, 1);

230 
	`gp2≠04vt_£t_vs1
(
pdev
);

231 
	}
}

233 
	$gp2≠04vt_£t_vs1
(
gp2≠04vt_£ns‹
 *
pdev
)

235 
uöt8_t
 
rd©a
;

236 
uöt8_t
 
wd©a
;

237 
uöt8_t
 
mode
;

238 
uöt8_t
 
i
;

239 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

241 
mode
 = 
pd©a
->mode;

243 
i
 = 0; i < 3; i++) {

244 
	`gp2≠04vt_íabÀ_£ns‹
(
pdev
, 
SENSOR_ON
);

246 
	`DELAY_FUNCTION
(10);

248 
	`gp2≠04vt_íabÀ_£ns‹
(
pdev
, 
SENSOR_OFF
);

250 
	`DELAY_FUNCTION
(2);

252 
	`gp2≠04vt_ªad_öã∫Æ_ˇlibøti⁄
(
pdev
);

254 i‡(
pd©a
->
vs1
 != 0) {

259 
	`gp2≠_i2c_ªad
(
pdev
, 0x0C, &
rd©a
, (rdata));

260 
wd©a
 = (0x01 | (0xFE & 
rd©a
));

261 
	`gp2≠_i2c_wrôe
(
pdev
, 0x0C, &
wd©a
, 1);

262 
wd©a
 = (
uöt8_t
)
pd©a
->
vs1
;

263 
	`gp2≠_i2c_wrôe
(
pdev
, 0x10, &
wd©a
, 1);

265 
pd©a
->
mode
 = mode;

266 
	}
}

274 
	$gp2≠04vt_˛ór_ˇlibøti⁄_d©a
(
gp2≠04vt_£ns‹
 *
pdev
)

276 
pdev
->
d©a
.
£ns‹_°©us
 = 0;

277 
pdev
->
d©a
.
off£t_u£r
 = 0;

278 
pdev
->
d©a
.
off£t_0p1mm
 = 0;

279 
pdev
->
d©a
.
xèlk_u£r
 = 0;

280 
	`gp2≠04vt_öô_£ns‹
(
pdev
);

281 
	}
}

289 
	$gp2≠04vt_so·w¨e_ª£t
(
gp2≠04vt_£ns‹
 *
pdev
)

291 
uöt8_t
 
wd©a
;

293 
wd©a
 = 0x01;

294 
	`gp2≠_i2c_wrôe
(
pdev
, 0x01, &
wd©a
, 1);

295 
	}
}

303 
	$gp2≠04vt_íabÀ_£ns‹
(
gp2≠04vt_£ns‹
 *
pdev
, 
uöt8_t
 
íabÀ
)

305 
uöt8_t
 
wd©a
;

307 i‡(
íabÀ
) {

308 
wd©a
(
OP_RUN
 | 
OP_CONTINUOUS
);

310 
wd©a
(
OP_SHUTDOWN
);

313 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, &
wd©a
, 1);

314 
	}
}

316 
	$gp2≠04vt_°¨t_øngög
(
gp2≠04vt_£ns‹
 *
pdev
)

318 
uöt8_t
 
wd©a
;

319 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

321 
pd©a
->
mode
 = 
MODE_RANGING
;

327 
wd©a
 = 0x02;

328 
	`gp2≠_i2c_wrôe
(
pdev
, 0x28, &
wd©a
, 1);

330 
	`gp2≠04vt_£t_vs1
(
pdev
);

332 
	`gp2≠04vt_íabÀ_£ns‹
(
pdev
, 
SENSOR_ON
);

333 
	}
}

335 
	$gp2≠04vt_°›_øngög
(
gp2≠04vt_£ns‹
 *
pdev
)

337 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

339 
pd©a
->
mode
 = 
MODE_SENSOR_OFF
;

341 
	`gp2≠04vt_íabÀ_£ns‹
(
pdev
, 
SENSOR_OFF
);

343 
	`gp2≠04vt_˛ór_Êag
(
pdev
);

345 
	`DELAY_FUNCTION
(2);

346 
	}
}

353 
	$gp2≠04vt_ªad_ønge_d©a
(
gp2≠04vt_£ns‹
 *
pdev
)

355 
uöt8_t
 
rd©a
[2];

356 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

358 
	`gp2≠_i2c_ªad
(
pdev
, 0x29, 
rd©a
, (rdata));

360 
pd©a
->
ønge
 = (
öt16_t
)(((
uöt16_t
)
rd©a
[1] << 8) |Ñdata[0]);

361 
	}
}

368 
	$gp2≠04vt_ªad_°©us_d©a
(
gp2≠04vt_£ns‹
 *
pdev
)

370 
uöt8_t
 
rd©a0
;

371 
uöt8_t
 
rd©a1
[2];

372 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

374 
	`gp2≠_i2c_ªad
(
pdev
, 0x28, &
rd©a0
, (rdata0));

375 
	`gp2≠_i2c_ªad
(
pdev
, 0x2B, 
rd©a1
, (rdata1));

377 
pd©a
->
öt_°©us
 = 
rd©a0
;

378 
pd©a
->
ønge_°©us
 = (((
uöt16_t
)
rd©a1
[1] & 0xF0) << 8) |Ñdata1[0];

379 
pd©a
->
c⁄fidí˚
 = 
rd©a1
[1] & 0x07;

380 
	}
}

382 
	$gp2≠04vt_ªad_ãm≥øtuª
(
gp2≠04vt_£ns‹
 *
pdev
)

384 
uöt8_t
 
rd©a
[2];

385 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

387 
	`gp2≠_i2c_ªad
(
pdev
, 0x3A, 
rd©a
, (rdata));

389 
pd©a
->
ãm≥øtuª
 = 
rd©a
[0];

390 
pd©a
->
ãmp_dëe˘
 = 
rd©a
[1];

391 
	}
}

393 
	$gp2≠04vt_ªad_sys_˛ock
(
gp2≠04vt_£ns‹
 *
pdev
)

395 
uöt8_t
 
rd©a
[4];

396 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

398 
	`gp2≠_i2c_ªad
(
pdev
, 0x3C, 
rd©a
, (rdata));

400 
pd©a
->
sys_˛ock
 = ((
uöt32_t
)
rd©a
[3] << 24) | ((uint32_t)rdata[2] << 16) | ((uint32_t)rdata[1] << 8) |Ñdata[0];

401 
	}
}

403 
uöt16_t
 
	$gp2≠04vt_ªad_checksum
(
gp2≠04vt_£ns‹
 *
pdev
)

405 
uöt8_t
 
rd©a
[2];

407 
	`gp2≠_i2c_ªad
(
pdev
, 0x24, 
rd©a
, (rdata));

409  ((
uöt16_t
)
rd©a
[1] << 8) |Ñdata[0];

410 
	}
}

412 
uöt8_t
 
	$gp2≠04vt_gë_fw_vîsi⁄
(
gp2≠04vt_£ns‹
 *
pdev
)

414 
uöt8_t
 
wd©a
;

415 
uöt8_t
 
rd©a
;

416 
uöt8_t
 
fw_vîsi⁄
;

418 
wd©a
(
OP_RUN
 | 
OP_CONTINUOUS
);

419 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, &
wd©a
, 1);

420 
	`DELAY_FUNCTION
(1);

422 
	`gp2≠_i2c_ªad
(
pdev
, 0x40, &
rd©a
, (rdata));

423 
fw_vîsi⁄
 = 
rd©a
;

425 
wd©a
(
OP_SHUTDOWN
);

426 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, &
wd©a
, 1);

427 
	`DELAY_FUNCTION
(2);

429  
fw_vîsi⁄
;

430 
	}
}

432 
uöt8_t
 
	$gp2≠04vt_gë_devi˚_id
(
gp2≠04vt_£ns‹
 *
pdev
)

434 
uöt8_t
 
rd©a
;

435 
uöt8_t
 
devi˚_id
;

437 
	`gp2≠_i2c_ªad
(
pdev
, 0x44, &
rd©a
, (rdata));

439 
devi˚_id
 = 
rd©a
;

441  
devi˚_id
;

442 
	}
}

449 
	$gp2≠04vt_gë_ønge_d©a
(
gp2≠04vt_£ns‹
 *
pdev
)

451 
uöt8_t
 
rd©a
[7];

452 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

454 
	`gp2≠_i2c_ªad
(
pdev
, 0x28, 
rd©a
, (rdata));

456 
pd©a
->
öt_°©us
 = 
rd©a
[0];

457 
pd©a
->
ønge
 = (
öt16_t
)(((
uöt16_t
)
rd©a
[2] << 8) |Ñdata[1]);

458 
pd©a
->
ønge_°©us
 = (((
uöt16_t
)
rd©a
[4] & 0xF8) << 8) |Ñdata[3];

459 
pd©a
->
c⁄fidí˚
 = 
rd©a
[4] & 0x07;

460 
pd©a
->
xèlk
 = ((
uöt16_t
)
rd©a
[6] << 8) |Ñdata[5];

461 
	}
}

463 
	$gp2≠04vt_gë_ønge_d©a2
(
gp2≠04vt_£ns‹
 *
pdev
)

465 
uöt8_t
 
rd©a
[6];

466 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

468 
	`gp2≠_i2c_ªad
(
pdev
, 0x29, 
rd©a
, (rdata));

470 
pd©a
->
ønge
 = (
öt16_t
)(((
uöt16_t
)
rd©a
[1] << 8) |Ñdata[0]);

471 
pd©a
->
ønge_°©us
 = (((
uöt16_t
)
rd©a
[3] & 0xF0) << 8) |Ñdata[2];

472 
pd©a
->
c⁄fidí˚
 = 
rd©a
[3] & 0x07;

473 
pd©a
->
xèlk
 = ((
uöt16_t
)
rd©a
[5] << 8) |Ñdata[4];

474 
	}
}

481 
	$gp2≠04vt_gë_sig«l_d©a
(
gp2≠04vt_£ns‹
 *
pdev
)

483 
uöt8_t
 
rd©a
[10];

484 
öt32_t
 
sig«l
;

485 
öt32_t
 
sig«l_ªf
;

486 
öt32_t
 
amb
;

487 
öt32_t
 
amb_ªf
;

488 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

490 
	`gp2≠_i2c_ªad
(
pdev
, 0x2F, 
rd©a
, (rdata));

492 
sig«l
 = (
öt32_t
)(((
uöt32_t
)
rd©a
[2] << 16) | ((uint32_t)rdata[1] << 8) |Ñdata[0]);

493 i‡(
sig«l
 & 0x800000) {

494 
sig«l
 = signal - 0x1000000;

496 
sig«l_ªf
 = (
öt32_t
)(((
uöt32_t
)
rd©a
[5] << 16) | ((uint32_t)rdata[4] << 8) |Ñdata[3]);

497 i‡(
sig«l_ªf
 & 0x800000) {

498 
sig«l_ªf
 = signal_ref - 0x1000000;

500 
amb
 = (
öt32_t
)(((
uöt32_t
)
rd©a
[7] << 8) |Ñdata[6]);

501 i‡(
amb
 & 0x8000) {

502 
amb
 =ámb - 0x10000;

504 
amb_ªf
 = (
öt32_t
)(((
uöt32_t
)
rd©a
[9] << 8) |Ñdata[8]);

505 i‡(
amb_ªf
 & 0x8000) {

506 
amb_ªf
 =ámb_ref - 0x10000;

508 
pd©a
->
sig«l
 = signal;

509 
pd©a
->
sig«l_ªf
 = signal_ref;

510 
pd©a
->
amb
 =ámb;

511 
pd©a
->
amb_ªf
 =ámb_ref;

512 
	}
}

519 
uöt8_t
 
	$gp2≠04vt_ªad_Êag
(
gp2≠04vt_£ns‹
 *
pdev
)

521 
uöt8_t
 
rd©a
;

523 
	`gp2≠_i2c_ªad
(
pdev
, 0x28, &
rd©a
, (rdata));

525  (
rd©a
 & 0x10) >> 4;

526 
	}
}

533 
	$gp2≠04vt_˛ór_Êag
(
gp2≠04vt_£ns‹
 *
pdev
)

535 
uöt8_t
 
wd©a
;

537 
wd©a
 = 0xE7;

538 
	`gp2≠_i2c_wrôe
(
pdev
, 0x28, &
wd©a
, 1);

539 
	}
}

541 
	$gp2≠04vt_≥rf‹m_off£t_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *
pdev
)

543 
uöt8_t
 
wd©a
;

544 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

546 
pd©a
->
mode
 = 
MODE_OFFSET_CALIBRATION
;

548 
	`gp2≠04vt_öô_£ns‹
(
pdev
);

551 
wd©a
 = 0x02;

552 
	`gp2≠_i2c_wrôe
(
pdev
, 0x28, &
wd©a
, 1);

554 
wd©a
 = 
PIN_MEASUREMENT_END
 | 
INTTYPE_LEVEL
;

555 
	`gp2≠_i2c_wrôe
(
pdev
, 0x01, &
wd©a
, 1);

557 
	`gp2≠04vt_íabÀ_£ns‹
(
pdev
, 
SENSOR_ON
);

558 
	}
}

560 
	$gp2≠04vt_≥rf‹m_xèlk_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *
pdev
)

562 
uöt8_t
 
wd©a
;

563 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

565 
pd©a
->
mode
 = 
MODE_XTALK_CALIBRATION
;

567 
	`gp2≠04vt_öô_£ns‹
(
pdev
);

570 
wd©a
 = 0x02;

571 
	`gp2≠_i2c_wrôe
(
pdev
, 0x28, &
wd©a
, 1);

573 
wd©a
 = 
PIN_MEASUREMENT_END
 | 
INTTYPE_LEVEL
;

574 
	`gp2≠_i2c_wrôe
(
pdev
, 0x01, &
wd©a
, 1);

576 
	`gp2≠04vt_íabÀ_£ns‹
(
pdev
, 
SENSOR_ON
);

577 
	}
}

579 
	$gp2≠04vt_gë_off£t_d©a
(
gp2≠04vt_£ns‹
 *
pdev
)

581 
uöt8_t
 
wd©a
;

582 
uöt8_t
 
rd©a
[4];

583 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

585 
	`gp2≠04vt_°›_øngög
(
pdev
);

586 
	`gp2≠04vt_˛ór_Êag
(
pdev
);

587 
wd©a
 = 
SET_INTERRUPT
;

588 
	`gp2≠_i2c_wrôe
(
pdev
, 0x01, &
wd©a
, 1);

590 
pd©a
->
£ns‹_°©us
 = 0x01;

592 
wd©a
 = 
RAM
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, &wdata, 1);

593 
wd©a
 = 0x80; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, &wdata, 1);

595 
wd©a
 = 0x40; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

596 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

597 
	`DELAY_FUNCTION
(1);

599 
	`gp2≠_i2c_ªad
(
pdev
, 0x23, 
rd©a
, (rdata));

601 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, &wdata, 1);

602 
wd©a
 = 
NO_ACCESS
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, &wdata, 1);

603 
	`DELAY_FUNCTION
(2);

605 
pd©a
->
off£t_u£r
 = (
öt32_t
)(((
uöt32_t
)
rd©a
[3] << 24) | ((uint32_t)rdata[2] << 16) | ((uint32_t)rdata[1] << 8) |Ñdata[0]);

606 
pd©a
->
off£t_0p1mm
 =Öd©a->
off£t_u£r
 * 15 / 10;

607 
	}
}

609 
	$gp2≠04vt_gë_xèlk_d©a
(
gp2≠04vt_£ns‹
 *
pdev
)

611 
uöt8_t
 
wd©a
;

612 
uöt8_t
 
rd©a
[4];

613 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

615 
	`gp2≠04vt_°›_øngög
(
pdev
);

616 
	`gp2≠04vt_˛ór_Êag
(
pdev
);

617 
wd©a
 = 
SET_INTERRUPT
;

618 
	`gp2≠_i2c_wrôe
(
pdev
, 0x01, &
wd©a
, 1);

620 
pd©a
->
£ns‹_°©us
 = 0x03;

622 
wd©a
 = 
RAM
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, &wdata, 1);

623 
wd©a
 = 0x80; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, &wdata, 1);

625 
wd©a
 = 0x38; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, &wdata, 1);

626 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, &wdata, 1);

627 
	`DELAY_FUNCTION
(1);

629 
	`gp2≠_i2c_ªad
(
pdev
, 0x23, 
rd©a
, (rdata));

631 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, &wdata, 1);

632 
wd©a
 = 
NO_ACCESS
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, &wdata, 1);

633 
	`DELAY_FUNCTION
(2);

635 
pd©a
->
xèlk_u£r
 = ((
uöt32_t
)
rd©a
[3] << 24) | ((uint32_t)rdata[2] << 16) | ((uint32_t)rdata[1] << 8) |Ñdata[0];

636 
	}
}

638 
	$gp2≠04vt_£t_off£t_d©a
(
gp2≠04vt_£ns‹
 *
pdev
)

640 
uöt8_t
 
wd©a
[4] = {0, 0, 0, 0};

641 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

643 
wd©a
[0] = 
RAM
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

644 
wd©a
[0] = 0x80; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

645 
wd©a
[0] = 0x40; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, wdata, 1);

646 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, wdata, 1);

647 
	`DELAY_FUNCTION
(1);

649 
wd©a
[0] = (
uöt8_t
)–
pd©a
->
off£t_u£r
 & 0x000000FF);

650 
wd©a
[1] = (
uöt8_t
)((
pd©a
->
off£t_u£r
 & 0x0000FF00) >> 8);

651 
wd©a
[2] = (
uöt8_t
)((
pd©a
->
off£t_u£r
 & 0x00FF0000) >> 16);

652 
wd©a
[3] = (
uöt8_t
)((
pd©a
->
off£t_u£r
 & 0xFF000000) >> 24);

654 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a
, 4);

656 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

657 
wd©a
[0] = 
NO_ACCESS
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

658 
	`DELAY_FUNCTION
(2);

659 
	}
}

661 
	$gp2≠04vt_£t_xèlk_d©a
(
gp2≠04vt_£ns‹
 *
pdev
)

663 
uöt8_t
 
wd©a
[4] = {0, 0, 0, 0};

664 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

666 
wd©a
[0] = 
RAM
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

667 
wd©a
[0] = 0x80; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

668 
wd©a
[0] = 0x38; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, wdata, 1);

669 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, wdata, 1);

670 
	`DELAY_FUNCTION
(1);

672 
wd©a
[0] = (
uöt8_t
)–
pd©a
->
xèlk_u£r
 & 0x000000FF);

673 
wd©a
[1] = (
uöt8_t
)((
pd©a
->
xèlk_u£r
 & 0x0000FF00) >> 8);

674 
wd©a
[2] = (
uöt8_t
)((
pd©a
->
xèlk_u£r
 & 0x00FF0000) >> 16);

675 
wd©a
[3] = (
uöt8_t
)((
pd©a
->
xèlk_u£r
 & 0xFF000000) >> 24);

677 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a
, 4);

679 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

680 
wd©a
[0] = 
NO_ACCESS
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

681 
	`DELAY_FUNCTION
(2);

682 
	}
}

684 
	$gp2≠04vt_ªad_öã∫Æ_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *
pdev
)

686 
uöt8_t
 
rd©a
;

687 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

689 
	`gp2≠_i2c_ªad
(
pdev
, 0x42, &
rd©a
, (rdata));

691 
pd©a
->
vs1
 = 
rd©a
;

692 
	}
}

700 
	$gp2≠04vt_£t_mu…ùÀ_£ns‹s
(
gp2≠04vt_£ns‹
 *
pdev
, 
uöt8_t
 
dy«mic_addr
)

702 
uöt8_t
 
wd©a
;

704 
pdev
->
¶ave_addr
 = 0x00;

705 
wd©a
 = 0x40; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x04, &wdata, 1);

706 
wd©a
 = 
dy«mic_addr
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x05, &wdata, 1);

707 
pdev
->
¶ave_addr
 = 
dy«mic_addr
;

708 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x04, &wdata, 1);

710 
	`gp2≠04vt_wrôe_fúmw¨e
(
pdev
);

712 
pdev
->
d©a
.
£ns‹_°©us
 = 
NOT_CALIBRATED
;

713 
pdev
->
d©a
.
off£t_u£r
 = 0;

714 
pdev
->
d©a
.
xèlk_u£r
 = 0;

716 
pdev
->
d©a
.
mode
 = 
MODE_SENSOR_OFF
;

717 
	`gp2≠04vt_öô_£ns‹
(
pdev
);

719 
	}
}

727 
	$gp2≠04vt_£t_mu…ùÀ_£ns‹s_˚
(
gp2≠04vt_£ns‹
 *
pdev
, 
uöt8_t
 
mode
)

729 
uöt8_t
 
wd©a
;

730 
uöt8_t
 
dy«mic_addr
;

732 
dy«mic_addr
 = 
pdev
->
¶ave_addr
;

733 
pdev
->
¶ave_addr
 = 0x29;

734 i‡(
mode
) {

735 
wd©a
 = 0x41; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x04, &wdata, 1);

737 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x04, &wdata, 1);

739 
pdev
->
¶ave_addr
 = 
dy«mic_addr
;

740 
	}
}

748 
	$gp2≠04vt_£t_mu…ùÀ_£ns‹s_dc
(
gp2≠04vt_£ns‹
 *
pdev
, 
uöt8_t
 
mode
)

750 
uöt8_t
 
wd©a
;

751 
uöt8_t
 
dy«mic_addr
;

753 
dy«mic_addr
 = 
pdev
->
¶ave_addr
;

754 
pdev
->
¶ave_addr
 = 0x29;

755 i‡(
mode
) {

756 
wd©a
 = 0x82; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x04, &wdata, 1);

758 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x04, &wdata, 1);

760 
pdev
->
¶ave_addr
 = 
dy«mic_addr
;

761 
	}
}

769 
	$gp2≠04vt_£t_gpio1
(
gp2≠04vt_£ns‹
 *
pdev
, 
uöt8_t
 
ouçut
)

771 
uöt8_t
 
wd©a
;

772 i‡(
ouçut
) {

773 
wd©a
 = 0x92; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x04, &wdata, 1);

775 
wd©a
 = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x04, &wdata, 1);

777 
	}
}

785 
	$gp2≠04vt_£t_dy«mic_addªss
(
gp2≠04vt_£ns‹
 *
pdev
, 
uöt8_t
 
dy«mic_addr
)

787 
uöt8_t
 
wd©a
;

789 
wd©a
 = 
dy«mic_addr
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x05, &wdata, 1);

790 
pdev
->
¶ave_addr
 = 
dy«mic_addr
;

791 
	}
}

793 
	$gp2≠04vt_£t_Êo‹_di°™˚
(
gp2≠04vt_£ns‹
 *
pdev
)

795 
uöt8_t
 
wd©a
[4] = {0, 0, 0, 0};

796 
uöt32_t
 
Êo‹_di°™˚
;

797 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

799 
Êo‹_di°™˚
 = 
pd©a
->floor_distance;

801 
wd©a
[0] = 
RAM
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

802 
wd©a
[0] = 0x80; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

803 
wd©a
[0] = 0x44; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, wdata, 1);

804 
wd©a
[0] = 0x01; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, wdata, 1);

805 
	`DELAY_FUNCTION
(1);

807 
wd©a
[0] = (
uöt8_t
)–
Êo‹_di°™˚
 & 0x000000FF);

808 
wd©a
[1] = (
uöt8_t
)((
Êo‹_di°™˚
 & 0x0000FF00) >> 8);

809 
wd©a
[2] = (
uöt8_t
)((
Êo‹_di°™˚
 & 0x00FF0000) >> 16);

810 
wd©a
[3] = (
uöt8_t
)((
Êo‹_di°™˚
 & 0xFF000000) >> 24);

812 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a
, 4);

814 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

815 
wd©a
[0] = 
NO_ACCESS
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

816 
	`DELAY_FUNCTION
(2);

817 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap04vt_api.h

5 #i‚de‡
__GP2AP04VT_API_H__


6 
	#__GP2AP04VT_API_H__


	)

8 #ifde‡
__KERNEL__


9 
	~<löux/ty≥s.h
>

10 
	~<löux/dñay.h
>

11 
	~<löux/of_gpio.h
>

12 
	~<löux/miscdevi˚.h
>

15 #i‚de‡
__KERNEL__


16 
	~"¥j_ty≥.h
"

19 
	#API_REVISION
 "gp2≠04vt_≠i_v100"

	)

22 
	#RL78


	)

24 #ifde‡
ARDUINO_UNO


25 
	#DELAY_FUNCTION
(
vÆue
Ë
	`dñay
(vÆue)

	)

28 #ifde‡
STM32


29 
HAL_Dñay
(
uöt32_t
);

30 
	#DELAY_FUNCTION
(
≥riod
Ë
	`HAL_Dñay
’îiod)

	)

33 #ifde‡
RL78


34 
	~"utû.h
"

35 
Dñay_MS
(
U16
 
ms
);

36 
	#DELAY_FUNCTION
(
≥riod
Ë
	`Dñay_MS
’îiod)

	)

39 #ifde‡
__KERNEL__


40 
	#DELAY_FUNCTION
(
≥riod
Ë
	`mdñay
’îiod)

	)

43 
	#DEVICE_ID
 0x3F

	)

45 
	#MODE_SENSOR_OFF
 0

	)

46 
	#MODE_RANGING
 1

	)

47 
	#MODE_OFFSET_CALIBRATION
 3

	)

48 
	#MODE_XTALK_CALIBRATION
 4

	)

50 
	#NO_ACCESS
 0x00

	)

51 
	#ROM
 0x01

	)

52 
	#RAM
 0x02

	)

54 
	#INIT_NO_ERROR
 0x00

	)

55 
	#INIT_ERROR
 0x01

	)

57 
	#NOT_CALIBRATED
 0x00

	)

58 
	#USER_OFFSET_CALIBRATION_DONE
 0x01

	)

59 
	#USER_XTALK_CALIBRATION_DONE
 0x02

	)

60 
	#USER_CALIBRATION_DONE
 0x03

	)

61 
	#USER_OFFSET_CALIBRATION_FAILED
 0xFF

	)

62 
	#USER_XTALK_CALIBRATION_FAILED
 0xFE

	)

64 
	#OP_SHUTDOWN
 0x00

	)

65 
	#OP_RUN
 0x80

	)

66 
	#OP_ONCE
 0x00

	)

67 
	#OP_CONTINUOUS
 0x40

	)

69 
	#SENSOR_ON
 1

	)

70 
	#SENSOR_OFF
 0

	)

72 
	#DYNAMIC_ADDRESS_SETTING_MODE
 1

	)

73 
	#NORMAL_MODE
 0

	)

77 
	#INT_DISENABLE
 0x00

	)

78 
	#INT_ENABLE
 0x20

	)

79 
	#PIN_PROX
 0x00

	)

80 
	#PIN_MEASUREMENT_END
 0x04

	)

81 
	#PIN_ERROR
 0x08

	)

82 
	#PIN_WINDOW
 0x0C

	)

83 
	#PIN_NO_ERROR_MEASUREMENT_END
 0x10

	)

84 
	#INTTYPE_LEVEL
 0x00

	)

85 
	#INTTYPE_PULSE
 0x02

	)

86 
	#SET_CONV1_100HZ
 13

	)

87 
	#SET_CONV1_60HZ
 26

	)

88 
	#SET_CONV1_60HZ_LP
 13

	)

89 
	#SET_CONV1_30HZ
 57

	)

90 
	#SET_CONV1_30HZ_LP
 13

	)

91 
	#SET_CONV2_100HZ
 0

	)

92 
	#SET_CONV2_60HZ
 0

	)

93 
	#SET_CONV2_60HZ_LP
 0

	)

94 
	#SET_CONV2_30HZ
 0

	)

95 
	#SET_CONV2_30HZ_LP
 0

	)

96 
	#SET_INTERVAL_100HZ
 0

	)

97 
	#SET_INTERVAL_60HZ
 6

	)

98 
	#SET_INTERVAL_60HZ_LP
 19

	)

99 
	#SET_INTERVAL_30HZ
 14

	)

100 
	#SET_INTERVAL_30HZ_LP
 58

	)

101 
	#VCSEL_30MA
 0x0A

	)

102 
	#VCSEL_45MA
 0x0F

	)

105 
	#SET_VCSEL
 
VCSEL_45MA


	)

106 
	#SET_CONV1
 
SET_CONV1_100HZ


	)

107 
	#SET_CONV2
 
SET_CONV2_100HZ


	)

108 
	#SET_INTERVAL
 
SET_INTERVAL_100HZ


	)

109 
	#SET_INTERRUPT
 
PIN_MEASUREMENT_END
 | 
INT_ENABLE
 | 
INTTYPE_LEVEL


	)

111 
	#SET_TH_PROX
 30

112 
	#SET_TH_RANGE_L
 20

113 
	#SET_TH_RANGE_H
 100

114 
	#SET_TH_HYS
 5

115 

	)

116 
	#OFFSET_CALIBRAION_DISTANCE_MM
 230

118 

	)

119 
	#SET_SPAD_SL
 0x07

	)

120 
	#SET_DIS_SPAD_AUTO
 0x01

	)

121 
	#SET_TH_XTALK_AMB
 500

	)

122 
	#SET_MAXCOUNT_XTALK
 300

	)

123 
	#SET_TH_HXTALK
 250

	)

124 
	#SET_TH_LOWSIG
 3500

	)

125 
	#SET_TH_LOWSN
 40

	)

126 
	#SET_TH_HAMB
 4095

	)

127 
	#SET_TH_HSIG
 (
uöt32_t
)0xFFFFFF

	)

128 
	#SET_TH_CONFI_LV
 0

	)

129 
	#SET_PARAM_CONFI1
 400

	)

130 
	#SET_PARAM_CONFI2
 1280

	)

131 
	#SET_TH_SQ_3SIGMA
 25

	)

132 
	#SET_EN_RAWRANGE
 0

	)

137 
	sgp2≠04vt_d©a
 {

138 
uöt8_t
 
	mmode
;

139 
uöt8_t
 
	m£ns‹_°©us
;

142 
uöt8_t
 
	möt_°©us
;

143 
öt16_t
 
	mønge
;

144 
uöt16_t
 
	mønge_°©us
;

145 
uöt8_t
 
	mc⁄fidí˚
;

146 
uöt16_t
 
	mxèlk
;

149 
öt32_t
 
	msig«l
;

150 
öt32_t
 
	mamb
;

151 
öt32_t
 
	msig«l_ªf
;

152 
öt32_t
 
	mamb_ªf
;

153 
uöt8_t
 
	mãm≥øtuª
;

154 
uöt8_t
 
	mãmp_dëe˘
;

155 
uöt32_t
 
	msys_˛ock
;

156 
uöt32_t
 
	mvs1
;

159 
öt32_t
 
	moff£t_0p1mm
;

160 
öt32_t
 
	moff£t_u£r
;

161 
uöt32_t
 
	mxèlk_u£r
;

164 
uöt32_t
 
	mÊo‹_di°™˚
;

167 
	sgp2≠04vt_£ns‹
 {

168 
uöt8_t
 
	m¶ave_addr
;

170 #ifde‡
__KERNEL__


171 
muãx
 
	mmuãx
;

172 
i2c_˛õ¡
 *
	m˛õ¡
;

173 
miscdevi˚
 
	mgp2≠04vt_misc
;

174 
öput_dev
 *
	mønge_öput_dev
;

175 
dñayed_w‹k
 
	mw‹k_queue_timî
;

176 
w‹k_°ru˘
 
	mw‹k_queue_ext_öt
;

177 
uöt8_t
 
	mønge_íabÀd
;

178 
	mønge_dñay
;

179 
	mønge_úq
;

181 
	mgp2≠04vt_›íed
;

183 
of_gpio_Êags
 
	múq_gpio_Êags
;

187 
gp2≠04vt_d©a
 
	md©a
;

190 #ifde‡
__KERNEL__


191 
gp2≠_i2c_wrôe
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
, uint8_t *, uint8_t);

192 
gp2≠_i2c_ªad
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
, uint8_t *, uint8_t);

195 #i‚de‡
__KERNEL__


196 
gp2≠_i2c_wrôe
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
, uint8_t *, uint8_t);

197 
gp2≠_i2c_ªad
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
, uint8_t *, uint8_t);

200 
gp2≠04vt_öô_∑ømas
(
gp2≠04vt_£ns‹
 *);

201 
gp2≠04vt_öô_£ns‹
(
gp2≠04vt_£ns‹
 *);

202 
gp2≠04vt_˛ór_ˇlibøti⁄_d©a
(
gp2≠04vt_£ns‹
 *);

203 
gp2≠04vt_£t_vs1
(
gp2≠04vt_£ns‹
 *);

204 
gp2≠04vt_so·w¨e_ª£t
(
gp2≠04vt_£ns‹
 *);

205 
gp2≠04vt_íabÀ_£ns‹
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
);

206 
gp2≠04vt_°¨t_øngög
(
gp2≠04vt_£ns‹
 *);

207 
gp2≠04vt_°›_øngög
(
gp2≠04vt_£ns‹
 *);

208 
gp2≠04vt_ªad_ønge_d©a
(
gp2≠04vt_£ns‹
 *);

209 
gp2≠04vt_ªad_°©us_d©a
(
gp2≠04vt_£ns‹
 *);

210 
gp2≠04vt_ªad_ãm≥øtuª
(
gp2≠04vt_£ns‹
 *);

211 
gp2≠04vt_ªad_sys_˛ock
(
gp2≠04vt_£ns‹
 *);

212 
uöt16_t
 
gp2≠04vt_ªad_checksum
(
gp2≠04vt_£ns‹
 *);

213 
uöt8_t
 
gp2≠04vt_gë_devi˚_id
(
gp2≠04vt_£ns‹
 *);

214 
gp2≠04vt_gë_ønge_d©a
(
gp2≠04vt_£ns‹
 *);

215 
gp2≠04vt_gë_sig«l_d©a
(
gp2≠04vt_£ns‹
 *);

216 
uöt8_t
 
gp2≠04vt_ªad_Êag
(
gp2≠04vt_£ns‹
 *);

217 
gp2≠04vt_˛ór_Êag
(
gp2≠04vt_£ns‹
 *);

218 
gp2≠04vt_≥rf‹m_off£t_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *);

219 
gp2≠04vt_≥rf‹m_xèlk_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *);

220 
gp2≠04vt_gë_off£t_d©a
(
gp2≠04vt_£ns‹
 *);

221 
gp2≠04vt_gë_xèlk_d©a
(
gp2≠04vt_£ns‹
 *);

222 
gp2≠04vt_off£t_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *);

223 
gp2≠04vt_xèlk_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *);

224 
gp2≠04vt_ˇlcuœã_off£t
(
gp2≠04vt_d©a
 *);

225 
gp2≠04vt_ˇlcuœã_xèlk
(
gp2≠04vt_d©a
 *);

226 
gp2≠04vt_£t_off£t_d©a
(
gp2≠04vt_£ns‹
 *);

227 
gp2≠04vt_£t_xèlk_d©a
(
gp2≠04vt_£ns‹
 *);

228 
gp2≠04vt_ªad_öã∫Æ_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *);

229 
gp2≠04vt_£t_mu…ùÀ_£ns‹s
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
);

230 
gp2≠04vt_£t_mu…ùÀ_£ns‹s_˚
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
);

231 
gp2≠04vt_£t_mu…ùÀ_£ns‹s_dc
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
);

232 
gp2≠04vt_£t_gpio1
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
);

233 
gp2≠04vt_£t_dy«mic_addªss
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
);

234 
gp2≠04vt_£t_Êo‹_di°™˚
(
gp2≠04vt_£ns‹
 *);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap04vt_firmware.c

1 
	~"gp2≠04vt_fúmw¨e.h
"

4 c⁄° 
uöt8_t
 
	ggp2≠04vt_fúmw¨e
[] =

640 
	$gp2≠04vt_wrôe_fúmw¨e
(
gp2≠04vt_£ns‹
 *
pdev
)

642 
uöt16_t
 
size
;

643 
uöt16_t
 
∑ge
 = 0;

644 
uöt8_t
 
wd©a
[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

645 
uöt8_t
 
i
;

647 
size
 = (
gp2≠04vt_fúmw¨e
);

651 
wd©a
[0] = 
ROM
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

652 
wd©a
[0] = 0x80; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

653 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, wdata, 1);

654 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, wdata, 1);

655 
	`DELAY_FUNCTION
(1);

657 
size
 >= 16)

659 
i
 = 0; i < 16; i++) {

660 
wd©a
[
i
] = 
gp2≠04vt_fúmw¨e
[
∑ge
 * 16 + i];

663 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a
, 16);

665 
size
 -= 16;

666 
∑ge
++;

669 if(
size
 > 0)

671 
i
 = 0; i < 
size
; i++) {

672 
wd©a
[
i
] = 
gp2≠04vt_fúmw¨e
[
∑ge
 * 16 + i];

675 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a
, 
size
);

678 
	`gp2≠04vt_ªad_checksum
(
pdev
);

680 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

681 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

682 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, wdata, 1);

683 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, wdata, 1);

684 
	`DELAY_FUNCTION
(2);

685 
	}
}

687 
	$gp2≠04vt_wrôe_fúmw¨e_löux
(
gp2≠04vt_£ns‹
 *
pdev
, *
fw_d©a
, 
size
)

689 
uöt16_t
 
∑ge
 = 0;

690 
uöt8_t
 
wd©a
[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

691 
uöt8_t
 
i
;

695 
wd©a
[0] = 
ROM
; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

696 
wd©a
[0] = 0x80; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

697 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, wdata, 1);

698 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, wdata, 1);

699 
	`DELAY_FUNCTION
(1);

701 
size
 >= 16)

703 
i
 = 0; i < 16; i++) {

704 
wd©a
[
i
] = 
fw_d©a
[
∑ge
 * 16 + i];

707 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a
, 16);

709 
size
 -= 16;

710 
∑ge
++;

713 if(
size
 > 0)

715 
i
 = 0; i < 
size
; i++) {

716 
wd©a
[
i
] = 
fw_d©a
[
∑ge
 * 16 + i];

719 
	`gp2≠_i2c_wrôe
(
pdev
, 0x22, 
wd©a
, 
size
);

722 
	`gp2≠04vt_ªad_checksum
(
pdev
);

724 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x00, wdata, 1);

725 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x1F, wdata, 1);

726 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x20, wdata, 1);

727 
wd©a
[0] = 0x00; 
	`gp2≠_i2c_wrôe
(
pdev
, 0x21, wdata, 1);

728 
	`DELAY_FUNCTION
(2);

729 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap04vt_firmware.h

1 #i‚de‡
_GP2AP04VT_FIRMWARE_H_


2 
	#_GP2AP04VT_FIRMWARE_H_


	)

4 
	~"gp2≠04vt_≠i.h
"

6 
gp2≠04vt_wrôe_fúmw¨e
(
gp2≠04vt_£ns‹
 *);

7 
gp2≠04vt_wrôe_fúmw¨e_löux
(
gp2≠04vt_£ns‹
 *, *, );

9 #i‚de‡
__KERNEL__


10 
	#FIRMWARE_CHECKSUM
 0xEDCB

	)

13 #ifde‡
__KERNEL__


14 
	#FIRMWARE_CHECKSUM
 0xE61C

	)

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap_i2c.c

6 
	~"hÆ_i2c.h
"

8 
	~<gp2≠_i2c.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	~"gp2≠04vt_≠i.h
"

13 
	~"hÆ_ì¥om.h
"

14 
	~"r_cg_£rül.h
"

17 
	#WRITE_DELAY
 1500

	)

18 
	#READ_DELAY
 1000

	)

21 
	s_tof_


24 
U8
 
	mWrôeProc
;

25 
U8
 
	mRódProc
;

27 
U32
 
	mRódFaû
;

28 
U32
 
	mRódOk
;

30 
U32
 
	mWrôeFaû
;

31 
U32
 
	mWrôeOk
;

32 } 
	tTOF_T
;

34 
TOF_T
 
	gtof
;

37 
	$HAL_TOF_Inô
()

39 
	`mem£t
–&
tof
, 0, –
TOF_T
 ));

40 
	}
}

42 
	$HAL_TOF_SëWrôeProc
–
U8
 
_¥oc
 )

44 
tof
.
WrôeProc
 = 
_¥oc
;

45 
	}
}

47 
U8
 
	$HAL_TOF_GëWrôeProc
( )

49  
tof
.
WrôeProc
;

50 
	}
}

52 
BOOL_T
 
	$HAL_TOF_WrôeProcCom∂ëe
( )

54 
U16
 
waô
 = 10000;

58 if–
waô
 > 0 )

59 
waô
--;

61  
FALSE
;

63  !–
	`HAL_TOF_GëWrôeProc
(Ë=
TOF_PROC_DONE
 ) );

65  
TRUE
;

66 
	}
}

68 
	$HAL_TOF_SëRódProc
–
U8
 
_¥oc
 )

70 
tof
.
RódProc
 = 
_¥oc
;

71 
	}
}

73 
U8
 
	$HAL_TOF_GëRódProc
( )

75  
tof
.
RódProc
;

76 
	}
}

78 
BOOL_T
 
	$HAL_TOF_RódProcCom∂ëe
( )

80 
U16
 
waô
 = 10000;

84 if–
waô
 > 0 )

85 
waô
--;

87  
FALSE
;

89  !–
	`HAL_TOF_GëRódProc
(Ë=
TOF_PROC_DONE
 ) );

91  
TRUE
;

92 
	}
}

94 
	$Cou¡RódEº‹
()

96 
tof
.
RódFaû
++;

97 
	}
}

99 
	$Cou¡WrôeEº‹
()

101 
tof
.
WrôeFaû
++;

102 
	}
}

104 
	$i2ˇ0_St›C⁄dôi⁄
()

106 
	`R_IICA0_St›C⁄dôi⁄
();

107 
	}
}

116 
	$gp2≠_i2c_wrôe
(
gp2≠04vt_£ns‹
 *
pdev
, 
uöt8_t
 
w‹d_addªss
, uöt8_à*
wd©a
, uöt8_à
Àn
)

118 
uöt16_t
 
ªt
 = 0;

119 
uöt8_t
 
buf
[20];

122 
buf
[0] = 
w‹d_addªss
;

123 
	`mem˝y
(
buf
 + 1, 
wd©a
, 
Àn
);

125 
	`HAL_TOF_SëWrôeProc
–
TOF_PROC_START
 );

126 
ªt
 = 
	`i2ˇ0_ma°î_£nd
(
pdev
->
¶ave_addr
 << 1, 
buf
, 
Àn
 + 1, 200);

127 i‡(
ªt
 != 0) {

128 
	`Cou¡WrôeEº‹
();

129 
	`i2ˇ0_St›C⁄dôi⁄
();

133 if–!
	`HAL_TOF_WrôeProcCom∂ëe
() )

135 
	`Cou¡WrôeEº‹
();

136 
	`i2ˇ0_St›C⁄dôi⁄
();

140 
	`i2ˇ0_St›C⁄dôi⁄
();

142 
	`Dñay_US
–
WRITE_DELAY
 );

143 
tof
.
WrôeOk
++;

146 
	}
}

155 
	$gp2≠_i2c_ªad
(
gp2≠04vt_£ns‹
 *
pdev
, 
uöt8_t
 
w‹d_addªss
, uöt8_à*
rd©a
, uöt8_à
Àn
)

157 
uöt16_t
 
ªt
 = 0;

160 
	`HAL_TOF_SëWrôeProc
–
TOF_PROC_START
 );

161 
ªt
 = 
	`i2ˇ0_ma°î_£nd
((
pdev
->
¶ave_addr
 << 1), &
w‹d_addªss
, 1, 200);

162 i‡(
MD_OK
 != 0)

164 
	`Cou¡RódEº‹
();

165 
	`i2ˇ0_St›C⁄dôi⁄
();

166 *
rd©a
 = 0xFF;

170 if–!
	`HAL_TOF_WrôeProcCom∂ëe
() )

172 
	`Cou¡RódEº‹
();

173 
	`i2ˇ0_St›C⁄dôi⁄
();

177 
	`HAL_TOF_SëRódProc
–
TOF_PROC_START
 );

179 
ªt
 = 
	`i2ˇ0_ma°î_ªcv
((
pdev
->
¶ave_addr
 << 1), 
rd©a
, 
Àn
, 200);

180 i‡(
ªt
 != 0)

182 *
rd©a
 = 0xFF;

183 
	`Cou¡RódEº‹
();

184 
	`i2ˇ0_St›C⁄dôi⁄
();

188 if–!
	`HAL_TOF_RódProcCom∂ëe
() )

190 
	`Cou¡RódEº‹
();

191 
	`i2ˇ0_St›C⁄dôi⁄
();

195 
	`i2ˇ0_St›C⁄dôi⁄
();

196 
	`Dñay_US
–
READ_DELAY
 );

197 
tof
.
RódOk
++;

199 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap_i2c.h

5 #i‚de‡
GP2AP_I2C_H_


6 
	#GP2AP_I2C_H_


	)

10 
	~"¥j_ty≥.h
"

11 
	~"gp2≠04vt_≠i.h
"

14 
	#TIMEI2C1
 200

	)

15 
	#TIMEI2C2
 1

	)

16 
	#CLOCKDEFI2C
 400

	)

17 
	#CLOCKMAXI2C
 1000

	)

18 
	#CLOCKMINI2C
 10

	)

20 
	#TOF_PROC_START
 0

	)

21 
	#TOF_PROC_DONE
 1

	)

25 
HAL_TOF_Inô
();

32 
HAL_TOF_SëWrôeProc
–
U8
 
_¥oc
 );

39 
U8
 
HAL_TOF_GëWrôeProc
( );

46 
HAL_TOF_SëRódProc
–
U8
 
_¥oc
 );

54 
U8
 
HAL_TOF_GëRódProc
( );

57 
gp2≠_i2c_ªad
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
, uint8_t *, uint8_t);

58 
gp2≠_i2c_ªad_§am
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
, uint8_t *, uint8_t);

59 
gp2≠_i2c_wrôe
(
gp2≠04vt_£ns‹
 *, 
uöt8_t
, uint8_t *, uint8_t);

60 
£tI2CClock
(
uöt32_t
);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\tof.c

1 #¥agm®
öãºu±
 
INTP2
 
r_ötc2_öãºu±


2 #¥agm®
öãºu±
 
INTP3
 
r_ötc3_öãºu±


3 #¥agm®
öãºu±
 
INTP4
 
r_ötc4_öãºu±


4 #¥agm®
öãºu±
 
INTP5
 
r_ötc5_öãºu±


5 #¥agm®
öãºu±
 
INTP6
 
r_ötc6_öãºu±


6 #¥agm®
öãºu±
 
INTP8
 
r_ötc8_öãºu±


7 #¥agm®
öãºu±
 
INTP9
 
r_ötc9_öãºu±


9 
	~"hw.h
"

10 
	~"tof.h
"

11 
	~"gp2≠04vt_≠i.h
"

12 
	~"gp2≠04vt_fúmw¨e.h
"

13 
	~"r_cg_ötc.h
"

17 
gp2≠04vt_£ns‹
 
	gdev
[ 
MAX_TOF_ID
 ];

19 
	#ERROR_NO_DEVICE
 0x0001

	)

20 
	#ERROR_FIRMWARE_CHECKSUM
 0x0002

	)

21 
	#ERROR_CALIBRATION_OFFSET
 0x0004

	)

22 
	#ERROR_CALIBRATION_CROSSTALK
 0x0008

	)

23 
U16
 
	gtof_îr‹
[ 
MAX_TOF_ID
 ] = {0,};

25 
U8
 
	gtof_ªcv
[ 
MAX_TOF_ID
 ] = {0,};

26 
U32
 
	gtof_ªcv_i§_˙t
[ 
MAX_TOF_ID
 ] = {0,};

27 
U32
 
	gtof_ªcv_ªad_˙t
[ 
MAX_TOF_ID
 ] = {0,};

30 
	$gp2≠04vt_£t_îr‹
–
U8
 
id
, 
U16
 
îr‹
 )

32 
tof_îr‹
[ 
MAX_TOF_ID
 ] |
îr‹
;

33 
	}
}

36 
	$InôToF
()

38 
	`TURN_OFF_TOF_1
();

39 
	`TURN_OFF_TOF_2
();

40 
	`TURN_OFF_TOF_3
();

41 
	`TURN_OFF_TOF_4
();

42 
	`TURN_OFF_TOF_5
();

43 
	`TURN_OFF_TOF_6
();

44 
	`TURN_OFF_TOF_7
();

46 
dev
[
TOF_ID_1
].
¶ave_addr
 = 0x29;

47 
dev
[
TOF_ID_2
].
¶ave_addr
 = 0x29;

48 
dev
[
TOF_ID_3
].
¶ave_addr
 = 0x29;

49 
dev
[
TOF_ID_4
].
¶ave_addr
 = 0x29;

50 
dev
[
TOF_ID_5
].
¶ave_addr
 = 0x29;

51 
dev
[
TOF_ID_6
].
¶ave_addr
 = 0x29;

52 
dev
[
TOF_ID_7
].
¶ave_addr
 = 0x29;

54 
	`gp2≠04vt_wrôe_fúmw¨e
(&
dev
[
TOF_ID_1
]);

56 
	`gp2≠04vt_£t_mu…ùÀ_£ns‹s_˚
–&
dev
[ 
TOF_ID_1
 ], 
DYNAMIC_ADDRESS_SETTING_MODE
 );

59 
	`TURN_ON_TOF_1
();

60 
	`gp2≠04vt_£t_dy«mic_addªss
–&
dev
[ 
TOF_ID_1
 ], 0x40 );

61 
	`TURN_OFF_TOF_1
();

64 
	`TURN_ON_TOF_2
();

65 
	`gp2≠04vt_£t_dy«mic_addªss
–&
dev
[ 
TOF_ID_2
 ], 0x41 );

66 
	`TURN_OFF_TOF_2
();

69 
	`TURN_ON_TOF_3
();

70 
	`gp2≠04vt_£t_dy«mic_addªss
–&
dev
[ 
TOF_ID_3
 ], 0x42 );

71 
	`TURN_OFF_TOF_3
();

74 
	`TURN_ON_TOF_4
();

75 
	`gp2≠04vt_£t_dy«mic_addªss
–&
dev
[ 
TOF_ID_4
 ], 0x43 );

76 
	`TURN_OFF_TOF_4
();

79 
	`TURN_ON_TOF_5
();

80 
	`gp2≠04vt_£t_dy«mic_addªss
–&
dev
[ 
TOF_ID_5
 ], 0x44 );

81 
	`TURN_OFF_TOF_5
();

84 
	`TURN_ON_TOF_6
();

85 
	`gp2≠04vt_£t_dy«mic_addªss
–&
dev
[ 
TOF_ID_6
 ], 0x45 );

86 
	`TURN_OFF_TOF_6
();

89 
	`TURN_ON_TOF_7
();

90 
	`gp2≠04vt_£t_dy«mic_addªss
–&
dev
[ 
TOF_ID_7
 ], 0x46 );

91 
	`TURN_OFF_TOF_7
();

93 
	`TURN_ON_TOF_1
();

94 
	`TURN_ON_TOF_2
();

95 
	`TURN_ON_TOF_3
();

96 
	`TURN_ON_TOF_4
();

97 
	`TURN_ON_TOF_5
();

98 
	`TURN_ON_TOF_6
();

99 
	`TURN_ON_TOF_7
();

100 
	`gp2≠04vt_£t_mu…ùÀ_£ns‹s_˚
–&
dev
[ 
TOF_ID_1
 ], 
NORMAL_MODE
 );

101 
	`TURN_OFF_TOF_1
();

102 
	`TURN_OFF_TOF_2
();

103 
	`TURN_OFF_TOF_3
();

104 
	`TURN_OFF_TOF_4
();

105 
	`TURN_OFF_TOF_5
();

106 
	`TURN_OFF_TOF_6
();

107 
	`TURN_OFF_TOF_7
();

110 
dev
[
TOF_ID_1
].
d©a
.
£ns‹_°©us
 = 
NOT_CALIBRATED
;

111 
dev
[
TOF_ID_1
].
d©a
.
off£t_u£r
 = 0;

112 
dev
[
TOF_ID_1
].
d©a
.
xèlk_u£r
 = 0;

114 
dev
[
TOF_ID_2
].
d©a
.
£ns‹_°©us
 = 
NOT_CALIBRATED
;

115 
dev
[
TOF_ID_2
].
d©a
.
off£t_u£r
 = 0;

116 
dev
[
TOF_ID_2
].
d©a
.
xèlk_u£r
 = 0;

118 
dev
[
TOF_ID_3
].
d©a
.
£ns‹_°©us
 = 
NOT_CALIBRATED
;

119 
dev
[
TOF_ID_3
].
d©a
.
off£t_u£r
 = 0;

120 
dev
[
TOF_ID_3
].
d©a
.
xèlk_u£r
 = 0;

122 
dev
[
TOF_ID_4
].
d©a
.
£ns‹_°©us
 = 
NOT_CALIBRATED
;

123 
dev
[
TOF_ID_4
].
d©a
.
off£t_u£r
 = 0;

124 
dev
[
TOF_ID_4
].
d©a
.
xèlk_u£r
 = 0;

126 
dev
[
TOF_ID_5
].
d©a
.
£ns‹_°©us
 = 
NOT_CALIBRATED
;

127 
dev
[
TOF_ID_5
].
d©a
.
off£t_u£r
 = 0;

128 
dev
[
TOF_ID_5
].
d©a
.
xèlk_u£r
 = 0;

130 
dev
[
TOF_ID_6
].
d©a
.
£ns‹_°©us
 = 
NOT_CALIBRATED
;

131 
dev
[
TOF_ID_6
].
d©a
.
off£t_u£r
 = 0;

132 
dev
[
TOF_ID_6
].
d©a
.
xèlk_u£r
 = 0;

134 
dev
[
TOF_ID_7
].
d©a
.
£ns‹_°©us
 = 
NOT_CALIBRATED
;

135 
dev
[
TOF_ID_7
].
d©a
.
off£t_u£r
 = 0;

136 
dev
[
TOF_ID_7
].
d©a
.
xèlk_u£r
 = 0;

138 
dev
[
TOF_ID_1
].
d©a
.
mode
 = 
MODE_SENSOR_OFF
;

139 
dev
[
TOF_ID_2
].
d©a
.
mode
 = 
MODE_SENSOR_OFF
;

140 
dev
[
TOF_ID_3
].
d©a
.
mode
 = 
MODE_SENSOR_OFF
;

141 
dev
[
TOF_ID_4
].
d©a
.
mode
 = 
MODE_SENSOR_OFF
;

142 
dev
[
TOF_ID_5
].
d©a
.
mode
 = 
MODE_SENSOR_OFF
;

143 
dev
[
TOF_ID_6
].
d©a
.
mode
 = 
MODE_SENSOR_OFF
;

144 
dev
[
TOF_ID_7
].
d©a
.
mode
 = 
MODE_SENSOR_OFF
;

147 
dev
[
TOF_ID_1
].
d©a
.
Êo‹_di°™˚
 = 230;

148 
dev
[
TOF_ID_2
].
d©a
.
Êo‹_di°™˚
 = 230;

149 
dev
[
TOF_ID_3
].
d©a
.
Êo‹_di°™˚
 = 230;

150 
dev
[
TOF_ID_4
].
d©a
.
Êo‹_di°™˚
 = 230;

151 
dev
[
TOF_ID_5
].
d©a
.
Êo‹_di°™˚
 = 230;

152 
dev
[
TOF_ID_6
].
d©a
.
Êo‹_di°™˚
 = 230;

153 
dev
[
TOF_ID_7
].
d©a
.
Êo‹_di°™˚
 = 230;

155 
	`gp2≠04vt_öô_£ns‹
(&
dev
[
TOF_ID_1
]);

156 
	`gp2≠04vt_öô_£ns‹
(&
dev
[
TOF_ID_2
]);

157 
	`gp2≠04vt_öô_£ns‹
(&
dev
[
TOF_ID_3
]);

158 
	`gp2≠04vt_öô_£ns‹
(&
dev
[
TOF_ID_4
]);

159 
	`gp2≠04vt_öô_£ns‹
(&
dev
[
TOF_ID_5
]);

160 
	`gp2≠04vt_öô_£ns‹
(&
dev
[
TOF_ID_6
]);

161 
	`gp2≠04vt_öô_£ns‹
(&
dev
[
TOF_ID_7
]);

170 
	`R_INTC2_Sèπ
();

171 
	`R_INTC3_Sèπ
();

172 
	`R_INTC4_Sèπ
();

173 
	`R_INTC5_Sèπ
();

174 
	`R_INTC6_Sèπ
();

175 
	`R_INTC8_Sèπ
();

176 
	`R_INTC9_Sèπ
();

177 
	}
}

181 
	$DoCÆibøti⁄_ID
(
U8
 
id
)

183 
gp2≠04vt_£ns‹
 *
pdev
 = &
dev
[
id
];

184 
gp2≠04vt_d©a
 *
pd©a
 = &
dev
[
id
].
d©a
;

186 i‡(
pd©a
->
mode
 =
MODE_OFFSET_CALIBRATION
)

188 
	`gp2≠04vt_ªad_Êag
(
pdev
) == 0)

191 
	`Dñay_MS
(90);

194 
	`gp2≠04vt_gë_off£t_d©a
(
pdev
);

196 i‡(
pd©a
->
off£t_u£r
 == 22222)

198 
	`gp2≠04vt_£t_îr‹
–
id
, 
ERROR_CALIBRATION_OFFSET
 );

202 i‡(
pd©a
->
mode
 =
MODE_XTALK_CALIBRATION
)

204 
	`gp2≠04vt_ªad_Êag
(
pdev
) == 0)

207 
	`Dñay_MS
(99);

210 
	`gp2≠04vt_gë_xèlk_d©a
(
pdev
);

212 i‡(
pd©a
->
xèlk_u£r
 >= 200)

214 
	`gp2≠04vt_£t_îr‹
–
id
, 
ERROR_CALIBRATION_CROSSTALK
 );

217 
	}
}

220 
	$DoCÆibøti⁄
()

222 
	`DoCÆibøti⁄_ID
–
TOF_ID_1
 );

223 
	}
}

226 
	$SèπR™ge
(
U8
 
id
)

229 
	`gp2≠04vt_°¨t_øngög
–&
dev
[
id
] );

230 
	`gp2≠04vt_ªad_Êag
(&
dev
[
id
]) == 0) {

231 
	`Dñay_MS
( 5 );

234 
	`gp2≠04vt_°›_øngög
(&
dev
[ 
id
 ]);

235 
	`gp2≠04vt_gë_ønge_d©a
(&
dev
[ 
id
 ]);

236 
	`gp2≠04vt_˛ór_Êag
(&
dev
[ 
id
 ]);

237 
	}
}

239 
U8
 
	$CheckSèπR™ge
(
U8
 
id
 )

241 if(
	`gp2≠04vt_ªad_Êag
(&
dev
[
id
]) == 0) {

243  
FALSE
;

246  
TRUE
;

247 
	}
}

249 
	$St›R™ge
(
U8
 
id
)

251 
	`gp2≠04vt_°›_øngög
–&
dev
[
id
] );

252 
	}
}

254 
I16
 
	$GëR™ge
(
U8
 
id
)

256  
dev
[ 
id
 ].
d©a
.
ønge
;

257 
	}
}

259 
U8
 
	$xèlk_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *
pdev
)

261 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

263 
	`gp2≠04vt_≥rf‹m_xèlk_ˇlibøti⁄
(
pdev
);

265 
	`gp2≠04vt_ªad_Êag
(
pdev
) == 0) {

266 
	`Dñay_MS
(33);

269 
	`gp2≠04vt_gë_xèlk_d©a
(
pdev
);

271 i‡(
pd©a
->
xèlk_u£r
 < 200) {

272  
TRUE
;

282  
FALSE
;

285 
	`¥ötf
("£ns‹_°©us: 0x%X\r\n", 
pd©a
->
£ns‹_°©us
);

286 
	`¥ötf
("xèlk_u£r: %ld\r\n", 
pd©a
->
xèlk_u£r
);

288 
	}
}

290 
U8
 
	$off£t_ˇlibøti⁄
(
gp2≠04vt_£ns‹
 *
pdev
)

292 
gp2≠04vt_d©a
 *
pd©a
 = &
pdev
->
d©a
;

294 
	`gp2≠04vt_≥rf‹m_off£t_ˇlibøti⁄
(
pdev
);

296 
	`gp2≠04vt_ªad_Êag
(
pdev
) == 0) {

297 
	`Dñay_MS
(33);

300 
	`gp2≠04vt_gë_off£t_d©a
(
pdev
);

302 i‡(
pd©a
->
off£t_u£r
 != 22222) {

303  
TRUE
;

306  
FALSE
;

311 
	`¥ötf
("Off£àˇlibøti⁄ di°™˚[mm]: %d \r\n", 
OFFSET_CALIBRAION_DISTANCE_MM
);

312 
	`¥ötf
("£ns‹_°©us: 0x%X \r\n", 
pd©a
->
£ns‹_°©us
);

313 
	`¥ötf
("off£t[0.1mm]: %ld\r\n", 
pd©a
->
off£t_0p1mm
);

314 
	`¥ötf
("off£t_u£r[bö]: %ld\r\n", 
pd©a
->
off£t_u£r
);

316 
	}
}

318 
U8
 
	gdbg_off£t
 = 0;

319 
U8
 
	gdbg_xèlk
 = 0;

320 
U8
 
	gdbg_Êo‹
 = 0;

321 
U8
 
	goff£t_°©us
[ 
MAX_TOF_ID
 ];

322 
U8
 
	gxèlk_°©us
[ 
MAX_TOF_ID
 ];

324 
U8
 
	$GëSètusOff£tCÆibøti⁄
()

326 if–
off£t_°©us
[ 0 ] =
FALSE


327 || 
off£t_°©us
[ 1 ] =
FALSE


328 || 
off£t_°©us
[ 2 ] =
FALSE


329 || 
off£t_°©us
[ 3 ] =
FALSE


330 || 
off£t_°©us
[ 4 ] =
FALSE


331 || 
off£t_°©us
[ 5 ] =
FALSE


332 || 
off£t_°©us
[ 6 ] =
FALSE
 )

334  
FALSE
;

337  
TRUE
;

338 
	}
}

340 
U8
 
	$GëSètusXèlkCÆibøti⁄
()

342 if–
xèlk_°©us
[ 0 ] =
FALSE


343 || 
xèlk_°©us
[ 1 ] =
FALSE


344 || 
xèlk_°©us
[ 2 ] =
FALSE


345 || 
xèlk_°©us
[ 3 ] =
FALSE


346 || 
xèlk_°©us
[ 4 ] =
FALSE


347 || 
xèlk_°©us
[ 5 ] =
FALSE


348 || 
xèlk_°©us
[ 6 ] =
FALSE
 )

350  
FALSE
;

353  
TRUE
;

354 
	}
}

356 
	$Pro˚ssToF
()

358 
U8
 
i
;

360  
i
 = 0; i < 
MAX_TOF_ID
 ; i++ )

362 if–
tof_ªcv
[
i
] =
TRUE
 )

364 
tof_ªcv
[
i
] = 
FALSE
;

365 
tof_ªcv_ªad_˙t
[
i
]++;

369 if–
dbg_off£t
 )

371 
dbg_off£t
 = 0;

373 
off£t_°©us
[ 0 ] = 
	`off£t_ˇlibøti⁄
–&
dev
[ 
TOF_ID_1
 ]);

374 
off£t_°©us
[ 1 ] = 
	`off£t_ˇlibøti⁄
–&
dev
[ 
TOF_ID_2
 ]);

375 
off£t_°©us
[ 2 ] = 
	`off£t_ˇlibøti⁄
–&
dev
[ 
TOF_ID_3
 ]);

376 
off£t_°©us
[ 3 ] = 
	`off£t_ˇlibøti⁄
–&
dev
[ 
TOF_ID_4
 ]);

377 
off£t_°©us
[ 4 ] = 
	`off£t_ˇlibøti⁄
–&
dev
[ 
TOF_ID_5
 ]);

378 
off£t_°©us
[ 5 ] = 
	`off£t_ˇlibøti⁄
–&
dev
[ 
TOF_ID_6
 ]);

379 
off£t_°©us
[ 6 ] = 
	`off£t_ˇlibøti⁄
–&
dev
[ 
TOF_ID_7
 ]);

382 if–
dbg_xèlk
 )

384 
dbg_xèlk
 = 0;

386 
xèlk_°©us
[ 0 ] = 
	`xèlk_ˇlibøti⁄
–&
dev
[ 
TOF_ID_1
 ]);

387 
xèlk_°©us
[ 1 ] = 
	`xèlk_ˇlibøti⁄
–&
dev
[ 
TOF_ID_2
 ]);

388 
xèlk_°©us
[ 2 ] = 
	`xèlk_ˇlibøti⁄
–&
dev
[ 
TOF_ID_3
 ]);

389 
xèlk_°©us
[ 3 ] = 
	`xèlk_ˇlibøti⁄
–&
dev
[ 
TOF_ID_4
 ]);

390 
xèlk_°©us
[ 4 ] = 
	`xèlk_ˇlibøti⁄
–&
dev
[ 
TOF_ID_5
 ]);

391 
xèlk_°©us
[ 5 ] = 
	`xèlk_ˇlibøti⁄
–&
dev
[ 
TOF_ID_6
 ]);

392 
xèlk_°©us
[ 6 ] = 
	`xèlk_ˇlibøti⁄
–&
dev
[ 
TOF_ID_7
 ]);

395 if–
dbg_Êo‹
 )

397 
dbg_Êo‹
 = 0;

399 
	`gp2≠04vt_£t_Êo‹_di°™˚
–&
dev
[ 
TOF_ID_1
 ]);

400 
	`gp2≠04vt_£t_Êo‹_di°™˚
–&
dev
[ 
TOF_ID_2
 ]);

401 
	`gp2≠04vt_£t_Êo‹_di°™˚
–&
dev
[ 
TOF_ID_3
 ]);

402 
	`gp2≠04vt_£t_Êo‹_di°™˚
–&
dev
[ 
TOF_ID_4
 ]);

403 
	`gp2≠04vt_£t_Êo‹_di°™˚
–&
dev
[ 
TOF_ID_5
 ]);

404 
	`gp2≠04vt_£t_Êo‹_di°™˚
–&
dev
[ 
TOF_ID_6
 ]);

405 
	`gp2≠04vt_£t_Êo‹_di°™˚
–&
dev
[ 
TOF_ID_7
 ]);

408 
	}
}

411 
__öãºu±
 
	$r_ötc4_öãºu±
()

413 
tof_ªcv
[ 
TOF_ID_1
 ] = 
TRUE
;

414 
tof_ªcv_i§_˙t
[ 
TOF_ID_1
 ]++;

415 
	}
}

419 
__öãºu±
 
	$r_ötc9_öãºu±
()

421 
tof_ªcv
[ 
TOF_ID_2
 ] = 
TRUE
;

422 
tof_ªcv_i§_˙t
[ 
TOF_ID_2
 ]++;

424 
	}
}

428 
__öãºu±
 
	$r_ötc8_öãºu±
()

430 
tof_ªcv
[ 
TOF_ID_3
 ] = 
TRUE
;

431 
tof_ªcv_i§_˙t
[ 
TOF_ID_3
 ]++;

432 
	}
}

436 
__öãºu±
 
	$r_ötc3_öãºu±
()

438 
tof_ªcv
[ 
TOF_ID_4
 ] = 
TRUE
;

439 
tof_ªcv_i§_˙t
[ 
TOF_ID_4
 ]++;

440 
	}
}

444 
__öãºu±
 
	$r_ötc2_öãºu±
()

446 
tof_ªcv
[ 
TOF_ID_5
 ] = 
TRUE
;

447 
tof_ªcv_i§_˙t
[ 
TOF_ID_5
 ]++;

448 
	}
}

452 
__öãºu±
 
	$r_ötc5_öãºu±
()

454 
tof_ªcv
[ 
TOF_ID_6
 ] = 
TRUE
;

455 
tof_ªcv_i§_˙t
[ 
TOF_ID_6
 ]++;

456 
	}
}

460 
__öãºu±
 
	$r_ötc6_öãºu±
()

462 
tof_ªcv
[ 
TOF_ID_7
 ] = 
TRUE
;

463 
tof_ªcv_i§_˙t
[ 
TOF_ID_7
 ]++;

464 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\tof.h

1 #i‚de‡
__TOF__


2 
	#__TOF__


	)

4 
	~"¥j_ty≥.h
"

7 
	#TOF_ID_1
 0

	)

8 
	#TOF_ID_2
 1

	)

9 
	#TOF_ID_3
 2

	)

10 
	#TOF_ID_4
 3

	)

11 
	#TOF_ID_5
 4

	)

12 
	#TOF_ID_6
 5

	)

13 
	#TOF_ID_7
 6

	)

14 
	#MAX_TOF_ID
 7

	)

16 
InôToF
();

18 
DoCÆibøti⁄
();

20 
SèπR™ge
(
U8
 
id
);

22 
U8
 
CheckSèπR™ge
(U8 
id
 );

24 
St›R™ge
(
U8
 
id
);

26 
I16
 
GëR™ge
(
U8
 
id
);

28 
U8
 
GëSètusOff£tCÆibøti⁄
();

30 
U8
 
GëSètusXèlkCÆibøti⁄
();

32 
Pro˚ssToF
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_eeprom.c

3 
	~"hw.h
"

4 
	~"r_cg_£rül.h
"

5 
	~"hÆ_i2c.h
"

6 
	~"hÆ_ì¥om.h
"

7 
	~"utû.h
"

10 
	#EEP_OP_WR
 0x00

	)

11 
	#EEP_OP_RD
 0x01

	)

13 
	#DEFAULT_DELAY
 35

	)

14 
	#DEFAULT_RETRY_COUNT
 3

	)

16 
	s_πc_i¶12026_


19 
U8
 
	mWrôeProc
;

20 
U8
 
	mRódProc
;

22 
U32
 
	mRódFaû
;

23 
U32
 
	mRódOk
;

25 
U32
 
	mWrôeFaû
;

26 
U32
 
	mWrôeOk
;

27 } 
	tRTC_T
;

29 
RTC_T
 
	gπc
;

40 
	$HAL_RTC_Inô
()

42 
	`mem£t
–&
πc
, 0, –
RTC_T
 ));

43 
	}
}

50 
	$HAL_RTC_SëWrôeProc
–
U8
 
_¥oc
 )

52 
πc
.
WrôeProc
 = 
_¥oc
;

53 
	}
}

60 
U8
 
	$HAL_RTC_GëWrôeProc
( )

62  
πc
.
WrôeProc
;

63 
	}
}

70 
BOOL_T
 
	$HAL_RTC_WrôeProcCom∂ëe
( )

72 
U16
 
waô
 = 10000;

76 if–
waô
 > 0 )

77 
waô
--;

79  
FALSE
;

81  !–
	`HAL_RTC_GëWrôeProc
(Ë=
EEP_PROC_DONE
 ) );

83  
TRUE
;

84 
	}
}

91 
	$HAL_RTC_SëRódProc
–
U8
 
_¥oc
 )

93 
πc
.
RódProc
 = 
_¥oc
;

94 
	}
}

101 
U8
 
	$HAL_RTC_GëRódProc
( )

103  
πc
.
RódProc
;

104 
	}
}

111 
BOOL_T
 
	$HAL_RTC_RódProcCom∂ëe
( )

113 
U16
 
waô
 = 10000;

117 if–
waô
 > 0 )

118 
waô
--;

120  
FALSE
;

122  !–
	`HAL_RTC_GëRódProc
(Ë=
EEP_PROC_DONE
 ) );

124  
TRUE
;

125 
	}
}

127 
	$Cou¡RódEº‹
()

129 
πc
.
RódFaû
++;

130 
	}
}

132 
	$Cou¡WrôeEº‹
()

134 
πc
.
WrôeFaû
++;

135 
	}
}

137 
	$i2ˇ0_St›C⁄dôi⁄
()

139 
	`R_IICA0_St›C⁄dôi⁄
();

141 
	}
}

148 
BOOL_T
 
	$ByãWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 
_d©a
 )

150 
U8
 
buf
[ 3 ];

152 
buf
[ 0 ] = 
	`GET_HIGH_BYTE
(
_addr
);

153 
buf
[ 1 ] = 
	`GET_LOW_BYTE
(
_addr
);

154 
buf
[ 2 ] = 
_d©a
;

157 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

159 if–
	`i2ˇ0_ma°î_£nd
–
_dev
 | 
EEP_OP_WR
 , &
buf
[1] , 2 , 200 ) !
MD_OK
 )

161 
	`Cou¡WrôeEº‹
();

163 
	`i2ˇ0_St›C⁄dôi⁄
();

164  
FALSE
;

167 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

169 
	`Cou¡WrôeEº‹
();

170 
	`i2ˇ0_St›C⁄dôi⁄
();

171  
FALSE
;

174 
	`i2ˇ0_St›C⁄dôi⁄
();

175 
	`Dñay_MS
–
DEFAULT_DELAY
 );

178 
πc
.
WrôeOk
++;

179  
TRUE
;

180 
	}
}

182 
BOOL_T
 
	$HAL_RTC_ByãWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 
_d©a
 )

184 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

190 if–
mu8RëryCou¡
 == 0 )

192  
FALSE
;

194 
mu8RëryCou¡
--;

196 
	`RESET_WDT
();

199  
	`ByãWrôe
–
_dev
, 
_addr
, 
_d©a
 ) !
TRUE
 );

201 
	`RESET_WDT
();

202  
TRUE
;

203 
	}
}

211 
BOOL_T
 
	$PageWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
, U8 
_Àn
 )

213 
U8
 
buf
 [ 
EEP_PAGE_SIZE
 + 2 ];

214 
U8
 
rbuf
[ 
EEP_PAGE_SIZE
 ];

216 
buf
[ 0 ] = 
	`GET_HIGH_BYTE
(
_addr
);

217 
buf
[ 1 ] = 
	`GET_LOW_BYTE
(
_addr
);

219 
	`mem˝y
–&
buf
[ 2 ], &
_d©a
[ 0 ], 
_Àn
 );

221 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

225 if–
	`i2ˇ0_ma°î_£nd
–
_dev
 | 
EEP_OP_WR
 , &
buf
[ 1 ] , 
_Àn
 + 1 , 200 ) !
MD_OK
 )

227 
	`Cou¡WrôeEº‹
();

228 
	`i2ˇ0_St›C⁄dôi⁄
();

229  
FALSE
;

232 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

234 
	`Cou¡WrôeEº‹
();

235 
	`i2ˇ0_St›C⁄dôi⁄
();

236  
FALSE
;

239 
	`i2ˇ0_St›C⁄dôi⁄
();

240 
	`Dñay_MS
–
DEFAULT_DELAY
 );

244 if–!
	`HAL_RTC_SeqRód
–
_dev
, 
_addr
, &
rbuf
[ 0 ], 
_Àn
 ) )

246 
	`Cou¡WrôeEº‹
();

247 
	`i2ˇ0_St›C⁄dôi⁄
();

248  
FALSE
;

252 if–
	`memcmp
–&
buf
[ 2 ], &
rbuf
[ 0 ], 
_Àn
 ) != 0 )

254 
	`Cou¡WrôeEº‹
();

255 
	`i2ˇ0_St›C⁄dôi⁄
();

256  
FALSE
;

259 
	`i2ˇ0_St›C⁄dôi⁄
();

260 
	`Dñay_MS
–
DEFAULT_DELAY
 );

262 
πc
.
WrôeOk
++;

263  
TRUE
;

264 
	}
}

266 
BOOL_T
 
	$HAL_RTC_PageWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
, U8 
_Àn
 )

268 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

273 if–
mu8RëryCou¡
 == 0 )

275  
FALSE
;

277 
mu8RëryCou¡
--;

279 
	`RESET_WDT
();

282  
	`PageWrôe
–
_dev
, 
_addr
, 
_d©a
, 
_Àn
 ) !
TRUE
 );

284 
	`RESET_WDT
();

285  
TRUE
;

286 
	}
}

295 
BOOL_T
 
	$CuºítAddrRód
–
U8
 
_dev
, U8 *
_d©a
 )

297 
	`HAL_RTC_SëRódProc
–
EEP_PROC_START
 );

299 if–
	`i2ˇ0_ma°î_ªcv
–
_dev
 | 
EEP_OP_RD
 , 
_d©a
 , 1 , 10 ) !
MD_OK
 )

301 
	`Cou¡RódEº‹
();

302 
	`i2ˇ0_St›C⁄dôi⁄
();

303  
FALSE
;

306 if–!
	`HAL_RTC_RódProcCom∂ëe
() )

308 
	`Cou¡RódEº‹
();

309 
	`i2ˇ0_St›C⁄dôi⁄
();

310  
FALSE
;

313 
	`i2ˇ0_St›C⁄dôi⁄
();

314 
	`Dñay_MS
–
DEFAULT_DELAY
 );

315 
πc
.
RódOk
++;

316  
TRUE
;

317 
	}
}

319 
BOOL_T
 
	$HAL_RTC_CuºítAddrRód
–
U8
 
_dev
, U8 *
_d©a
 )

321 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

327 if–
mu8RëryCou¡
 == 0 )

329  
FALSE
;

331 
mu8RëryCou¡
--;

333 
	`RESET_WDT
();

336  
	`CuºítAddrRód
–
_dev
, 
_d©a
 ) !
TRUE
 );

338 
	`RESET_WDT
();

339  
TRUE
;

340 
	}
}

346 
BOOL_T
 
	$ByãRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
 )

348 
U8
 
buf
[2] = {0};

351 
buf
[0] = 
	`GET_HIGH_BYTE
–
_addr
 );

352 
buf
[1] = 
	`GET_LOW_BYTE
–
_addr
 );

354 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

357 if–
	`i2ˇ0_ma°î_£nd
–
_dev
 | 
EEP_OP_WR
 , &
buf
[1] , 1 , 200 ) !
MD_OK
 )

359 
	`Cou¡RódEº‹
();

360 
	`i2ˇ0_St›C⁄dôi⁄
();

361  
FALSE
;

364 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

366 
	`Cou¡RódEº‹
();

367 
	`i2ˇ0_St›C⁄dôi⁄
();

368  
FALSE
;

371 
	`HAL_RTC_SëRódProc
–
EEP_PROC_START
 );

374 if–
	`i2ˇ0_ma°î_ªcv
–
_dev
 | 
EEP_OP_RD
 , 
_d©a
 , 1 , 200 ) !
MD_OK
 )

376 
	`Cou¡RódEº‹
();

377 
	`i2ˇ0_St›C⁄dôi⁄
();

378  
FALSE
;

382 if–!
	`HAL_RTC_RódProcCom∂ëe
() )

384 
	`Cou¡RódEº‹
();

385 
	`i2ˇ0_St›C⁄dôi⁄
();

386  
FALSE
;

389 
	`i2ˇ0_St›C⁄dôi⁄
();

390 
	`Dñay_MS
–
DEFAULT_DELAY
 );

391 
πc
.
RódOk
++;

392  
TRUE
;

393 
	}
}

395 
BOOL_T
 
	$HAL_RTC_ByãRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
 )

397 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

402 if–
mu8RëryCou¡
 == 0 )

404  
FALSE
;

406 
mu8RëryCou¡
--;

408 
	`RESET_WDT
();

411  
	`ByãRód
–
_dev
, 
_addr
 , 
_d©a
 ) !
TRUE
 );

413 
	`RESET_WDT
();

414  
TRUE
;

415 
	}
}

422 
BOOL_T
 
	$SeqRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 * 
_d©a
, U8 
_Àn
 )

424 
U8
 
buf
[2] = {0};

427 
buf
[0] = 
	`GET_HIGH_BYTE
–
_addr
 );

428 
buf
[1] = 
	`GET_LOW_BYTE
–
_addr
 );

429 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

433 if–
	`i2ˇ0_ma°î_£nd
–
_dev
 | 
EEP_OP_WR
 , &
buf
[1] , 1 , 200 ) !
MD_OK
 )

435 
	`Cou¡RódEº‹
();

436 
	`i2ˇ0_St›C⁄dôi⁄
();

437  
FALSE
;

441 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

443 
	`Cou¡RódEº‹
();

444 
	`i2ˇ0_St›C⁄dôi⁄
();

445  
FALSE
;

448 
	`HAL_RTC_SëRódProc
–
EEP_PROC_START
 );

451 if–
	`i2ˇ0_ma°î_ªcv
–
_dev
 | 
EEP_OP_RD
 , 
_d©a
 , 
_Àn
 , 200 ) !
MD_OK
 )

453 
	`Cou¡RódEº‹
();

454 
	`i2ˇ0_St›C⁄dôi⁄
();

455  
FALSE
;

458 if–!
	`HAL_RTC_RódProcCom∂ëe
() )

460 
	`Cou¡RódEº‹
();

461 
	`i2ˇ0_St›C⁄dôi⁄
();

462  
FALSE
;

466 
	`i2ˇ0_St›C⁄dôi⁄
();

467 
	`Dñay_MS
–
DEFAULT_DELAY
 );

468 
πc
.
RódOk
++;

469  
TRUE
;

470 
	}
}

472 
BOOL_T
 
	$HAL_RTC_SeqRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 * 
_d©a
, U8 
_Àn
 )

474 
U8
 
mu8RëryCou¡
 = 
DEFAULT_RETRY_COUNT
;

479 if–
mu8RëryCou¡
 == 0 )

481  
FALSE
;

483 
mu8RëryCou¡
--;

485 
	`RESET_WDT
();

488  
	`SeqRód
–
_dev
, 
_addr
 , 
_d©a
, 
_Àn
 ) !
TRUE
 );

490 
	`RESET_WDT
();

491  
TRUE
;

492 
	}
}

499 
BOOL_T
 
	$HAL_RTC_EEPROM_AŒEø£
( )

501 
U8
 
buf
[ 
EEP_PAGE_SIZE
 + 2 ];

502 
U16
 
i
;

503 
U16
 
addr
;

505 
	`mem£t
–&
buf
[ 2 ], 0x00, 
EEP_PAGE_SIZE
 );

507  
i
 = 0; i < 
EEP_PAGE_NUM
; i++ )

509 
addr
 = (
i
 * 
EEP_PAGE_SIZE
);

510 
buf
[ 0 ] = 
	`GET_HIGH_BYTE
–
addr
 );

511 
buf
[ 1 ] = 
	`GET_LOW_BYTE
–
addr
 );

513 
	`HAL_RTC_SëWrôeProc
–
EEP_PROC_START
 );

516 if–
	`i2ˇ0_ma°î_£nd
–
DEV_ADDR_EEP
 | 
EEP_OP_WR
 , &
buf
[ 1 ] , 
EEP_PAGE_SIZE
 + 1 , 200 ) !
MD_OK
 )

518 
	`Cou¡WrôeEº‹
();

519 
	`i2ˇ0_St›C⁄dôi⁄
();

520  
FALSE
;

523 if–!
	`HAL_RTC_WrôeProcCom∂ëe
() )

525 
	`Cou¡WrôeEº‹
();

526 
	`i2ˇ0_St›C⁄dôi⁄
();

527  
FALSE
;

530 
	`i2ˇ0_St›C⁄dôi⁄
();

531 
	`Dñay_MS
–
DEFAULT_DELAY
 );

534 
	`i2ˇ0_St›C⁄dôi⁄
();

535 
	`Dñay_MS
–
DEFAULT_DELAY
 );

536 
πc
.
WrôeOk
++;

537  
TRUE
;

538 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_eeprom.h

3 #i‚de‡
__HAL_EEPROM_H__


4 
	#__HAL_EEPROM_H__


	)

7 
	~"¥j_ty≥.h
"

10 
	#DEV_ADDR_EEP
 0xA0

	)

12 
	#EEP_MAX_SIZE
 256

	)

13 
	#EEP_PAGE_SIZE
 8

	)

14 
	#EEP_PAGE_NUM
 32

	)

17 
	#EEP_PROC_START
 0

	)

18 
	#EEP_PROC_DONE
 1

	)

22 
HAL_RTC_Inô
();

29 
HAL_RTC_SëWrôeProc
–
U8
 
_¥oc
 );

36 
U8
 
HAL_RTC_GëWrôeProc
( );

43 
HAL_RTC_SëRódProc
–
U8
 
_¥oc
 );

50 
U8
 
HAL_RTC_GëRódProc
( );

57 
BOOL_T
 
HAL_RTC_ByãWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 
_d©a
 );

64 
BOOL_T
 
HAL_RTC_PageWrôe
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
, U8 
_Àn
 );

71 
BOOL_T
 
HAL_RTC_CuºítAddrRód
–
U8
 
_dev
, U8 *
_d©a
 );

78 
BOOL_T
 
HAL_RTC_ByãRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 *
_d©a
 );

85 
BOOL_T
 
HAL_RTC_SeqRód
–
U8
 
_dev
, 
U16
 
_addr
 , U8 * 
_d©a
, U8 
_Àn
 );

92 
BOOL_T
 
HAL_RTC_EEPROM_AŒEø£
( );

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_i2c.c

3 #¥agm®
öãºu±
 
INTIICA0
 
r_i2ˇ0_öãºu±


6 
	#TEST_EEP_NO_STOP
 1

	)

8 
	~"hÆ_i2c.h
"

9 
	~"r_cg_£rül.h
"

11 
	~"gp2≠_i2c.h
"

18 vﬁ©ûê
uöt8_t
 
	gi2ˇ0_m°©us
 = 0;

19 vﬁ©ûê
uöt8_t
 *
	gi2ˇ0_rx_pbuf
 = 0;

20 vﬁ©ûê
uöt16_t
 
	gi2ˇ0_rx_Àn
 = 0;

21 vﬁ©ûê
uöt16_t
 
	gi2ˇ0_rx_˙t
 = 0;

23 vﬁ©ûê
uöt8_t
 *
	gi2ˇ0_tx_pbuf
 = 0;

24 vﬁ©ûê
uöt16_t
 
	gi2ˇ0_tx_˙t
 = 0;

27 vﬁ©ûê
uöt8_t
 
	gi2ˇ1_m°©us
 = 0;

28 vﬁ©ûê
uöt8_t
 *
	gi2ˇ1_rx_pbuf
 = 0;

29 vﬁ©ûê
uöt16_t
 
	gi2ˇ1_rx_Àn
 = 0;

30 vﬁ©ûê
uöt16_t
 
	gi2ˇ1_rx_˙t
 = 0;

32 vﬁ©ûê
uöt8_t
 *
	gi2ˇ1_tx_pbuf
 = 0;

33 vﬁ©ûê
uöt16_t
 
	gi2ˇ1_tx_˙t
 = 0;

42 
MD_STATUS
 
	$i2ˇ0_ma°î_£nd
–
uöt8_t
 
_addr
, uöt8_à* 
_tx_buf
, 
uöt16_t
 
_tx_num
, uöt8_à
_waô
 )

44 
MD_STATUS
 
°©us
 = 
MD_OK
;

46 
IICAMK0
 = 1U;

49 if–1U =
IICBSY0
 )

51 
IICAMK0
 = 0U;

52 
°©us
 = 
MD_ERROR1
;

55 if––1U =
SPT0
 ) || ( 1U =
STT0
 ) )

57 
IICAMK0
 = 0U;

58 
°©us
 = 
MD_ERROR2
;

62 
STT0
 = 1U;

63 
IICAMK0
 = 0U;

66  
_waô
-- )

71 if–0U =
STD0
 )

73 
°©us
 = 
MD_ERROR3
;

77 
i2ˇ0_tx_˙t
 = 
_tx_num
;

78 
i2ˇ0_tx_pbuf
 = 
_tx_buf
;

79 
i2ˇ0_m°©us
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

80 
_addr
 &(
uöt8_t
)~0x01U;

81 
IICA0
 = 
_addr
;

84  ( 
°©us
 );

85 
	}
}

92 
MD_STATUS
 
	$i2ˇ0_ma°î_ªcv
–
uöt8_t
 
_addr
, uöt8_à* 
_rx_buf
, 
uöt16_t
 
_rx_num
, uöt8_à
_waô
 )

94 
MD_STATUS
 
°©us
 = 
MD_OK
;

97 #i‡!
TEST_EEP_NO_STOP


98 
IICAMK0
 = 1U;

101 if–1U =
IICBSY0
 )

103 
IICAMK0
 = 0U;

104 
°©us
 = 
MD_ERROR1
;

107 if––1U =
SPT0
 ) || ( 1U =
STT0
 ) )

109 
IICAMK0
 = 0U;

110 
°©us
 = 
MD_ERROR2
;

115 
STT0
 = 1U;

116 
IICAMK0
 = 0U;

119  
_waô
-- )

124 if–0U =
STD0
 )

126 
°©us
 = 
MD_ERROR3
;

130 
i2ˇ0_rx_˙t
 = 0U;

131 
i2ˇ0_rx_Àn
 = 
_rx_num
;

132 
i2ˇ0_rx_pbuf
 = 
_rx_buf
;

133 
i2ˇ0_m°©us
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

134 
_addr
 |= 0x01U;

135 
IICA0
 = 
_addr
;

138  ( 
°©us
 );

139 
	}
}

142 
i2ˇ0_ˇŒback_ma°î_îr‹
(
MD_STATUS
 
Êag
);

143 
i2ˇ0_ˇŒback_ma°î_ª˚ivìnd
();

144 
i2ˇ0_ˇŒback_ma°î_£ndíd
();

151 
	$i2ˇ0_ma°î_h™dÀr
( )

154 if––0U =
IICBSY0
 ) && ( 
i2ˇ0_tx_˙t
 != 0U ) )

156 
	`i2ˇ0_ˇŒback_ma°î_îr‹
–
MD_SPT
 );

161 if––
i2ˇ0_m°©us
 & 
_80_IICA_ADDRESS_COMPLETE
 ) == 0U )

163 if–1U =
ACKD0
 )

165 
i2ˇ0_m°©us
 |
_80_IICA_ADDRESS_COMPLETE
;

167 if–1U =
TRC0
 )

169 
WTIM0
 = 1U;

171 if–
i2ˇ0_tx_˙t
 > 0U )

173 
IICA0
 = *
i2ˇ0_tx_pbuf
;

174 
i2ˇ0_tx_pbuf
++;

175 
i2ˇ0_tx_˙t
--;

179 
	`i2ˇ0_ˇŒback_ma°î_£ndíd
();

184 
ACKE0
 = 1U;

185 
WTIM0
 = 0U;

186 
WREL0
 = 1U;

191 
	`i2ˇ0_ˇŒback_ma°î_îr‹
–
MD_NACK
 );

197 if–1U =
TRC0
 )

199 if––0U =
ACKD0
 ) && ( 
i2ˇ0_tx_˙t
 != 0U ) )

201 
	`i2ˇ0_ˇŒback_ma°î_îr‹
–
MD_NACK
 );

206 if–
i2ˇ0_tx_˙t
 > 0U )

208 
IICA0
 = *
i2ˇ0_tx_pbuf
;

209 
i2ˇ0_tx_pbuf
++;

210 
i2ˇ0_tx_˙t
--;

214 
	`i2ˇ0_ˇŒback_ma°î_£ndíd
();

221 if–
i2ˇ0_rx_˙t
 < 
i2ˇ0_rx_Àn
 )

223 *
i2ˇ0_rx_pbuf
 = 
IICA0
;

224 
i2ˇ0_rx_pbuf
++;

225 
i2ˇ0_rx_˙t
++;

227 if–
i2ˇ0_rx_˙t
 =
i2ˇ0_rx_Àn
 )

229 
ACKE0
 = 0U;

230 
WREL0
 = 1U;

231 
WTIM0
 = 1U;

235 
WREL0
 = 1U;

240 
	`i2ˇ0_ˇŒback_ma°î_ª˚ivìnd
();

245 
	}
}

252 
	$i2ˇ0_ˇŒback_ma°î_îr‹
–
MD_STATUS
 
Êag
 )

257 
	}
}

264 
	$i2ˇ0_ˇŒback_ma°î_ª˚ivìnd
( )

266 #i‡!
TEST_EEP_NO_STOP


267 
SPT0
 = 1U;

270 
	`HAL_TOF_SëRódProc
–
TOF_PROC_DONE
 );

271 
	}
}

278 
	$i2ˇ0_ˇŒback_ma°î_£ndíd
( )

280 #i‡!
TEST_EEP_NO_STOP


281 
SPT0
 = 1U;

284 
	`HAL_TOF_SëWrôeProc
–
TOF_PROC_DONE
 );

285 
	}
}

287 
__öãºu±
 
	$r_i2ˇ0_öãºu±
()

289 i‡((
IICS0
 & 
_80_IICA_STATUS_MASTER
) == 0x80U)

291 
	`i2ˇ0_ma°î_h™dÀr
();

293 
	}
}

303 
MD_STATUS
 
	$i2ˇ1_ma°î_£nd
–
uöt8_t
 
_addr
, uöt8_à* 
_tx_buf
, 
uöt16_t
 
_tx_num
, uöt8_à
_waô
 )

305 
MD_STATUS
 
°©us
 = 
MD_OK
;

308 
IICAMK1
 = 1U;

311 if–1U =
IICBSY1
 )

313 
IICAMK1
 = 0U;

314 
°©us
 = 
MD_ERROR1
;

317 if––1U =
SPT1
 ) || ( 1U =
STT1
 ) )

319 
IICAMK1
 = 0U;

320 
°©us
 = 
MD_ERROR2
;

324 
STT1
 = 1U;

325 
IICAMK1
 = 0U;

328  
_waô
-- )

333 if–0U =
STD1
 )

335 
°©us
 = 
MD_ERROR3
;

339 
i2ˇ1_tx_˙t
 = 
_tx_num
;

340 
i2ˇ1_tx_pbuf
 = 
_tx_buf
;

341 
i2ˇ1_m°©us
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

342 
_addr
 &(
uöt8_t
)~0x01U;

343 
IICA1
 = 
_addr
;

346  ( 
°©us
 );

347 
	}
}

354 
MD_STATUS
 
	$i2ˇ1_ma°î_ªcv
–
uöt8_t
 
_addr
, uöt8_à* 
_rx_buf
, 
uöt16_t
 
_rx_num
, uöt8_à
_waô
 )

356 
MD_STATUS
 
°©us
 = 
MD_OK
;

358 
IICAMK1
 = 1U;

361 if–1U =
IICBSY1
 )

363 
IICAMK1
 = 0U;

364 
°©us
 = 
MD_ERROR1
;

367 if––1U =
SPT1
 ) || ( 1U =
STT1
 ) )

369 
IICAMK1
 = 0U;

370 
°©us
 = 
MD_ERROR2
;

374 
STT1
 = 1U;

375 
IICAMK1
 = 0U;

378  
_waô
-- )

383 if–0U =
STD1
 )

385 
°©us
 = 
MD_ERROR3
;

389 
i2ˇ1_rx_˙t
 = 0U;

390 
i2ˇ1_rx_Àn
 = 
_rx_num
;

391 
i2ˇ1_rx_pbuf
 = 
_rx_buf
;

392 
i2ˇ1_m°©us
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

393 
_addr
 |= 0x01U;

394 
IICA1
 = 
_addr
;

397  ( 
°©us
 );

398 
	}
}

401 
i2ˇ1_ˇŒback_ma°î_îr‹
(
MD_STATUS
 
Êag
);

402 
i2ˇ1_ˇŒback_ma°î_ª˚ivìnd
();

403 
i2ˇ1_ˇŒback_ma°î_£ndíd
();

410 
	$i2ˇ1_ma°î_h™dÀr
( )

413 if––0U =
IICBSY1
 ) && ( 
i2ˇ1_tx_˙t
 != 0U ) )

415 
	`i2ˇ1_ˇŒback_ma°î_îr‹
–
MD_SPT
 );

420 if––
i2ˇ1_m°©us
 & 
_80_IICA_ADDRESS_COMPLETE
 ) == 0U )

422 if–1U =
ACKD1
 )

424 
i2ˇ1_m°©us
 |
_80_IICA_ADDRESS_COMPLETE
;

426 if–1U =
TRC1
 )

428 
WTIM1
 = 1U;

430 if–
i2ˇ1_tx_˙t
 > 0U )

432 
IICA1
 = *
i2ˇ1_tx_pbuf
;

433 
i2ˇ1_tx_pbuf
++;

434 
i2ˇ1_tx_˙t
--;

438 
	`i2ˇ1_ˇŒback_ma°î_£ndíd
();

443 
ACKE1
 = 1U;

444 
WTIM1
 = 0U;

445 
WREL1
 = 1U;

450 
	`i2ˇ1_ˇŒback_ma°î_îr‹
–
MD_NACK
 );

456 if–1U =
TRC1
 )

458 if––0U =
ACKD1
 ) && ( 
i2ˇ1_tx_˙t
 != 0U ) )

460 
	`i2ˇ1_ˇŒback_ma°î_îr‹
–
MD_NACK
 );

464 if–
i2ˇ1_tx_˙t
 > 0U )

466 
IICA1
 = *
i2ˇ1_tx_pbuf
;

467 
i2ˇ1_tx_pbuf
++;

468 
i2ˇ1_tx_˙t
--;

472 
	`i2ˇ1_ˇŒback_ma°î_£ndíd
();

479 if–
i2ˇ1_rx_˙t
 < 
i2ˇ1_rx_Àn
 )

481 *
i2ˇ1_rx_pbuf
 = 
IICA1
;

482 
i2ˇ1_rx_pbuf
++;

483 
i2ˇ1_rx_˙t
++;

485 if–
i2ˇ1_rx_˙t
 =
i2ˇ1_rx_Àn
 )

487 
ACKE1
 = 0U;

488 
WREL1
 = 1U;

489 
WTIM1
 = 1U;

493 
WREL1
 = 1U;

498 
	`i2ˇ1_ˇŒback_ma°î_ª˚ivìnd
();

503 
	}
}

510 
	$i2ˇ1_ˇŒback_ma°î_îr‹
–
MD_STATUS
 
Êag
 )

515 
	}
}

522 
	$i2ˇ1_ˇŒback_ma°î_ª˚ivìnd
( )

524 
SPT1
 = 1U;

528 
	}
}

535 
	$i2ˇ1_ˇŒback_ma°î_£ndíd
( )

537 
SPT1
 = 1U;

541 
	}
}

543 
__öãºu±
 
	$r_i2ˇ1_öãºu±
()

545 i‡((
IICS1
 & 
_80_IICA_STATUS_MASTER
) == 0x80U)

547 
	`i2ˇ1_ma°î_h™dÀr
();

549 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_i2c.h

2 #i‚de‡
__HAL_I2C_H__


3 
	#__HAL_I2C_H__


	)

6 
	~"r_cg_ma¸odrivî.h
"

7 
	~"¥j_ty≥.h
"

20 
MD_STATUS
 
i2ˇ0_ma°î_£nd
–
uöt8_t
 
_addr
, uöt8_à* 
_tx_buf
, 
uöt16_t
 
_tx_num
, uöt8_à
_waô
 );

27 
MD_STATUS
 
i2ˇ0_ma°î_ªcv
–
uöt8_t
 
_addr
, uöt8_à* 
_rx_buf
, 
uöt16_t
 
_rx_num
, uöt8_à
_waô
 );

35 
MD_STATUS
 
i2ˇ1_ma°î_£nd
–
uöt8_t
 
_addr
, uöt8_à* 
_tx_buf
, 
uöt16_t
 
_tx_num
, uöt8_à
_waô
 );

42 
MD_STATUS
 
i2ˇ1_ma°î_ªcv
–
uöt8_t
 
_addr
, uöt8_à* 
_rx_buf
, 
uöt16_t
 
_rx_num
, uöt8_à
_waô
 );

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_serial.c

1 
	#CONFIG_UART_0
 0

	)

2 
	#CONFIG_UART_1
 1

	)

3 
	#CONFIG_UART_2
 0

	)

4 
	#CONFIG_UART_3
 0

	)

7 #i‡
CONFIG_UART_0


8 #¥agm®
öãºu±
 
INTST0
 
r_u¨t0_öãºu±_£nd


9 #¥agm®
öãºu±
 
INTSR0
 
r_u¨t0_öãºu±_ª˚ive


13 #i‡
CONFIG_UART_1


14 #¥agm®
öãºu±
 
INTST1
 
r_u¨t1_öãºu±_£nd


15 #¥agm®
öãºu±
 
INTSR1
 
r_u¨t1_öãºu±_ª˚ive


19 #i‡
CONFIG_UART_2


20 #¥agm®
öãºu±
 
INTST2
 
r_u¨t2_öãºu±_£nd


21 #¥agm®
öãºu±
 
INTSR2
 
r_u¨t2_öãºu±_ª˚ive


25 #i‡
CONFIG_UART_3


26 #¥agm®
öãºu±
 
INTST3
 
r_u¨t3_öãºu±_£nd


27 #¥agm®
öãºu±
 
INTSR3
 
r_u¨t3_öãºu±_ª˚ive


31 
	~"hw.h
"

32 
	~"hÆ_£rül.h
"

33 
	~<°rög.h
>

34 
	~"timî.h
"

58 
	#UART0_RX_TIME_STAMP
 100

	)

59 
	#UART1_RX_TIME_STAMP
 10

	)

60 
	#UART2_RX_TIME_STAMP
 10

	)

61 
	#UART3_RX_TIME_STAMP
 10

	)

64 #i‡
CONFIG_UART_0


65 
U8
 
	gªcv_0_buf
[ 
MAX_COMM_0_RX_BUF_SZ
 ];

66 
U8
 
	g£nd_0_buf
[ 
MAX_COMM_0_TX_BUF_SZ
 ];

68 
U8
 
	gªcv_0_buf
[ 1 ];

69 
U8
 
	g£nd_0_buf
[ 1 ];

72 #i‡
CONFIG_UART_1


73 
U8
 
	gªcv_1_buf
[ 
MAX_COMM_1_RX_BUF_SZ
 ];

74 
U8
 
	g£nd_1_buf
[ 
MAX_COMM_1_TX_BUF_SZ
 ];

76 
U8
 
	gªcv_1_buf
[ 1 ];

77 
U8
 
	g£nd_1_buf
[ 1 ];

80 #i‡
CONFIG_UART_2


81 
U8
 
	gªcv_2_buf
[ 
MAX_COMM_2_RX_BUF_SZ
 ];

82 
U8
 
	g£nd_2_buf
[ 
MAX_COMM_2_TX_BUF_SZ
 ];

84 
U8
 
	gªcv_2_buf
[ 1 ];

85 
U8
 
	g£nd_2_buf
[ 1 ];

88 #i‡
CONFIG_UART_3


89 
U8
 
	gªcv_3_buf
[ 
MAX_COMM_3_RX_BUF_SZ
 ];

90 
U8
 
	g£nd_3_buf
[ 
MAX_COMM_3_TX_BUF_SZ
 ];

92 
U8
 
	gªcv_3_buf
[ 1 ];

93 
U8
 
	g£nd_3_buf
[ 1 ];

96 
	s_comm_


98 
I16
 
	mªcv_Àn
;

99 
I16
 
	m£nd_Àn
;

100 
I16
 
	mtx_Àn
;

101 } 
	tcomm_t
;

102 
comm_t
 
	gcomm
[ 
MAX_COMM_ID
 ];

105 
	$HAL_InôCommId
–
U8
 
u¨t_id
 )

107 if–
u¨t_id
 =
COMM_ID_UART_0
 )

109 #i‡
CONFIG_UART_0


110 
	`MEMSET
–(
__FAR
 *)&
ªcv_0_buf
[0], 0, 
MAX_COMM_0_RX_BUF_SZ
 );

111 
	`MEMSET
–(
__FAR
 *)&
£nd_0_buf
[0], 0, 
MAX_COMM_0_TX_BUF_SZ
 );

114 if–
u¨t_id
 =
COMM_ID_UART_1
 )

116 #i‡
CONFIG_UART_1


117 
	`MEMSET
–(
__FAR
 *)&
ªcv_1_buf
[0], 0, 
MAX_COMM_1_RX_BUF_SZ
 );

118 
	`MEMSET
–(
__FAR
 *)&
£nd_1_buf
[0], 0, 
MAX_COMM_1_TX_BUF_SZ
 );

121 if–
u¨t_id
 =
COMM_ID_UART_2
)

123 #i‡
CONFIG_UART_2


124 
	`MEMSET
–(
__FAR
 *)&
ªcv_2_buf
[0], 0, 
MAX_COMM_2_RX_BUF_SZ
 );

125 
	`MEMSET
–(
__FAR
 *)&
£nd_2_buf
[0], 0, 
MAX_COMM_2_TX_BUF_SZ
 );

130 #i‡
CONFIG_UART_3


131 
	`MEMSET
–(
__FAR
 *)&
ªcv_3_buf
[0], 0, 
MAX_COMM_3_RX_BUF_SZ
 );

132 
	`MEMSET
–(
__FAR
 *)&
£nd_3_buf
[0], 0, 
MAX_COMM_3_TX_BUF_SZ
 );

136 
	`MEMSET
–(
__FAR
 *)&
comm
[ 
u¨t_id
 ], 0, –
comm_t
 ) );

137 
	}
}

139 
	$HAL_InôComm
( )

141 #i‡
CONFIG_UART_0


142 
	`HAL_InôCommId
–
COMM_ID_UART_0
 );

143 
	`R_UART0_Sèπ
();

146 #i‡
CONFIG_UART_1


147 
	`HAL_InôCommId
–
COMM_ID_UART_1
 );

148 
	`R_UART1_Sèπ
();

151 #i‡
CONFIG_UART_2


152 
	`HAL_InôCommId
–
COMM_ID_UART_2
 );

153 
	`R_UART2_Sèπ
();

156 #i‡
CONFIG_UART_3


157 
	`HAL_InôCommId
–
COMM_ID_UART_3
 );

158 
	`R_UART3_Sèπ
();

161 
	}
}

163 
I16
 
	$HAL_GëMaxRecvBuf„rLígth
(
U8
 
u¨t_id
)

165 if–
u¨t_id
 == 0 )

167  
MAX_COMM_0_RX_BUF_SZ
;

169 if–
u¨t_id
 == 1 )

171  
MAX_COMM_1_RX_BUF_SZ
;

173 if–
u¨t_id
 == 2 )

175  
MAX_COMM_2_RX_BUF_SZ
;

178  
MAX_COMM_3_RX_BUF_SZ
;

179 
	}
}

181 
U8
 
	$HAL_IsFuŒRecvBuf„r
–
U8
 
u¨t_id
 )

183 if–
comm
[ 
u¨t_id
 ].
ªcv_Àn
 >
	`HAL_GëMaxRecvBuf„rLígth
( uart_id ) )

185  
TRUE
;

188  
FALSE
;

189 
	}
}

191 
U8
 
	$HAL_IsEm±yRecvBuf„r
–
U8
 
u¨t_id
 )

193 if–
comm
[ 
u¨t_id
 ].
ªcv_Àn
 > 0 )

195  
FALSE
;

198  
TRUE
;

200 
	}
}

202 
I16
 
	$HAL_GëMaxSídBuf„rLígth
(
U8
 
u¨t_id
)

204 if–
u¨t_id
 == 0 )

206  
MAX_COMM_0_TX_BUF_SZ
;

208 if–
u¨t_id
 == 1 )

210  
MAX_COMM_1_TX_BUF_SZ
;

212 if–
u¨t_id
 == 2 )

214  
MAX_COMM_2_TX_BUF_SZ
;

217  
MAX_COMM_3_TX_BUF_SZ
;

218 
	}
}

220 
U8
 
	$HAL_IsFuŒSídBuf„r
–
U8
 
u¨t_id
 )

222 if–
comm
[ 
u¨t_id
 ].
£nd_Àn
 >
	`HAL_GëMaxSídBuf„rLígth
( uart_id ) )

224  
TRUE
;

227  
FALSE
;

228 
	}
}

230 
	$HAL_InôRecvLígth
(
U8
 
u¨t_id
 )

232 
comm
[ 
u¨t_id
 ].
ªcv_Àn
 = 0;

233 
	}
}

235 
I16
 
	$HAL_GëRecvLígth
–
U8
 
u¨t_id
 )

237  
comm
[ 
u¨t_id
 ].
ªcv_Àn
;

238 
	}
}

240 
I16
 
	$HAL_GëSídLígth
–
U8
 
u¨t_id
 )

242  
comm
[ 
u¨t_id
].
£nd_Àn
;

243 
	}
}

246 
	$HAL_SëRecvBuf„r
(
U8
 
u¨t_id
, U8 
_byã
 )

248 
comm_t
 *
p_comm
;

250 
p_comm
 = &
comm
[ 
u¨t_id
 ];

251 if–
u¨t_id
 =
COMM_ID_UART_0
 )

253 
ªcv_0_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

255 if–
u¨t_id
 =
COMM_ID_UART_1
 )

257 
ªcv_1_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

259 if–
u¨t_id
 =
COMM_ID_UART_2
)

261 
ªcv_2_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

265 
ªcv_3_buf
[ 
p_comm
->
ªcv_Àn
 ] = 
_byã
;

267 
p_comm
->
ªcv_Àn
++;

269 
	}
}

271 
U8
 
	$HAL_GëRecvBuf„r
–
U8
 
u¨t_id
, 
U16
 
ödex
 )

273 if–
u¨t_id
 =
COMM_ID_UART_0
 )

275  
ªcv_0_buf
[ 
ödex
 ];

277 if–
u¨t_id
 =
COMM_ID_UART_1
 )

279  
ªcv_1_buf
[ 
ödex
 ];

281 if–
u¨t_id
 =
COMM_ID_UART_2
)

283  
ªcv_2_buf
[ 
ödex
 ];

287  
ªcv_3_buf
[ 
ödex
 ];

289 
	}
}

292 
	$HAL_SëSídBuf„r
–
U8
 
u¨t_id
, U8 
_byã
 )

294 
comm_t
 *
p_comm
;

296 if–
	`HAL_IsFuŒSídBuf„r
–
u¨t_id
 ) =
FALSE
 )

298 
p_comm
 = &
comm
[ 
u¨t_id
 ];

299 if–
u¨t_id
 =
COMM_ID_UART_0
 )

301 
£nd_0_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

303 if–
u¨t_id
 =
COMM_ID_UART_1
 )

305 
£nd_1_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

307 if–
u¨t_id
 =
COMM_ID_UART_2
)

309 
£nd_2_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

313 
£nd_3_buf
[ 
p_comm
->
£nd_Àn
 ] = 
_byã
;

315 
p_comm
->
£nd_Àn
++;

317 
	}
}

319 
U8
 
	$HAL_GëSídBuf„r
–
U8
 
u¨t_id
, 
U16
 
ödex
 )

321 if–
u¨t_id
 =
COMM_ID_UART_0
 )

323  
£nd_0_buf
[
ödex
];

325 if–
u¨t_id
 =
COMM_ID_UART_1
 )

327  
£nd_1_buf
[
ödex
];

329 if–
u¨t_id
 =
COMM_ID_UART_2
)

331  
£nd_2_buf
[
ödex
];

335  
£nd_3_buf
[
ödex
];

337 
	}
}

340 
	$HAL_SídByã
–
U8
 
u¨t_id
 )

342 
U8
 
ch
;

343 
comm_t
 *
p_comm
;

346 
p_comm
 = &
comm
[ 
u¨t_id
 ];

347 if–
u¨t_id
 =
COMM_ID_UART_0
 )

349 
ch
 = 
£nd_0_buf
[
p_comm
->
tx_Àn
];

351 if–
u¨t_id
 =
COMM_ID_UART_1
 )

353 
ch
 = 
£nd_1_buf
[
p_comm
->
tx_Àn
];

355 if–
u¨t_id
 =
COMM_ID_UART_2
)

357 
ch
 = 
£nd_2_buf
[
p_comm
->
tx_Àn
];

361 
ch
 = 
£nd_3_buf
[
p_comm
->
tx_Àn
];

364 
p_comm
->
tx_Àn
++;

366 if–
u¨t_id
 =
COMM_ID_UART_0
 )

368 #i‡
CONFIG_UART_0


369 
TXD0
 = 
ch
;

372 if–
u¨t_id
 =
COMM_ID_UART_1
 )

374 #i‡
CONFIG_UART_1


375 
TXD1
 = 
ch
;

378 if–
u¨t_id
 =
COMM_ID_UART_2
 )

380 #i‡
CONFIG_UART_2


381 
TXD2
 = 
ch
;

384 if–
u¨t_id
 =
COMM_ID_UART_3
 )

386 #i‡
CONFIG_UART_3


387 
TXD3
 = 
ch
;

390 
	}
}

392 
U8
 
	$IsCom∂ëeTx
–
U8
 
u¨t_id
 )

394 if–
comm
[
u¨t_id
].
tx_Àn
 < comm[ u¨t_id ].
£nd_Àn
 )

396  
FALSE
;

399  
TRUE
;

401 
	}
}

406 #i‡
CONFIG_UART_0


407 
__öãºu±
 
	$r_u¨t0_öãºu±_ª˚ive
()

409 vﬁ©ûê
U8
 
îr_ty≥
;

410 vﬁ©ûê
U8
 
rx_d©a
;

413 
îr_ty≥
 = (
uöt8_t
)(
SSR01
 & 0x0007U);

414 
SIR01
 = (
uöt16_t
)
îr_ty≥
;

416 
rx_d©a
 = 
RXD0
;

418 if–
îr_ty≥
 == 0 )

420 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_UART_0
 ) =
FALSE
 )

422 
	`HAL_SëRecvBuf„r
–
COMM_ID_UART_0
, 
rx_d©a
 );

426 
	`HAL_InôCommId
–
COMM_ID_UART_0
 );

429 
	`SèπTimî
–
TIMER_ID_COMM_COMP_RX
, 
UART0_RX_TIME_STAMP
 );

431 
	}
}

433 
__öãºu±
 
	$r_u¨t0_öãºu±_£nd
()

435 if–
	`IsCom∂ëeTx
–
COMM_ID_UART_0
 ) =
FALSE
 )

437 
	`HAL_SídByã
–
COMM_ID_UART_0
 );

441 
	`HAL_InôCommId
–
COMM_ID_UART_0
 );

443 
	}
}

447 #i‡
CONFIG_UART_1


448 
__öãºu±
 
	$r_u¨t1_öãºu±_ª˚ive
()

451 vﬁ©ûê
U8
 
rx_d©a
;

452 vﬁ©ûê
U8
 
îr_ty≥
;

454 
îr_ty≥
 = (
U8
)(
SSR03
 & 0x0007U);

455 
SIR03
 = (
U16
)
îr_ty≥
;

457 
rx_d©a
 = 
RXD1
;

459 if–
îr_ty≥
 == 0 )

461 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_UART_1
 ) =
FALSE
 )

463 
	`HAL_SëRecvBuf„r
–
COMM_ID_UART_1
, 
rx_d©a
 );

467 
	`HAL_InôCommId
–
COMM_ID_UART_1
 );

471 
	`SèπTimî
–
TIMER_ID_COMM_UART_1_RX
, 
UART1_RX_TIME_STAMP
 );

473 
	}
}

475 
__öãºu±
 
	$r_u¨t1_öãºu±_£nd
()

478 if–
	`IsCom∂ëeTx
–
COMM_ID_UART_1
 ) =
FALSE
 )

480 
	`HAL_SídByã
–
COMM_ID_UART_1
 );

484 
	`HAL_InôCommId
–
COMM_ID_UART_1
 );

487 
	}
}

491 #i‡
CONFIG_UART_2


492 
U16
 
	gthe_rx_îr_cou¡
 = 0;

493 
__öãºu±
 
	$r_u¨t2_öãºu±_ª˚ive
()

495 vﬁ©ûê
U8
 
îr_ty≥
;

496 vﬁ©ûê
U8
 
rx_d©a
;

498 
îr_ty≥
 = (
uöt8_t
)(
SSR11
 & 0x0007U);

499 
SIR11
 = (
uöt16_t
)
îr_ty≥
;

501 
rx_d©a
 = 
RXD2
;

503 
	`EI
();

504 if–
îr_ty≥
 == 0 )

506 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_UART_2
 ) =
FALSE
 )

508 
	`HAL_SëRecvBuf„r
–
COMM_ID_UART_2
, 
rx_d©a
 );

512 
	`HAL_InôCommId
–
COMM_ID_UART_2
 );

515 
	`SèπTimî
–
TIMER_ID_COMM_FRONT_RX
, 
UART2_RX_TIME_STAMP
 );

519 
the_rx_îr_cou¡
++;

521 
	}
}

523 
__öãºu±
 
	$r_u¨t2_öãºu±_£nd
()

525 
	`EI
();

526 if–
	`IsCom∂ëeTx
–
COMM_ID_UART_2
 ) =
FALSE
 )

528 
	`HAL_SídByã
–
COMM_ID_UART_2
 );

532 
	`HAL_InôCommId
–
COMM_ID_UART_2
 );

534 
	}
}

539 #i‡
CONFIG_UART_3


540 
U16
 
	gthe_i§_îr_cou¡
 = 0;

541 
__öãºu±
 
	$r_u¨t3_öãºu±_ª˚ive
()

543 vﬁ©ûê
U8
 
îr_ty≥
;

544 vﬁ©ûê
U8
 
rx_d©a
;

546 
îr_ty≥
 = (
uöt8_t
)(
SSR13
 & 0x0007U);

547 
SIR13
 = (
uöt16_t
)
îr_ty≥
;

549 
rx_d©a
 = 
RXD3
;

551 if–
îr_ty≥
 == 0 )

553 if–
	`HAL_IsFuŒRecvBuf„r
–
COMM_ID_UART_3
 ) =
FALSE
 )

555 
	`HAL_SëRecvBuf„r
–
COMM_ID_UART_3
, 
rx_d©a
 );

559 
	`HAL_InôCommId
–
COMM_ID_UART_3
 );

562 
	`SèπTimî
–
TIMER_ID_COMM_EOL_RX
, 
UART3_RX_TIME_STAMP
 );

566 
the_i§_îr_cou¡
++;

568 
	}
}

571 
__öãºu±
 
	$r_u¨t3_öãºu±_£nd
()

573 if–
	`IsCom∂ëeTx
–
COMM_ID_UART_3
 ) =
FALSE
 )

575 
	`HAL_SídByã
–
COMM_ID_UART_3
 );

579 
	`HAL_InôCommId
–
COMM_ID_UART_3
 );

581 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_serial.h

1 #i‚de‡
__HAL_SERIAL_H__


2 
	#__HAL_SERIAL_H__


	)

4 
	~"¥j_ty≥.h
"

7 
	#COMM_ID_UART_0
 0

	)

8 
	#COMM_ID_UART_1
 1

	)

9 
	#COMM_ID_UART_2
 2

	)

10 
	#COMM_ID_UART_3
 3

	)

11 
	#MAX_COMM_ID
 4

	)

14 
	#MAX_COMM_0_RX_BUF_SZ
 30

	)

15 
	#MAX_COMM_0_TX_BUF_SZ
 30

	)

17 
	#MAX_COMM_1_RX_BUF_SZ
 40

	)

18 
	#MAX_COMM_1_TX_BUF_SZ
 40

	)

20 
	#MAX_COMM_2_RX_BUF_SZ
 128

	)

21 
	#MAX_COMM_2_TX_BUF_SZ
 128

	)

23 
	#MAX_COMM_3_RX_BUF_SZ
 255

	)

24 
	#MAX_COMM_3_TX_BUF_SZ
 255

	)

26 
	#MAX_COMM_RX_BUF_SZ
 255

	)

27 
	#MAX_COMM_TX_BUF_SZ
 255

	)

31 
HAL_InôCommId
–
U8
 
u¨t_id
 );

32 
HAL_InôComm
( );

34 
U8
 
HAL_IsFuŒRecvBuf„r
–U8 
u¨t_id
 );

35 
U8
 
HAL_IsEm±yRecvBuf„r
–U8 
u¨t_id
 );

36 
U8
 
HAL_IsFuŒSídBuf„r
–U8 
u¨t_id
 );

38 
HAL_InôRecvLígth
(
U8
 
u¨t_id
 );

39 
I16
 
HAL_GëRecvLígth
–
U8
 
u¨t_id
 );

40 
I16
 
HAL_GëSídLígth
–
U8
 
u¨t_id
 );

42 
HAL_SëRecvBuf„r
(
U8
 
u¨t_id
, U8 
_byã
 );

43 
U8
 
HAL_GëRecvBuf„r
–U8 
u¨t_id
, 
U16
 
ödex
 );

45 
HAL_SëSídBuf„r
–
U8
 
u¨t_id
, U8 
_byã
 );

46 
U8
 
HAL_GëSídBuf„r
–U8 
u¨t_id
, 
U16
 
ödex
 );

48 
HAL_SídByã
–
U8
 
u¨t_id
 );

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hw.h

1 #i‚de‡
__HW__H__


2 
	#__HW__H__


	)

4 
	~"mcu.h
"

5 
	~"r_cg_cgc.h
"

6 
	~"r_cg_p‹t.h
"

7 
	~"r_cg_wdt.h
"

8 
	~"r_cg_timî.h
"

10 
	~"r_cg_£rül.h
"

11 
	~"r_cg_ötc.h
"

12 
	~"r_cg_ma¸odrivî.h
"

26 
	#RESET_WDT
(Ë
	`R_WDT_Re°¨t
()

	)

28 
	#TOF_GPIO_OUT_1
 
P7
.3

	)

29 
	#TURN_ON_TOF_1
(Ëdo{ 
TOF_GPIO_OUT_1
 = 1; }0)

	)

30 
	#TURN_OFF_TOF_1
(Ëdo{ 
TOF_GPIO_OUT_1
 = 0; }0)

	)

32 
	#TOF_GPIO_OUT_2
 
P7
.2

	)

33 
	#TURN_ON_TOF_2
(Ëdo{ 
TOF_GPIO_OUT_2
 = 1; }0)

	)

34 
	#TURN_OFF_TOF_2
(Ëdo{ 
TOF_GPIO_OUT_2
 = 0; }0)

	)

36 
	#TOF_GPIO_OUT_3
 
P7
.1

	)

37 
	#TURN_ON_TOF_3
(Ëdo{ 
TOF_GPIO_OUT_3
 = 1; }0)

	)

38 
	#TURN_OFF_TOF_3
(Ëdo{ 
TOF_GPIO_OUT_3
 = 0; }0)

	)

40 
	#TOF_GPIO_OUT_4
 
P7
.0

	)

41 
	#TURN_ON_TOF_4
(Ëdo{ 
TOF_GPIO_OUT_4
 = 1; }0)

	)

42 
	#TURN_OFF_TOF_4
(Ëdo{ 
TOF_GPIO_OUT_4
 = 0; }0)

	)

44 
	#TOF_GPIO_OUT_5
 
P5
.0

	)

45 
	#TURN_ON_TOF_5
(Ëdo{ 
TOF_GPIO_OUT_5
 = 1; }0)

	)

46 
	#TURN_OFF_TOF_5
(Ëdo{ 
TOF_GPIO_OUT_5
 = 0; }0)

	)

48 
	#TOF_GPIO_OUT_6
 
P1
.7

	)

49 
	#TURN_ON_TOF_6
(Ëdo{ 
TOF_GPIO_OUT_6
 = 1; }0)

	)

50 
	#TURN_OFF_TOF_6
(Ëdo{ 
TOF_GPIO_OUT_6
 = 0; }0)

	)

52 
	#TOF_GPIO_OUT_7
 
P1
.5

	)

53 
	#TURN_ON_TOF_7
(Ëdo{ 
TOF_GPIO_OUT_7
 = 1; }0)

	)

54 
	#TURN_OFF_TOF_7
(Ëdo{ 
TOF_GPIO_OUT_7
 = 0; }0)

	)

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\mcu.h

1 #i‚de‡
__MCU_H__


2 
	#__MCU_H__


	)

4 
	~"r_cg_ma¸odrivî.h
"

6 
	~"¥j_ty≥.h
"

8 
	~"c⁄fig.h
"

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\main.c

1 
	~"hw.h
"

2 
	~"mcu.h
"

4 
	~"hw.h
"

5 
	~"timî.h
"

6 
	~"utû.h
"

7 
	~"ì¥om.h
"

8 
	~"tof.h
"

9 
	~"∑r£r.h
"

10 
	~"¥o˚ss_sys_evít.h
"

13 
	$InôSèπTimîs
( )

15 
	`InôTimî
();

17 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

18 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

19 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

20 
	`SèπTimî
–
TIMER_ID_TOF
, 
	`SEC
(5));

21 
	}
}

24 
	$maö
( )

26 
	`Dñay_MS
( 500 );

28 
	`R_WDT_Re°¨t
();

30 
	`InôSy°em
();

31 
	`InôSèπTimîs
();

32 
	`EI
();

35 
	`R_WDT_Re°¨t
();

39 
	`InôToF
();

43 
	`R_WDT_Re°¨t
();

45 
	`Pro˚ssEvítH™dÀr
();

48 
	`RecvPackëH™dÀr
();

49 
	`SídPackëH™dÀr
();

51 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\prj_type.h

1 #i‚de‡
__PRJ_TYPE_H__


2 
	#__PRJ_TYPE_H__


	)

4 
	~"c⁄fig.h
"

5 
	~<°dio.h
>

6 
	~<°rög.h
>

8 #i‚de‡
__TYPEDEF_COWAY__


9 
	#__TYPEDEF_COWAY__


	)

10 
	tU8
;

11 sig√d 
	tI8
;

12 
	tU16
;

13 sig√d 
	tI16
;

14 
	tU32
;

15 sig√d 
	tI32
;

16 
	tF32
;

17 
	tBOOL_T
;

18 
	tTIME_T
;

20 
	tTEMP_T
;

21 
	tRPS_T
;

24 
	tuöt8_t
;

25 sig√d 
	töt8_t
;

26 
	tuöt16_t
;

27 sig√d 
	töt16_t
;

28 
	tuöt32_t
;

29 sig√d 
	töt32_t
;

33 
	#__DEBUG__
 1

	)

35 #i‡
__DEBUG__


36 
	#LOCAL


	)

38 
	#LOCAL
 

	)

41 #ifde‡
NULL


42 #unde‡
NULL


45 
	#NULL
 ((*)0)

	)

47 #ifde‡
TRUE


48 #unde‡
TRUE


51 
	#TRUE
 1

	)

53 #ifde‡
FALSE


54 #unde‡
FALSE


57 
	#FALSE
 0

	)

60 #ifde‡
ON


61 #unde‡
ON


64 
	#ON
 1

	)

66 #ifde‡
OFF


67 #unde‡
OFF


70 
	#OFF
 0

	)

72 
	#HIGH
 1

	)

73 
	#LOW
 0

	)

77 #i‡(
CONFIG_FOTA_LIB
 == 0)

78 
	#__FAR


	)

79 
	#SPRINTF
 
•rötf


	)

80 
	#MEMSET
 
mem£t


	)

81 
	#MEMCPY
 
mem˝y


	)

82 
	#ATOI
 
©oi


	)

84 
	#__FAR
 
__Ár


	)

85 
	#SPRINTF
 
•rötf_f


	)

86 
	#MEMSET
 
mem£t_f


	)

87 
	#MEMCPY
 
mem˝y_f


	)

88 
	#ATOI
 
©oi_f


	)

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\process_sys_event.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~"¥j_ty≥.h
"

5 
	~"timî.h
"

6 
	~"hÆ_£rül.h
"

7 
	~"tof.h
"

8 
	~"∑r£r.h
"

9 
	~"∑r£r_tof.h
"

10 
	~"¥o˚ss_sys_evít.h
"

13 (*
	tA˘i⁄_T
)();

14 
	s_sys_evít_


16 
U8
 
timîId
;

17 
A˘i⁄_T
 
pFun
;

18 
A˘i⁄_T
 
pFun_FCT
;

19 
A˘i⁄_T
 
pFun_EOL
;

20 } 
	tSysEvít_T
;

23 
	`Evt_1ms_H™dÀr
( );

24 
	`Evt_10ms_H™dÀr
( );

25 
	`Evt_100ms_H™dÀr
( );

26 
	`Evt_tof_H™dÀr
( );

28 c⁄° 
SysEvít_T
 
SysEvítLi°
[] =

31 { 
TIMER_ID_1MS
, 
Evt_1ms_H™dÀr
, 
NULL
, NULL },

32 { 
TIMER_ID_10MS
, 
Evt_10ms_H™dÀr
, 
NULL
, NULL },

33 { 
TIMER_ID_100MS
, 
Evt_100ms_H™dÀr
, 
NULL
, NULL },

34 { 
TIMER_ID_TOF
, 
Evt_tof_H™dÀr
, 
NULL
, NULL },

35 
	}
};

36 
	#SZ_LIST
 ( –
SysEvítLi°
 ) / –
SysEvít_T
 ) )

	)

38 
	$Pro˚ssEvítH™dÀr
( )

40 
U8
 
i
;

41 
A˘i⁄_T
 
fun
;

43  
i
 = 0; i < 
SZ_LIST
 ; i++ )

45 if–
	`IsExpúedTimî
–
SysEvítLi°
[ 
i
 ].
timîId
 ) =
TIMER_EXPIRE
 )

48 
	`DißbÀTimî
–
SysEvítLi°
[ 
i
 ].
timîId
 );

64 
fun
 = 
SysEvítLi°
[ 
i
 ].
pFun
;

68 if–
fun
 !
NULL
 )

70 
	`fun
();

74 
	}
}

76 
	$Evt_1ms_H™dÀr
( )

78 
	`SèπTimî
–
TIMER_ID_1MS
, 1);

81 
	}
}

84 
	$Evt_10ms_H™dÀr
( )

86 
	`SèπTimî
–
TIMER_ID_10MS
, 10);

88 
	`Pro˚ssToF
();

89 
	}
}

92 
	$Evt_100ms_H™dÀr
()

94 
	`SèπTimî
–
TIMER_ID_100MS
, 100);

96 
	}
}

99 
U8
 
	gthe_ønge_id
 = 0;

100 
U32
 
	gdbg_dñay
 = 0;

101 
U8
 
	gdbg_°¨t
 = 0;

102 
	$Evt_tof_H™dÀr
( )

104 if–
dbg_°¨t
 )

107 
	`SèπR™ge
–
the_ønge_id
++ );

109 if–
the_ønge_id
 >
MAX_TOF_ID
 )

111 
the_ønge_id
 = 0;

115 
	`SèπTimî
–
TIMER_ID_TOF
, 
dbg_dñay
 );

116 
	}
}

119 
	$TimîI§CÆlback
()

122 
	}
}

124 
	$InôSy°em
()

127 
	`HAL_InôComm
();

129 
	`Regi°îTimîISR
–
TimîI§CÆlback
 );

130 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\process_sys_event.h

1 #i‚de‡
__PROCESS_SYS_EVENT_H__


2 
	#__PROCESS_SYS_EVENT_H__


	)

4 
InôSy°em
();

6 
Pro˚ssEvítH™dÀr
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\timer\timer.c

1 #¥agm®
öãºu±
 
INTTM00
 
Ba£TimîI¡îru±


3 
	~"hw.h
"

4 
	~"timî.h
"

6 
	~<°rög.h
>

12 
	#HZ
 (1UL)

	)

14 
	s_timî_


16 
U8
 
	míabÀ
;

17 
U8
 
	mty≥
;

18 
U32
 
	mtime_out
;

19 } 
	ttimî_öfo_t
;

21 
LOCAL
 
timî_öfo_t
 
	gtimî_öfo
[ 
MAX_TIMER_ID_NUM
 ];

23 (*
pFunU£rISR
)(Ë
NULL
 ;

26 
	$InôTimî
( )

28 
	`MEMSET
–(
__FAR
 *)
timî_öfo
, 0, (Åimer_info) );

30 
	`R_TAU0_Ch™√l0_Sèπ
();

31 
	}
}

34 
	$SèπTimî
–
U8
 
id
, 
U32
 
time_out
 )

36 
	`INTS_BYTE_BASE_TIMER
();

38 
	`ENTER_CRITICAL_SECTION_TIMER
();

40 
timî_öfo
[ 
id
 ].
íabÀ
 = 1;

41 
timî_öfo
[ 
id
 ].
time_out
 =Åime_ouà/ 
HZ
;

42 #i‡(
HZ
 != 1UL)

43 if–(
time_out
 % 
HZ
Ë>(
U32
)5 )

45 
timî_öfo
[ 
id
 ].
time_out
++;

49 
	`EXIT_CRITICAL_SECTION_TIMER
();

51 
	}
}

53 
	$DißbÀTimî
–
U8
 
id
 )

55 
timî_öfo
[ 
id
 ].
íabÀ
 = 0;

56 
timî_öfo
[ 
id
 ].
time_out
 = (
U32
)-1;

57 
	}
}

59 
	$St›Timî
–
U8
 
id
 )

61 
	`DißbÀTimî
–
id
 );

62 
	}
}

65 
U8
 
	$IsExpúedTimî
–
U8
 
id
 )

67 
U32
 
time_out
;

68 
	`INTS_BYTE_BASE_TIMER
();

71 
	`ENTER_CRITICAL_SECTION_TIMER
();

72 
time_out
 = 
timî_öfo
[ 
id
 ].time_out;

73 
	`EXIT_CRITICAL_SECTION_TIMER
();

75 if–
timî_öfo
[ 
id
 ].
íabÀ
 == 0 )

77  
TIMER_DISABLE
;

80 if–
time_out
 > 0 )

82  
TIMER_NOT_EXPIRE
;

85  
TIMER_EXPIRE
;

86 
	}
}

89 
	$Upd©eTimî
( )

91 
U8
 
i
;

93  
i
 = 0 ; i < 
MAX_TIMER_ID_NUM
 ; i++ )

95 if–
timî_öfo
[ 
i
 ].
íabÀ
 == 0 )

100 if–
timî_öfo
[ 
i
 ].
time_out
 > 0 )

102 
timî_öfo
[ 
i
 ].
time_out
--;

105 
	}
}

109 
Regi°îTimîISR
–(*
pU£rISR
)() )

111 
pFunU£rISR
 = 
pU£rISR
;

112 
	}
}

116 
	$Ba£TimîI¡îru±
()

118 
	`Upd©eTimî
();

121 if–
pFunU£rISR
 !
NULL
 )

123 
	`pFunU£rISR
();

125 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\timer\timer.h

1 #i‚de‡
__TIMER_H__


2 
	#__TIMER_H__


	)

4 
	~"timî_id.h
"

6 
	#DELAY_MS
(
x
)

	)

7 
	#SEC
–
x
 ) ( ( x ) * 1000UL )

	)

10 
	#INTS_BYTE_BASE_TIMER
(Ë
_öts_timî_byã


	)

11 
	#MASK_BASE_TIMER
 
TMMK00


	)

12 
	#DISABLE_INT_MASK_BASE_TIMER
(Ëdÿ{ 
MASK_BASE_TIMER
 = 1; }0)

	)

13 
	#ENABLE_INT_MASK_BASE_TIMER
(Ëdÿ{ 
MASK_BASE_TIMER
 = 0; }0)

	)

15 
	#ENTER_CRITICAL_SECTION_TIMER
() \

17 
_öts_timî_byã
 = 
MASK_BASE_TIMER
; \

18 
	`DISABLE_INT_MASK_BASE_TIMER
(); \

19 }0)

	)

21 
	#EXIT_CRITICAL_SECTION_TIMER
() \

23 
MASK_BASE_TIMER
 = 
_öts_timî_byã
; \

24 } 0)

	)

27 
InôTimî
( );

29 
SèπTimî
–
U8
 
id
, 
U32
 
time_out
 );

31 
DißbÀTimî
–
U8
 
id
 );

33 
St›Timî
–
U8
 
id
 );

35 
	#TIMER_EXPIRE
 0

	)

36 
	#TIMER_NOT_EXPIRE
 1

	)

37 
	#TIMER_DISABLE
 2

	)

38 
U8
 
IsExpúedTimî
–U8 
id
 );

42 
Regi°îTimîISR
–(*
pU£rISR
)() );

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\timer\timer_id.h

1 #i‚de‡
__TIMER_ID_H__


2 
	#__TIMER_ID_H__


	)

7 
	mTIMER_ID_COMM_UART_1_RX
,

8 
	mTIMER_ID_COMM_UART_1_TX
,

10 
	mTIMER_ID_TOF
,

11 
	mTIMER_ID_1MS
,

12 
	mTIMER_ID_10MS
,

13 
	mTIMER_ID_100MS
,

14 
	mTIMER_ID_1SEC
,

16 
	mMAX_TIMER_ID_NUM


19 
	#TIMER_ID_ADC_INTERVAL
 10UL

	)

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\util.c

1 
	~"mcu.h
"

2 
	~"utû.h
"

3 
	~"hw.h
"

5 
I16
 
	$GëMö
–
I16
 
x
, I16 
y
 )

7 if–
x
 > 
y
 )

9  
y
;

12  
x
;

13 
	}
}

15 
I16
 
	$GëMax
–
I16
 
x
, I16 
y
 )

17 if–
x
 > 
y
 )

19  
x
;

22  
y
;

23 
	}
}

26 
U8
 
	$Hex2Dec
(
U8
 
mu8Hex
)

28 
U8
 
mu8Dec
;

30 
mu8Dec
 = (
mu8Hex
 & 0x0F);

31 
mu8Dec
 +((
mu8Hex
 & 0xF0) >> 4) * 10;;

33  
mu8Dec
;

34 
	}
}

37 
U8
 
	$Dec2Hex
(
U8
 
mu8Dec
)

39 
U8
 
mu8Hex
;

41 
mu8Hex
 = 
mu8Dec
 % 10;

42 
mu8Hex
 +(
mu8Dec
 / 10) * 16;

44  
mu8Hex
;

45 
	}
}

47 
U8
 
	$C⁄vAsc2Byã
(
U8
 
mu8Uµî
, U8 
mu8Lowî
 )

49 
U8
 
mu8Temp
 = 0;

50 
U8
 
mu8VÆ
 = 0;

54 if–
mu8Uµî
 > '9' )

56 
mu8Temp
 = 
mu8Uµî
 - '7';

60 
mu8Temp
 = 
mu8Uµî
 - '0';

62 
mu8VÆ
 = 
mu8Temp
 * 16;

65 if–
mu8Lowî
 > '9' )

67 
mu8Temp
 = 
mu8Lowî
 - '7';

71 
mu8Temp
 = 
mu8Lowî
 - '0';

73 
mu8VÆ
 +
mu8Temp
;

76  
mu8VÆ
;

77 
	}
}

79 
	$Dñay_US
–
U16
 
us
 )

81 
	`R_WDT_Re°¨t
();

83  
us
-- )

85 
	`NOP
(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP();

86 
	`NOP
(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP();

87 
	`NOP
(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP(); NOP();

89 
	}
}

91 
U16
 
	$ByãOrdîC⁄v
–
U16
 
_§c
 )

93 
U16
 
h_to_l
 = 
_§c
 >> 8;

94 
U16
 
l_to_h
 = ( 
_§c
 & 0x00FF ) << 8;

96  ( 
l_to_h
 | 
h_to_l
 );

97 
	}
}

99 
	$Dñay_MS
–
U16
 
ms
 )

101 
U16
 
i
;

102 
U8
 
j
;

104  
i
 = 0 ; i < 
ms
 ; i++ )

106  
j
 = 0; j < 4 ; j++ )

108 
	`Dñay_US
( 230 );

111 
	}
}

113 
	$Re£t
()

119 
	}
}

121 
U8
 
	$CheckLimôVÆue
(
U8
 
mu8VÆ
, U8 
mu8Mö
, U8 
mu8Max
, U8 
mu8Inô
)

123 if–
mu8VÆ
 < 
mu8Mö
 || mu8VÆ > 
mu8Max
 )

125  
mu8Inô
;

128  
mu8VÆ
;

129 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\util.h

1 #i‚de‡
__UTIL_H__


2 
	#__UTIL_H__


	)

4 
	~"¥j_ty≥.h
"

6 
	#GET_HIGH_BYTE
(
vÆ
Ë(
U8
)(((vÆ)&0xFF00Ë>> 8)

	)

7 
	#GET_LOW_BYTE
(
vÆ
Ë(
U8
)((vÆ)&0x00FF)

	)

8 
	#GET_UINT_WORD
(
lb
, 
hb
Ë((((
U16
)hb)<<8)|lb)

	)

10 
	#GET_32_BYTE_8
(
vÆ
Ë(
U8
)(((vÆ)&0x000000FF))

	)

11 
	#GET_32_BYTE_16
(
vÆ
Ë(
U8
)(((vÆ)&0x0000FF00)>>8)

	)

12 
	#GET_32_BYTE_24
(
vÆ
Ë(
U8
)(((vÆ)&0x00FF0000)>>16)

	)

13 
	#GET_32_BYTE_32
(
vÆ
Ë(
U8
)(((vÆ)&0xFF000000)>>24)

	)

14 
	#GET_UINT_WORD_32
(
b32
, 
b24
, 
b16
, 
b8
) \

16 –((
U32
)
b32
)<<24 ) |\

17 –((
U32
)
b24
)<<16 ) |\

18 –((
U32
)
b16
)<<8 ) |\

19 –(
U32
)
b8
) \

20 )

	)

22 
	#SET_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ |(
U8
)(bô); }0)

	)

23 
	#CLEAR_BIT_BYTE
(
vÆ
,
bô
Ëdo{ vÆ &(
U8
)(~bô); }0)

	)

25 
	#SET_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ |(
U16
)(bô); }0)

	)

26 
	#CLEAR_BIT_WORD
(
vÆ
,
bô
Ëdo{ vÆ &(
U16
)(~bô); }0)

	)

28 
	#DOWN_COUNT
(
vÆ
) \

30 if–
vÆ
 != 0 ) { val--; } \

31 }0)

	)

33 
	#DOWN_COUNT_RELOAD
(
vÆ
,
ªlﬂd
) \

35 if–
vÆ
 != 0 ){ val--;}\

36 { 
vÆ
=
ªlﬂd
;} \

37 }0)

	)

39 
I16
 
GëMö
–I16 
x
, I16 );

40 
I16
 
GëMax
–I16 
x
, I16 
y
 );

42 
U8
 
Hex2Dec
(U8 
mu8Hex
);

43 
U8
 
Dec2Hex
(U8 
mu8Dec
);

45 
U8
 
C⁄vAsc2Byã
(U8 
mu8Uµî
, U8 
mu8Lowî
 );

46 
U16
 
ByãOrdîC⁄v
–U16 
_§c
 );

48 
Dñay_US
–
U16
 
us
 );

49 
Dñay_MS
–
U16
 
ms
 );

51 
Re£t
();

56 
U8
 
CheckLimôVÆue
(U8 
mu8VÆ
, U8 
mu8Mö
, U8 
mu8Max
, U8 
mu8Inô
);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_adc.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_adc.h
"

42 
	~"r_cg_u£rdeföe.h
"

56 
	$R_ADC_Cª©e
()

58 
ADCEN
 = 1U;

59 
ADM0
 = 
_00_AD_ADM0_INITIALVALUE
;

60 
ADMK
 = 1U;

61 
ADIF
 = 0U;

63 
ADPR1
 = 1U;

64 
ADPR0
 = 1U;

67 
PM2
 |= 0xFFU;

68 
PM15
 |= 0x0FU;

69 
ADM0
 = 
_00_AD_CONVERSION_CLOCK_64
 | 
_00_AD_TIME_MODE_NORMAL_1
 | 
_00_AD_OPERMODE_SELECT
;

70 
ADM1
 = 
_00_AD_TRIGGER_SOFTWARE
 | 
_20_AD_CONVMODE_ONESELECT
;

71 
ADM2
 = 
_00_AD_POSITIVE_VDD
 | 
_00_AD_NEGATIVE_VSS
 | 
_00_AD_AREA_MODE_1
 | 
_00_AD_RESOLUTION_10BIT
;

72 
ADUL
 = 
_FF_AD_ADUL_VALUE
;

73 
ADLL
 = 
_00_AD_ADLL_VALUE
;

74 
ADS
 = 
_00_AD_INPUT_CHANNEL_0
;

75 
	}
}

83 
	$R_ADC_Sèπ
()

85 
ADIF
 = 0U;

86 
ADMK
 = 0U;

87 
ADCS
 = 1U;

88 
	}
}

96 
	$R_ADC_St›
()

98 
ADCS
 = 0U;

99 
ADMK
 = 1U;

100 
ADIF
 = 0U;

101 
	}
}

109 
	$R_ADC_Së_O≥øti⁄On
()

111 
ADCE
 = 1U;

112 
	}
}

120 
	$R_ADC_Së_O≥øti⁄Off
()

122 
ADCE
 = 0U;

123 
	}
}

132 
	$R_ADC_Gë_Resu…
(
uöt16_t
 * c⁄° 
buf„r
)

134 *
buf„r
 = (
uöt16_t
)(
ADCR
 >> 6U);

135 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_adc.h

29 #i‚de‡
ADC_H


30 
	#ADC_H


	)

39 
	#_00_AD_CLOCK_STOP
 (0x00UË

	)

40 
	#_20_AD_CLOCK_SUPPLY
 (0x20UË

	)

45 
	#_00_AD_ADM0_INITIALVALUE
 (0x00U)

	)

47 
	#_80_AD_CONVERSION_ENABLE
 (0x80UË

	)

48 
	#_00_AD_CONVERSION_DISABLE
 (0x00UË

	)

50 
	#_00_AD_OPERMODE_SELECT
 (0x00UË

	)

51 
	#_40_AD_OPERMODE_SCAN
 (0x40UË

	)

53 
	#_00_AD_CONVERSION_CLOCK_64
 (0x00UË

	)

54 
	#_08_AD_CONVERSION_CLOCK_32
 (0x08UË

	)

55 
	#_10_AD_CONVERSION_CLOCK_16
 (0x10UË

	)

56 
	#_18_AD_CONVERSION_CLOCK_8
 (0x18UË

	)

57 
	#_20_AD_CONVERSION_CLOCK_6
 (0x20UË

	)

58 
	#_28_AD_CONVERSION_CLOCK_5
 (0x28UË

	)

59 
	#_30_AD_CONVERSION_CLOCK_4
 (0x30UË

	)

60 
	#_38_AD_CONVERSION_CLOCK_2
 (0x38UË

	)

62 
	#_00_AD_TIME_MODE_NORMAL_1
 (0x00UË

	)

63 
	#_02_AD_TIME_MODE_NORMAL_2
 (0x02UË

	)

64 
	#_04_AD_TIME_MODE_LOWVOLTAGE_1
 (0x04UË

	)

65 
	#_06_AD_TIME_MODE_LOWVOLTAGE_2
 (0x06UË

	)

67 
	#_01_AD_COMPARATOR_ENABLE
 (0x01UË

	)

68 
	#_00_AD_COMPARATOR_DISABLE
 (0x00UË

	)

75 
	#_00_AD_INPUT_CHANNEL_0
 (0x00UË

	)

76 
	#_01_AD_INPUT_CHANNEL_1
 (0x01UË

	)

77 
	#_02_AD_INPUT_CHANNEL_2
 (0x02UË

	)

78 
	#_03_AD_INPUT_CHANNEL_3
 (0x03UË

	)

79 
	#_04_AD_INPUT_CHANNEL_4
 (0x04UË

	)

80 
	#_05_AD_INPUT_CHANNEL_5
 (0x05UË

	)

81 
	#_06_AD_INPUT_CHANNEL_6
 (0x06UË

	)

82 
	#_07_AD_INPUT_CHANNEL_7
 (0x07UË

	)

83 
	#_08_AD_INPUT_CHANNEL_8
 (0x08UË

	)

84 
	#_09_AD_INPUT_CHANNEL_9
 (0x09UË

	)

85 
	#_0A_AD_INPUT_CHANNEL_10
 (0x0AUË

	)

86 
	#_0B_AD_INPUT_CHANNEL_11
 (0x0BUË

	)

87 
	#_0C_AD_INPUT_CHANNEL_12
 (0x0CUË

	)

88 
	#_0D_AD_INPUT_CHANNEL_13
 (0x0DUË

	)

89 
	#_0E_AD_INPUT_CHANNEL_14
 (0x0EUË

	)

90 
	#_10_AD_INPUT_CHANNEL_16
 (0x10UË

	)

91 
	#_11_AD_INPUT_CHANNEL_17
 (0x11UË

	)

92 
	#_12_AD_INPUT_CHANNEL_18
 (0x12UË

	)

93 
	#_13_AD_INPUT_CHANNEL_19
 (0x13UË

	)

94 
	#_14_AD_INPUT_CHANNEL_20
 (0x14UË

	)

95 
	#_80_AD_INPUT_TEMPERSENSOR_0
 (0x80UË

	)

96 
	#_81_AD_INPUT_INTERREFVOLT
 (0x81UË

	)

98 
	#_00_AD_INPUT_CHANNEL_0_3
 (0x00UË

	)

99 
	#_01_AD_INPUT_CHANNEL_1_4
 (0x01UË

	)

100 
	#_02_AD_INPUT_CHANNEL_2_5
 (0x02UË

	)

101 
	#_03_AD_INPUT_CHANNEL_3_6
 (0x03UË

	)

102 
	#_04_AD_INPUT_CHANNEL_4_7
 (0x04UË

	)

103 
	#_05_AD_INPUT_CHANNEL_5_8
 (0x05UË

	)

104 
	#_06_AD_INPUT_CHANNEL_6_9
 (0x06UË

	)

105 
	#_07_AD_INPUT_CHANNEL_7_10
 (0x07UË

	)

106 
	#_08_AD_INPUT_CHANNEL_8_11
 (0x08UË

	)

107 
	#_09_AD_INPUT_CHANNEL_9_12
 (0x09UË

	)

108 
	#_0A_AD_INPUT_CHANNEL_10_13
 (0x0AUË

	)

109 
	#_0B_AD_INPUT_CHANNEL_11_14
 (0x0BUË

	)

115 
	#_00_AD_TRIGGER_SOFTWARE
 (0x00UË

	)

116 
	#_80_AD_TRIGGER_HARDWARE_NOWAIT
 (0x80UË

	)

117 
	#_C0_AD_TRIGGER_HARDWARE_WAIT
 (0xC0UË

	)

119 
	#_00_AD_CONVMODE_CONSELECT
 (0x00UË

	)

120 
	#_20_AD_CONVMODE_ONESELECT
 (0x20UË

	)

122 
	#_00_AD_TRIGGER_INTTM01
 (0x00UË

	)

123 
	#_02_AD_TRIGGER_INTRTC
 (0x02UË

	)

124 
	#_03_AD_TRIGGER_INTIT
 (0x03UË

	)

130 
	#_00_AD_POSITIVE_VDD
 (0x00UË

	)

131 
	#_40_AD_POSITIVE_AVREFP
 (0x40UË

	)

132 
	#_80_AD_POSITIVE_INTERVOLT
 (0x80UË

	)

134 
	#_00_AD_NEGATIVE_VSS
 (0x00UË

	)

135 
	#_20_AD_NEGATIVE_AVREFM
 (0x20UË

	)

137 
	#_00_AD_AREA_MODE_1
 (0x00UË

	)

138 
	#_08_AD_AREA_MODE_2_3
 (0x08UË

	)

140 
	#_00_AD_WAKEUP_OFF
 (0x00UË

	)

141 
	#_04_AD_WAKEUP_ON
 (0x04UË

	)

143 
	#_00_AD_RESOLUTION_10BIT
 (0x00UË

	)

144 
	#_01_AD_RESOLUTION_8BIT
 (0x01UË

	)

150 
	#_00_AD_NORMAL_INPUT
 (0x00UË

	)

151 
	#_02_AD_TEST_AVREFM
 (0x02UË

	)

152 
	#_03_AD_TEST_AVREFP
 (0x03UË

	)

158 
	#_00_AD_ADPC_15ANALOG
 (0x00UË

	)

159 
	#_0F_AD_ADPC_14ANALOG
 (0x0FUË

	)

160 
	#_0E_AD_ADPC_13ANALOG
 (0x0EUË

	)

161 
	#_0D_AD_ADPC_12ANALOG
 (0x0DUË

	)

162 
	#_0C_AD_ADPC_11ANALOG
 (0x0CUË

	)

163 
	#_0B_AD_ADPC_10ANALOG
 (0x0BUË

	)

164 
	#_0A_AD_ADPC_9ANALOG
 (0x0AUË

	)

165 
	#_09_AD_ADPC_8ANALOG
 (0x09UË

	)

166 
	#_08_AD_ADPC_7ANALOG
 (0x08UË

	)

167 
	#_07_AD_ADPC_6ANALOG
 (0x07UË

	)

168 
	#_06_AD_ADPC_5ANALOG
 (0x06UË

	)

169 
	#_05_AD_ADPC_4ANALOG
 (0x05UË

	)

170 
	#_04_AD_ADPC_3ANALOG
 (0x04UË

	)

171 
	#_03_AD_ADPC_2ANALOG
 (0x03UË

	)

172 
	#_02_AD_ADPC_1ANALOG
 (0x02UË

	)

173 
	#_01_AD_ADPC_0ANALOG
 (0x01UË

	)

179 
	#_FF_AD_ADUL_VALUE
 (0xFFU)

	)

181 
	#_00_AD_ADLL_VALUE
 (0x00U)

	)

188 
	mADCHANNEL0
, 
	mADCHANNEL1
, 
	mADCHANNEL2
, 
	mADCHANNEL3
, 
	mADCHANNEL4
, 
	mADCHANNEL5
,

189 
	mADCHANNEL6
, 
	mADCHANNEL7
, 
	mADCHANNEL8
, 
	mADCHANNEL9
, 
	mADCHANNEL10
, 
	mADCHANNEL11
,

190 
	mADCHANNEL12
, 
	mADCHANNEL13
, 
	mADCHANNEL14
, 
	mADCHANNEL16
 = 16U, 
	mADCHANNEL17
,

191 
	mADCHANNEL18
, 
	mADCHANNEL19
, 
	mADCHANNEL20
, 
	mADTEMPERSENSOR0
 = 128U, 
	mADINTERREFVOLT


192 } 
	tad_ch™√l_t
;

195 
	mADNORMALINPUT
,

196 
	mADAVREFM
 = 2U,

197 
	mADAVREFP


198 } 
	tã°_ch™√l_t
;

203 
R_ADC_Cª©e
();

204 
R_ADC_Sèπ
();

205 
R_ADC_St›
();

206 
R_ADC_Së_O≥øti⁄On
();

207 
R_ADC_Së_O≥øti⁄Off
();

208 
R_ADC_Gë_Resu…
(
uöt16_t
 * c⁄° 
buf„r
);

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_adc_user.c

32 #¥agm®
öãºu±
 
INTAD
 
r_adc_öãºu±


39 
	~"r_cg_ma¸odrivî.h
"

40 
	~"r_cg_adc.h
"

43 
	~"r_cg_u£rdeföe.h
"

57 
__öãºu±
 
	$r_adc_öãºu±
()

61 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_cgc.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_cgc.h
"

42 
	~"r_cg_u£rdeföe.h
"

56 
	$R_CGC_Cª©e
()

59 
CMC
 = 
_00_CGC_HISYS_PORT
 | 
_00_CGC_SUB_PORT
 | 
_00_CGC_SYSOSC_DEFAULT
 | 
_00_CGC_SUBMODE_DEFAULT
;

60 
MSTOP
 = 1U;

62 
MCM0
 = 0U;

64 
XTSTOP
 = 1U;

65 
OSMC
 = 
_10_CGC_RTC_CLK_FIL
;

67 
CSS
 = 0U;

69 
HIOSTOP
 = 0U;

70 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_cgc.h

29 #i‚de‡
CGC_H


30 
	#CGC_H


	)

39 
	#_C0_CGC_HISYS_PIN
 (0xC0U)

	)

40 
	#_00_CGC_HISYS_PORT
 (0x00UË

	)

41 
	#_40_CGC_HISYS_OSC
 (0x40UË

	)

42 
	#_80_CGC_HISYS_PORT1
 (0x80UË

	)

43 
	#_C0_CGC_HISYS_EXT
 (0xC0UË

	)

45 
	#_30_CGC_SUB_PIN
 (0x30U)

	)

46 
	#_00_CGC_SUB_PORT
 (0x00UË

	)

47 
	#_10_CGC_SUB_OSC
 (0x10UË

	)

48 
	#_20_CGC_SUB_PORT1
 (0x20UË

	)

49 
	#_30_CGC_SUB_EXT
 (0x30UË

	)

51 
	#_00_CGC_SUBMODE_DEFAULT
 (0x00U)

	)

52 
	#_00_CGC_SUBMODE_LOW
 (0x00UË

	)

53 
	#_02_CGC_SUBMODE_NORMAL
 (0x02UË

	)

54 
	#_04_CGC_SUBMODE_ULOW
 (0x04UË

	)

56 
	#_00_CGC_SYSOSC_DEFAULT
 (0x00U)

	)

57 
	#_00_CGC_SYSOSC_UNDER10M
 (0x00UË

	)

58 
	#_01_CGC_SYSOSC_OVER10M
 (0x01UË

	)

64 
	#_00_CGC_HISYS_OPER
 (0x00UË

	)

65 
	#_80_CGC_HISYS_STOP
 (0x80UË

	)

67 
	#_00_CGC_SUB_OPER
 (0x00UË

	)

68 
	#_40_CGC_SUB_STOP
 (0x40UË

	)

70 
	#_00_CGC_HIO_OPER
 (0x00UË

	)

71 
	#_01_CGC_HIO_STOP
 (0x01UË

	)

77 
	#_00_CGC_OSCSTAB_STA0
 (0x00UË

	)

78 
	#_80_CGC_OSCSTAB_STA8
 (0x80UË

	)

79 
	#_C0_CGC_OSCSTAB_STA9
 (0xC0UË

	)

80 
	#_E0_CGC_OSCSTAB_STA10
 (0xE0UË

	)

81 
	#_F0_CGC_OSCSTAB_STA11
 (0xF0UË

	)

82 
	#_F8_CGC_OSCSTAB_STA13
 (0xF8UË

	)

83 
	#_FC_CGC_OSCSTAB_STA15
 (0xFCUË

	)

84 
	#_FE_CGC_OSCSTAB_STA17
 (0xFEUË

	)

85 
	#_FF_CGC_OSCSTAB_STA18
 (0xFFUË

	)

91 
	#_00_CGC_OSCSTAB_SEL8
 (0x00UË

	)

92 
	#_01_CGC_OSCSTAB_SEL9
 (0x01UË

	)

93 
	#_02_CGC_OSCSTAB_SEL10
 (0x02UË

	)

94 
	#_03_CGC_OSCSTAB_SEL11
 (0x03UË

	)

95 
	#_04_CGC_OSCSTAB_SEL13
 (0x04UË

	)

96 
	#_05_CGC_OSCSTAB_SEL15
 (0x05UË

	)

97 
	#_06_CGC_OSCSTAB_SEL17
 (0x06UË

	)

98 
	#_07_CGC_OSCSTAB_SEL18
 (0x07UË

	)

104 
	#_00_CGC_CPUCLK_MAIN
 (0x00UË

	)

105 
	#_80_CGC_CPUCLK_SUB
 (0x80UË

	)

107 
	#_00_CGC_CPUCLK_SELMAIN
 (0x00UË

	)

108 
	#_40_CGC_CPUCLK_SELSUB
 (0x40UË

	)

110 
	#_00_CGC_MAINCLK_HIO
 (0x00UË

	)

111 
	#_20_CGC_MAINCLK_HISYS
 (0x20UË

	)

113 
	#_00_CGC_MAINCLK_SELHIO
 (0x00UË

	)

114 
	#_10_CGC_MAINCLK_SELHISYS
 (0x10UË

	)

120 
	#_00_CGC_SUBINHALT_ON
 (0x00UË

	)

121 
	#_80_CGC_SUBINHALT_OFF
 (0x80UË

	)

123 
	#_00_CGC_RTC_CLK_FSUB
 (0x00UË

	)

124 
	#_10_CGC_RTC_CLK_FIL
 (0x10UË

	)

130 
	#_00_CGC_ILLEGAL_ACCESS_OFF
 (0x00UË

	)

131 
	#_80_CGC_ILLEGAL_ACCESS_ON
 (0x80UË

	)

133 
	#_00_CGC_RAM_GUARD_OFF
 (0x00UË

	)

134 
	#_10_CGC_RAM_GUARD_ARAE0
 (0x10UË

	)

135 
	#_20_CGC_RAM_GUARD_ARAE1
 (0x20UË

	)

136 
	#_30_CGC_RAM_GUARD_ARAE2
 (0x30UË

	)

138 
	#_00_CGC_PORT_GUARD_OFF
 (0x00UË

	)

139 
	#_04_CGC_PORT_GUARD_ON
 (0x04UË

	)

141 
	#_00_CGC_INT_GUARD_OFF
 (0x00UË

	)

142 
	#_02_CGC_INT_GUARD_ON
 (0x02UË

	)

144 
	#_00_CGC_CSC_GUARD_OFF
 (0x00UË

	)

145 
	#_01_CGC_CSC_GUARD_ON
 (0x01UË

	)

156 
	mHIOCLK
,

157 
	mSYSX1CLK
,

158 
	mSYSEXTCLK
,

159 
	mSUBXT1CLK
,

160 
	mSUBEXTCLK


161 } 
	t˛ock_mode_t
;

166 
R_CGC_Cª©e
();

167 
R_CGC_Gë_Re£tSour˚
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_cgc_user.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_cgc.h
"

42 
	~"r_cg_u£rdeföe.h
"

56 
	$R_CGC_Gë_Re£tSour˚
()

58 
uöt8_t
 
ª£t_Êag
 = 
RESF
;

61 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_intc.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_ötc.h
"

42 
	~"r_cg_u£rdeföe.h
"

56 
	$R_INTC_Cª©e
()

58 
PMK0
 = 1U;

59 
PIF0
 = 0U;

60 
PMK1
 = 1U;

61 
PIF1
 = 0U;

62 
PMK2
 = 1U;

63 
PIF2
 = 0U;

64 
PMK3
 = 1U;

65 
PIF3
 = 0U;

66 
PMK4
 = 1U;

67 
PIF4
 = 0U;

68 
PMK5
 = 1U;

69 
PIF5
 = 0U;

70 
PMK6
 = 1U;

71 
PIF6
 = 0U;

72 
PMK8
 = 1U;

73 
PIF8
 = 0U;

74 
PMK9
 = 1U;

75 
PIF9
 = 0U;

77 
PPR12
 = 1U;

78 
PPR02
 = 1U;

80 
PPR13
 = 1U;

81 
PPR03
 = 1U;

83 
PPR14
 = 1U;

84 
PPR04
 = 1U;

86 
PPR15
 = 1U;

87 
PPR05
 = 1U;

89 
PPR16
 = 1U;

90 
PPR06
 = 1U;

92 
PPR18
 = 1U;

93 
PPR08
 = 1U;

95 
PPR19
 = 1U;

96 
PPR09
 = 1U;

97 
EGN0
 = 
_04_INTP2_EDGE_FALLING_SEL
 | 
_08_INTP3_EDGE_FALLING_SEL
 | 
_10_INTP4_EDGE_FALLING_SEL
 |

98 
_20_INTP5_EDGE_FALLING_SEL
 | 
_40_INTP6_EDGE_FALLING_SEL
;

99 
EGN1
 = 
_01_INTP8_EDGE_FALLING_SEL
 | 
_02_INTP9_EDGE_FALLING_SEL
;

101 
PM5
 |= 0x02U;

103 
PM3
 |= 0x01U;

105 
PM3
 |= 0x02U;

107 
PM1
 |= 0x40U;

109 
PM14
 |= 0x01U;

111 
PM7
 |= 0x10U;

113 
PM7
 |= 0x20U;

114 
	}
}

122 
	$R_INTC2_Sèπ
()

124 
PIF2
 = 0U;

125 
PMK2
 = 0U;

126 
	}
}

134 
	$R_INTC2_St›
()

136 
PMK2
 = 1U;

137 
PIF2
 = 0U;

138 
	}
}

146 
	$R_INTC3_Sèπ
()

148 
PIF3
 = 0U;

149 
PMK3
 = 0U;

150 
	}
}

158 
	$R_INTC3_St›
()

160 
PMK3
 = 1U;

161 
PIF3
 = 0U;

162 
	}
}

170 
	$R_INTC4_Sèπ
()

172 
PIF4
 = 0U;

173 
PMK4
 = 0U;

174 
	}
}

182 
	$R_INTC4_St›
()

184 
PMK4
 = 1U;

185 
PIF4
 = 0U;

186 
	}
}

194 
	$R_INTC5_Sèπ
()

196 
PIF5
 = 0U;

197 
PMK5
 = 0U;

198 
	}
}

206 
	$R_INTC5_St›
()

208 
PMK5
 = 1U;

209 
PIF5
 = 0U;

210 
	}
}

218 
	$R_INTC6_Sèπ
()

220 
PIF6
 = 0U;

221 
PMK6
 = 0U;

222 
	}
}

230 
	$R_INTC6_St›
()

232 
PMK6
 = 1U;

233 
PIF6
 = 0U;

234 
	}
}

242 
	$R_INTC8_Sèπ
()

244 
PIF8
 = 0U;

245 
PMK8
 = 0U;

246 
	}
}

254 
	$R_INTC8_St›
()

256 
PMK8
 = 1U;

257 
PIF8
 = 0U;

258 
	}
}

266 
	$R_INTC9_Sèπ
()

268 
PIF9
 = 0U;

269 
PMK9
 = 0U;

270 
	}
}

278 
	$R_INTC9_St›
()

280 
PMK9
 = 1U;

281 
PIF9
 = 0U;

282 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_intc.h

29 #i‚de‡
INTC_H


30 
	#INTC_H


	)

40 
	#_01_INTP0_EDGE_RISING_SEL
 (0x01UË

	)

41 
	#_00_INTP0_EDGE_RISING_UNSEL
 (0x00UË

	)

42 
	#_02_INTP1_EDGE_RISING_SEL
 (0x02UË

	)

43 
	#_00_INTP1_EDGE_RISING_UNSEL
 (0x00UË

	)

44 
	#_04_INTP2_EDGE_RISING_SEL
 (0x04UË

	)

45 
	#_00_INTP2_EDGE_RISING_UNSEL
 (0x00UË

	)

46 
	#_08_INTP3_EDGE_RISING_SEL
 (0x08UË

	)

47 
	#_00_INTP3_EDGE_RISING_UNSEL
 (0x00UË

	)

48 
	#_10_INTP4_EDGE_RISING_SEL
 (0x10UË

	)

49 
	#_00_INTP4_EDGE_RISING_UNSEL
 (0x00UË

	)

50 
	#_20_INTP5_EDGE_RISING_SEL
 (0x20UË

	)

51 
	#_00_INTP5_EDGE_RISING_UNSEL
 (0x00UË

	)

52 
	#_40_INTP6_EDGE_RISING_SEL
 (0x40UË

	)

53 
	#_00_INTP6_EDGE_RISING_UNSEL
 (0x00UË

	)

59 
	#_01_INTP0_EDGE_FALLING_SEL
 (0x01UË

	)

60 
	#_00_INTP0_EDGE_FALLING_UNSEL
 (0x00UË

	)

61 
	#_02_INTP1_EDGE_FALLING_SEL
 (0x02UË

	)

62 
	#_00_INTP1_EDGE_FALLING_UNSEL
 (0x00UË

	)

63 
	#_04_INTP2_EDGE_FALLING_SEL
 (0x04UË

	)

64 
	#_00_INTP2_EDGE_FALLING_UNSEL
 (0x00UË

	)

65 
	#_08_INTP3_EDGE_FALLING_SEL
 (0x08UË

	)

66 
	#_00_INTP3_EDGE_FALLING_UNSEL
 (0x00UË

	)

67 
	#_10_INTP4_EDGE_FALLING_SEL
 (0x10UË

	)

68 
	#_00_INTP4_EDGE_FALLING_UNSEL
 (0x00UË

	)

69 
	#_20_INTP5_EDGE_FALLING_SEL
 (0x20UË

	)

70 
	#_00_INTP5_EDGE_FALLING_UNSEL
 (0x00UË

	)

71 
	#_40_INTP6_EDGE_FALLING_SEL
 (0x40UË

	)

72 
	#_00_INTP6_EDGE_FALLING_UNSEL
 (0x00UË

	)

78 
	#_01_INTP8_EDGE_RISING_SEL
 (0x01UË

	)

79 
	#_00_INTP8_EDGE_RISING_UNSEL
 (0x00UË

	)

80 
	#_02_INTP9_EDGE_RISING_SEL
 (0x02UË

	)

81 
	#_00_INTP9_EDGE_RISING_UNSEL
 (0x00UË

	)

87 
	#_01_INTP8_EDGE_FALLING_SEL
 (0x01UË

	)

88 
	#_00_INTP8_EDGE_FALLING_UNSEL
 (0x00UË

	)

89 
	#_02_INTP9_EDGE_FALLING_SEL
 (0x02UË

	)

90 
	#_00_INTP9_EDGE_FALLING_UNSEL
 (0x00UË

	)

96 
	#_00_KR0_SIGNAL_DETECT_OFF
 (0x00UË

	)

97 
	#_01_KR0_SIGNAL_DETECT_ON
 (0x01UË

	)

99 
	#_00_KR1_SIGNAL_DETECT_OFF
 (0x00UË

	)

100 
	#_02_KR1_SIGNAL_DETECT_ON
 (0x02UË

	)

102 
	#_00_KR2_SIGNAL_DETECT_OFF
 (0x00UË

	)

103 
	#_04_KR2_SIGNAL_DETECT_ON
 (0x04UË

	)

105 
	#_00_KR3_SIGNAL_DETECT_OFF
 (0x00UË

	)

106 
	#_08_KR3_SIGNAL_DETECT_ON
 (0x08UË

	)

108 
	#_00_KR4_SIGNAL_DETECT_OFF
 (0x00UË

	)

109 
	#_10_KR4_SIGNAL_DETECT_ON
 (0x10UË

	)

111 
	#_00_KR5_SIGNAL_DETECT_OFF
 (0x00UË

	)

112 
	#_20_KR5_SIGNAL_DETECT_ON
 (0x20UË

	)

117 
	#KEY_WAITTIME
 (8UË

	)

126 
R_INTC_Cª©e
();

127 
R_INTC2_Sèπ
();

128 
R_INTC2_St›
();

129 
R_INTC3_Sèπ
();

130 
R_INTC3_St›
();

131 
R_INTC4_Sèπ
();

132 
R_INTC4_St›
();

133 
R_INTC5_Sèπ
();

134 
R_INTC5_St›
();

135 
R_INTC6_Sèπ
();

136 
R_INTC6_St›
();

137 
R_INTC8_Sèπ
();

138 
R_INTC8_St›
();

139 
R_INTC9_Sèπ
();

140 
R_INTC9_St›
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_intc_user.c

32 #¥agm®
öãºu±
 
INTP2
 
r_ötc2_öãºu±


33 #¥agm®
öãºu±
 
INTP3
 
r_ötc3_öãºu±


34 #¥agm®
öãºu±
 
INTP4
 
r_ötc4_öãºu±


35 #¥agm®
öãºu±
 
INTP5
 
r_ötc5_öãºu±


36 #¥agm®
öãºu±
 
INTP6
 
r_ötc6_öãºu±


37 #¥agm®
öãºu±
 
INTP8
 
r_ötc8_öãºu±


38 #¥agm®
öãºu±
 
INTP9
 
r_ötc9_öãºu±


45 
	~"r_cg_ma¸odrivî.h
"

46 
	~"r_cg_ötc.h
"

49 
	~"r_cg_u£rdeföe.h
"

63 
__öãºu±
 
	$r_ötc2_öãºu±
()

67 
	}
}

75 
__öãºu±
 
	$r_ötc3_öãºu±
()

79 
	}
}

87 
__öãºu±
 
	$r_ötc4_öãºu±
()

91 
	}
}

99 
__öãºu±
 
	$r_ötc5_öãºu±
()

103 
	}
}

111 
__öãºu±
 
	$r_ötc6_öãºu±
()

115 
	}
}

123 
__öãºu±
 
	$r_ötc8_öãºu±
()

127 
	}
}

135 
__öãºu±
 
	$r_ötc9_öãºu±
()

139 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_macrodriver.h

29 #i‚de‡
STATUS_H


30 
	#STATUS_H


	)

34 #¥agm®
s‰


35 #¥agm®
DI


36 #¥agm®
EI


37 #¥agm®
NOP


38 #¥agm®
HALT


39 #¥agm®
STOP


48 #i‚de‡
__TYPEDEF__


50 
	#MD_STATUSBASE
 (0x00U)

	)

51 
	#MD_OK
 (
MD_STATUSBASE
 + 0x00UË

	)

52 
	#MD_SPT
 (
MD_STATUSBASE
 + 0x01UË

	)

53 
	#MD_NACK
 (
MD_STATUSBASE
 + 0x02UË

	)

54 
	#MD_BUSY1
 (
MD_STATUSBASE
 + 0x03UË

	)

55 
	#MD_BUSY2
 (
MD_STATUSBASE
 + 0x04UË

	)

56 
	#MD_OVERRUN
 (
MD_STATUSBASE
 + 0x05UË

	)

59 
	#MD_ERRORBASE
 (0x80U)

	)

60 
	#MD_ERROR
 (
MD_ERRORBASE
 + 0x00UË

	)

61 
	#MD_ARGERROR
 (
MD_ERRORBASE
 + 0x01UË

	)

62 
	#MD_ERROR1
 (
MD_ERRORBASE
 + 0x02UË

	)

63 
	#MD_ERROR2
 (
MD_ERRORBASE
 + 0x03UË

	)

64 
	#MD_ERROR3
 (
MD_ERRORBASE
 + 0x04UË

	)

65 
	#MD_ERROR4
 (
MD_ERRORBASE
 + 0x05UË

	)

71 #i‚de‡
__TYPEDEF__


72 sig√d 
	töt8_t
;

73 
	tuöt8_t
;

74 sig√d 
	töt16_t
;

75 
	tuöt16_t
;

76 sig√d 
	töt32_t
;

77 
	tuöt32_t
;

78 
	tMD_STATUS
;

79 
	#__TYPEDEF__


	)

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_port.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_p‹t.h
"

42 
	~"r_cg_u£rdeföe.h
"

56 
	$R_PORT_Cª©e
()

58 
P1
 = 
_00_Pn0_OUTPUT_0
 | 
_00_Pn1_OUTPUT_0
 | 
_00_Pn2_OUTPUT_0
 | 
_00_Pn3_OUTPUT_0
 | 
_00_Pn4_OUTPUT_0
 |

59 
_00_Pn5_OUTPUT_0
 | 
_00_Pn7_OUTPUT_0
;

60 
P2
 = 
_00_Pn0_OUTPUT_0
 | 
_00_Pn1_OUTPUT_0
 | 
_00_Pn2_OUTPUT_0
 | 
_00_Pn3_OUTPUT_0
 | 
_00_Pn4_OUTPUT_0
 |

61 
_00_Pn5_OUTPUT_0
 | 
_00_Pn6_OUTPUT_0
 | 
_00_Pn7_OUTPUT_0
;

62 
P4
 = 
_00_Pn1_OUTPUT_0
;

63 
P5
 = 
_00_Pn0_OUTPUT_0
;

64 
P6
 = 
_00_Pn2_OUTPUT_0
 | 
_00_Pn3_OUTPUT_0
;

65 
P7
 = 
_00_Pn0_OUTPUT_0
 | 
_00_Pn1_OUTPUT_0
 | 
_00_Pn2_OUTPUT_0
 | 
_00_Pn3_OUTPUT_0
;

66 
P12
 = 
_00_Pn0_OUTPUT_0
;

67 
P13
 = 
_00_Pn0_OUTPUT_0
;

68 
P14
 = 
_00_Pn6_OUTPUT_0
 | 
_00_Pn7_OUTPUT_0
;

69 
PMC12
 = 
_00_PMCn0_DI_ON
 | 
_FE_PMC12_DEFAULT
;

70 
PMC14
 = 
_00_PMCn7_DI_ON
 | 
_7F_PMC14_DEFAULT
;

71 
ADPC
 = 
_01_ADPC_DI_ON
;

72 
PM1
 = 
_00_PMn0_MODE_OUTPUT
 | 
_00_PMn1_MODE_OUTPUT
 | 
_00_PMn2_MODE_OUTPUT
 | 
_00_PMn3_MODE_OUTPUT
 |

73 
_00_PMn4_MODE_OUTPUT
 | 
_00_PMn5_MODE_OUTPUT
 | 
_40_PMn6_NOT_USE
 | 
_00_PMn7_MODE_OUTPUT
;

74 
PM2
 = 
_00_PMn0_MODE_OUTPUT
 | 
_00_PMn1_MODE_OUTPUT
 | 
_00_PMn2_MODE_OUTPUT
 | 
_00_PMn3_MODE_OUTPUT
 |

75 
_00_PMn4_MODE_OUTPUT
 | 
_00_PMn5_MODE_OUTPUT
 | 
_00_PMn6_MODE_OUTPUT
 | 
_00_PMn7_MODE_OUTPUT
;

76 
PM4
 = 
_01_PMn0_NOT_USE
 | 
_00_PMn1_MODE_OUTPUT
 | 
_FC_PM4_DEFAULT
;

77 
PM5
 = 
_00_PMn0_MODE_OUTPUT
 | 
_02_PMn1_NOT_USE
 | 
_FC_PM5_DEFAULT
;

78 
PM6
 = 
_01_PMn0_NOT_USE
 | 
_02_PMn1_NOT_USE
 | 
_00_PMn2_MODE_OUTPUT
 | 
_00_PMn3_MODE_OUTPUT
 | 
_F0_PM6_DEFAULT
;

79 
PM7
 = 
_00_PMn0_MODE_OUTPUT
 | 
_00_PMn1_MODE_OUTPUT
 | 
_00_PMn2_MODE_OUTPUT
 | 
_00_PMn3_MODE_OUTPUT
 | 
_10_PMn4_NOT_USE
 |

80 
_20_PMn5_NOT_USE
 | 
_C0_PM7_DEFAULT
;

81 
PM12
 = 
_00_PMn0_MODE_OUTPUT
 | 
_FE_PM12_DEFAULT
;

82 
PM14
 = 
_01_PMn0_NOT_USE
 | 
_00_PMn6_MODE_OUTPUT
 | 
_00_PMn7_MODE_OUTPUT
 | 
_3E_PM14_DEFAULT
;

83 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_port.h

29 #i‚de‡
PORT_H


30 
	#PORT_H


	)

39 
	#_01_PMn0_NOT_USE
 (0x01UË

	)

40 
	#_01_PMn0_MODE_INPUT
 (0x01UË

	)

41 
	#_00_PMn0_MODE_OUTPUT
 (0x00UË

	)

42 
	#_02_PMn1_NOT_USE
 (0x02UË

	)

43 
	#_02_PMn1_MODE_INPUT
 (0x02UË

	)

44 
	#_00_PMn1_MODE_OUTPUT
 (0x00UË

	)

45 
	#_04_PMn2_NOT_USE
 (0x04UË

	)

46 
	#_04_PMn2_MODE_INPUT
 (0x04UË

	)

47 
	#_00_PMn2_MODE_OUTPUT
 (0x00UË

	)

48 
	#_08_PMn3_NOT_USE
 (0x08UË

	)

49 
	#_08_PMn3_MODE_INPUT
 (0x08UË

	)

50 
	#_00_PMn3_MODE_OUTPUT
 (0x00UË

	)

51 
	#_10_PMn4_NOT_USE
 (0x10UË

	)

52 
	#_10_PMn4_MODE_INPUT
 (0x10UË

	)

53 
	#_00_PMn4_MODE_OUTPUT
 (0x00UË

	)

54 
	#_20_PMn5_NOT_USE
 (0x20UË

	)

55 
	#_20_PMn5_MODE_INPUT
 (0x20UË

	)

56 
	#_00_PMn5_MODE_OUTPUT
 (0x00UË

	)

57 
	#_40_PMn6_NOT_USE
 (0x40UË

	)

58 
	#_40_PMn6_MODE_INPUT
 (0x40UË

	)

59 
	#_00_PMn6_MODE_OUTPUT
 (0x00UË

	)

60 
	#_80_PMn7_NOT_USE
 (0x80UË

	)

61 
	#_80_PMn7_MODE_INPUT
 (0x80UË

	)

62 
	#_00_PMn7_MODE_OUTPUT
 (0x00UË

	)

68 
	#_00_Pn0_OUTPUT_0
 (0x00UË

	)

69 
	#_01_Pn0_OUTPUT_1
 (0x01UË

	)

70 
	#_00_Pn1_OUTPUT_0
 (0x00UË

	)

71 
	#_02_Pn1_OUTPUT_1
 (0x02UË

	)

72 
	#_00_Pn2_OUTPUT_0
 (0x00UË

	)

73 
	#_04_Pn2_OUTPUT_1
 (0x04UË

	)

74 
	#_00_Pn3_OUTPUT_0
 (0x00UË

	)

75 
	#_08_Pn3_OUTPUT_1
 (0x08UË

	)

76 
	#_00_Pn4_OUTPUT_0
 (0x00UË

	)

77 
	#_10_Pn4_OUTPUT_1
 (0x10UË

	)

78 
	#_00_Pn5_OUTPUT_0
 (0x00UË

	)

79 
	#_20_Pn5_OUTPUT_1
 (0x20UË

	)

80 
	#_00_Pn6_OUTPUT_0
 (0x00UË

	)

81 
	#_40_Pn6_OUTPUT_1
 (0x40UË

	)

82 
	#_00_Pn7_OUTPUT_0
 (0x00UË

	)

83 
	#_80_Pn7_OUTPUT_1
 (0x80UË

	)

89 
	#_00_PUn0_PULLUP_OFF
 (0x00UË

	)

90 
	#_01_PUn0_PULLUP_ON
 (0x01UË

	)

91 
	#_00_PUn1_PULLUP_OFF
 (0x00UË

	)

92 
	#_02_PUn1_PULLUP_ON
 (0x02UË

	)

93 
	#_00_PUn2_PULLUP_OFF
 (0x00UË

	)

94 
	#_04_PUn2_PULLUP_ON
 (0x04UË

	)

95 
	#_00_PUn3_PULLUP_OFF
 (0x00UË

	)

96 
	#_08_PUn3_PULLUP_ON
 (0x08UË

	)

97 
	#_00_PUn4_PULLUP_OFF
 (0x00UË

	)

98 
	#_10_PUn4_PULLUP_ON
 (0x10UË

	)

99 
	#_00_PUn5_PULLUP_OFF
 (0x00UË

	)

100 
	#_20_PUn5_PULLUP_ON
 (0x20UË

	)

101 
	#_00_PUn6_PULLUP_OFF
 (0x00UË

	)

102 
	#_40_PUn6_PULLUP_ON
 (0x40UË

	)

103 
	#_00_PUn7_PULLUP_OFF
 (0x00UË

	)

104 
	#_80_PUn7_PULLUP_ON
 (0x80UË

	)

110 
	#_00_PIMn0_TTL_OFF
 (0x00UË

	)

111 
	#_01_PIMn0_TTL_ON
 (0x01UË

	)

112 
	#_00_PIMn1_TTL_OFF
 (0x00UË

	)

113 
	#_02_PIMn1_TTL_ON
 (0x02UË

	)

114 
	#_00_PIMn2_TTL_OFF
 (0x00UË

	)

115 
	#_04_PIMn2_TTL_ON
 (0x04UË

	)

116 
	#_00_PIMn3_TTL_OFF
 (0x00UË

	)

117 
	#_08_PIMn3_TTL_ON
 (0x08UË

	)

118 
	#_00_PIMn4_TTL_OFF
 (0x00UË

	)

119 
	#_10_PIMn4_TTL_ON
 (0x10UË

	)

120 
	#_00_PIMn5_TTL_OFF
 (0x00UË

	)

121 
	#_20_PIMn5_TTL_ON
 (0x20UË

	)

122 
	#_00_PIMn6_TTL_OFF
 (0x00UË

	)

123 
	#_40_PIMn6_TTL_ON
 (0x40UË

	)

124 
	#_00_PIMn7_TTL_OFF
 (0x00UË

	)

125 
	#_80_PIMn7_TTL_ON
 (0x80UË

	)

131 
	#_00_POMn0_NCH_OFF
 (0x00UË

	)

132 
	#_01_POMn0_NCH_ON
 (0x01UË

	)

133 
	#_00_POMn1_NCH_OFF
 (0x00UË

	)

134 
	#_02_POMn1_NCH_ON
 (0x02UË

	)

135 
	#_00_POMn2_NCH_OFF
 (0x00UË

	)

136 
	#_04_POMn2_NCH_ON
 (0x04UË

	)

137 
	#_00_POMn3_NCH_OFF
 (0x00UË

	)

138 
	#_08_POMn3_NCH_ON
 (0x08UË

	)

139 
	#_00_POMn4_NCH_OFF
 (0x00UË

	)

140 
	#_10_POMn4_NCH_ON
 (0x10UË

	)

141 
	#_00_POMn5_NCH_OFF
 (0x00UË

	)

142 
	#_20_POMn5_NCH_ON
 (0x20UË

	)

143 
	#_00_POMn6_NCH_OFF
 (0x00UË

	)

144 
	#_40_POMn6_NCH_ON
 (0x40UË

	)

145 
	#_00_POMn7_NCH_OFF
 (0x00UË

	)

146 
	#_80_POMn7_NCH_ON
 (0x80UË

	)

152 
	#_01_PMCn0_NOT_USE
 (0x01UË

	)

153 
	#_00_PMCn0_DI_ON
 (0x00UË

	)

154 
	#_02_PMCn1_NOT_USE
 (0x02UË

	)

155 
	#_00_PMCn1_DI_ON
 (0x00UË

	)

156 
	#_04_PMCn2_NOT_USE
 (0x04UË

	)

157 
	#_00_PMCn2_DI_ON
 (0x00UË

	)

158 
	#_08_PMCn3_NOT_USE
 (0x08UË

	)

159 
	#_00_PMCn3_DI_ON
 (0x00UË

	)

160 
	#_10_PMCn4_NOT_USE
 (0x10UË

	)

161 
	#_00_PMCn4_DI_ON
 (0x00UË

	)

162 
	#_20_PMCn5_NOT_USE
 (0x20UË

	)

163 
	#_00_PMCn5_DI_ON
 (0x00UË

	)

164 
	#_40_PMCn6_NOT_USE
 (0x40UË

	)

165 
	#_00_PMCn6_DI_ON
 (0x00UË

	)

166 
	#_80_PMCn7_NOT_USE
 (0x80UË

	)

167 
	#_00_PMCn7_DI_ON
 (0x00UË

	)

173 
	#_00_ADPC_DI_OFF
 (0x00UË

	)

174 
	#_08_ADPC_DI_ON
 (0x08UË

	)

175 
	#_07_ADPC_DI_ON
 (0x07UË

	)

176 
	#_06_ADPC_DI_ON
 (0x06UË

	)

177 
	#_05_ADPC_DI_ON
 (0x05UË

	)

178 
	#_04_ADPC_DI_ON
 (0x04UË

	)

179 
	#_03_ADPC_DI_ON
 (0x03UË

	)

180 
	#_02_ADPC_DI_ON
 (0x02UË

	)

181 
	#_01_ADPC_DI_ON
 (0x01UË

	)

186 
	#_FC_PM0_DEFAULT
 (0xFCUË

	)

187 
	#_FC_PM3_DEFAULT
 (0xFCUË

	)

188 
	#_FC_PM4_DEFAULT
 (0xFCUË

	)

189 
	#_FC_PM5_DEFAULT
 (0xFCUË

	)

190 
	#_F0_PM6_DEFAULT
 (0xF0UË

	)

191 
	#_C0_PM7_DEFAULT
 (0xC0UË

	)

192 
	#_FE_PM12_DEFAULT
 (0xFEUË

	)

193 
	#_3E_PM14_DEFAULT
 (0x3EUË

	)

194 
	#_FE_PMC12_DEFAULT
 (0xFEUË

	)

195 
	#_7F_PMC14_DEFAULT
 (0x7FUË

	)

204 
R_PORT_Cª©e
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_port_user.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_p‹t.h
"

42 
	~"r_cg_u£rdeföe.h
"

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_serial.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_£rül.h
"

42 
	~"r_cg_u£rdeföe.h
"

47 vﬁ©ûê
uöt8_t
 * 
	ggp_u¨t1_tx_addªss
;

48 vﬁ©ûê
uöt16_t
 
	gg_u¨t1_tx_cou¡
;

49 vﬁ©ûê
uöt8_t
 * 
	ggp_u¨t1_rx_addªss
;

50 vﬁ©ûê
uöt16_t
 
	gg_u¨t1_rx_cou¡
;

51 vﬁ©ûê
uöt16_t
 
	gg_u¨t1_rx_Àngth
;

52 vﬁ©ûê
uöt8_t
 
	gg_iiˇ0_ma°î_°©us_Êag
;

53 vﬁ©ûê
uöt8_t
 
	gg_iiˇ0_¶ave_°©us_Êag
;

54 vﬁ©ûê
uöt8_t
 * 
	ggp_iiˇ0_rx_addªss
;

55 vﬁ©ûê
uöt16_t
 
	gg_iiˇ0_rx_Àn
;

56 vﬁ©ûê
uöt16_t
 
	gg_iiˇ0_rx_˙t
;

57 vﬁ©ûê
uöt8_t
 * 
	ggp_iiˇ0_tx_addªss
;

58 vﬁ©ûê
uöt16_t
 
	gg_iiˇ0_tx_˙t
;

68 
	$R_SAU0_Cª©e
()

70 
SAU0EN
 = 1U;

71 
	`NOP
();

72 
	`NOP
();

73 
	`NOP
();

74 
	`NOP
();

75 
SPS0
 = 
_0001_SAU_CK00_FCLK_1
 | 
_0010_SAU_CK01_FCLK_1
;

76 
	`R_UART1_Cª©e
();

77 
	}
}

85 
	$R_UART1_Cª©e
()

87 
ST0
 |
_0008_SAU_CH3_STOP_TRG_ON
 | 
_0004_SAU_CH2_STOP_TRG_ON
;

88 
STMK1
 = 1U;

89 
STIF1
 = 0U;

90 
SRMK1
 = 1U;

91 
SRIF1
 = 0U;

92 
SREMK1
 = 1U;

93 
SREIF1
 = 0U;

95 
STPR11
 = 1U;

96 
STPR01
 = 1U;

98 
SRPR11
 = 1U;

99 
SRPR01
 = 1U;

100 
SMR02
 = 
_0020_SAU_SMRMN_INITIALVALUE
 | 
_0000_SAU_CLOCK_SELECT_CK00
 | 
_0000_SAU_TRIGGER_SOFTWARE
 |

101 
_0002_SAU_MODE_UART
 | 
_0000_SAU_TRANSFER_END
;

102 
SCR02
 = 
_8000_SAU_TRANSMISSION
 | 
_0000_SAU_INTSRE_MASK
 | 
_0000_SAU_PARITY_NONE
 | 
_0080_SAU_LSB
 | 
_0010_SAU_STOP_1
 |

103 
_0007_SAU_LENGTH_8
;

104 
SDR02
 = 
_8800_UART1_TRANSMIT_DIVISOR
;

105 
NFEN0
 |
_04_SAU_RXD1_FILTER_ON
;

106 
SIR03
 = 
_0004_SAU_SIRMN_FECTMN
 | 
_0002_SAU_SIRMN_PECTMN
 | 
_0001_SAU_SIRMN_OVCTMN
;

107 
SMR03
 = 
_0020_SAU_SMRMN_INITIALVALUE
 | 
_0000_SAU_CLOCK_SELECT_CK00
 | 
_0100_SAU_TRIGGER_RXD
 | 
_0000_SAU_EDGE_FALL
 |

108 
_0002_SAU_MODE_UART
 | 
_0000_SAU_TRANSFER_END
;

109 
SCR03
 = 
_4000_SAU_RECEPTION
 | 
_0000_SAU_INTSRE_MASK
 | 
_0000_SAU_PARITY_NONE
 | 
_0080_SAU_LSB
 | 
_0010_SAU_STOP_1
 |

110 
_0007_SAU_LENGTH_8
;

111 
SDR03
 = 
_8800_UART1_RECEIVE_DIVISOR
;

112 
SO0
 |
_0004_SAU_CH2_DATA_OUTPUT_1
;

113 
SOL0
 |
_0000_SAU_CHANNEL2_NORMAL
;

114 
SOE0
 |
_0004_SAU_CH2_OUTPUT_ENABLE
;

116 
PM0
 |= 0x02U;

118 
P0
 |= 0x01U;

119 
PM0
 &= 0xFEU;

120 
	}
}

128 
	$R_UART1_Sèπ
()

130 
SO0
 |
_0004_SAU_CH2_DATA_OUTPUT_1
;

131 
SOE0
 |
_0004_SAU_CH2_OUTPUT_ENABLE
;

132 
SS0
 |
_0008_SAU_CH3_START_TRG_ON
 | 
_0004_SAU_CH2_START_TRG_ON
;

133 
STIF1
 = 0U;

134 
SRIF1
 = 0U;

135 
STMK1
 = 0U;

136 
SRMK1
 = 0U;

137 
	}
}

145 
	$R_UART1_St›
()

147 
STMK1
 = 1U;

148 
SRMK1
 = 1U;

149 
ST0
 |
_0008_SAU_CH3_STOP_TRG_ON
 | 
_0004_SAU_CH2_STOP_TRG_ON
;

150 
SOE0
 &~
_0004_SAU_CH2_OUTPUT_ENABLE
;

151 
STIF1
 = 0U;

152 
SRIF1
 = 0U;

154 
	}
}

166 
MD_STATUS
 
	$R_UART1_Re˚ive
(
uöt8_t
 * c⁄° 
rx_buf
, 
uöt16_t
 
rx_num
)

168 
MD_STATUS
 
°©us
 = 
MD_OK
;

170 i‡(
rx_num
 < 1U)

172 
°©us
 = 
MD_ARGERROR
;

176 
g_u¨t1_rx_cou¡
 = 0U;

177 
g_u¨t1_rx_Àngth
 = 
rx_num
;

178 
gp_u¨t1_rx_addªss
 = 
rx_buf
;

181  (
°©us
);

182 
	}
}

194 
MD_STATUS
 
	$R_UART1_Síd
(
uöt8_t
 * c⁄° 
tx_buf
, 
uöt16_t
 
tx_num
)

196 
MD_STATUS
 
°©us
 = 
MD_OK
;

198 i‡(
tx_num
 < 1U)

200 
°©us
 = 
MD_ARGERROR
;

204 
gp_u¨t1_tx_addªss
 = 
tx_buf
;

205 
g_u¨t1_tx_cou¡
 = 
tx_num
;

206 
STMK1
 = 1U;

207 
TXD1
 = *
gp_u¨t1_tx_addªss
;

208 
gp_u¨t1_tx_addªss
++;

209 
g_u¨t1_tx_cou¡
--;

210 
STMK1
 = 0U;

213  (
°©us
);

214 
	}
}

222 
	$R_IICA0_Cª©e
()

224 
IICA0EN
 = 1U;

225 
IICE0
 = 0U;

226 
IICAMK0
 = 1U;

227 
IICAIF0
 = 0U;

229 
IICAPR10
 = 1U;

230 
IICAPR00
 = 0U;

232 
P6
 &= 0xFCU;

233 
PM6
 |= 0x03U;

234 
SMC0
 = 0U;

235 
IICWL0
 = 
_4C_IICA0_IICWL_VALUE
;

236 
IICWH0
 = 
_55_IICA0_IICWH_VALUE
;

237 
IICCTL01
 |
_01_IICA_fCLK_HALF
;

238 
SVA0
 = 
_10_IICA0_MASTERADDRESS
;

239 
STCEN0
 = 1U;

240 
IICRSV0
 = 1U;

241 
SPIE0
 = 0U;

242 
WTIM0
 = 1U;

243 
ACKE0
 = 1U;

244 
IICAMK0
 = 0U;

245 
IICE0
 = 1U;

246 
LREL0
 = 1U;

248 
PM6
 &= 0xFCU;

249 
	}
}

257 
	$R_IICA0_St›
()

259 
IICE0
 = 0U;

260 
	}
}

268 
	$R_IICA0_St›C⁄dôi⁄
()

270 
SPT0
 = 1U;

271 
	}
}

287 
MD_STATUS
 
	$R_IICA0_Ma°î_Síd
(
uöt8_t
 
adr
, uöt8_à* c⁄° 
tx_buf
, 
uöt16_t
 
tx_num
, uöt8_à
waô
)

289 
MD_STATUS
 
°©us
 = 
MD_OK
;

291 
IICAMK0
 = 1U;

293 i‡(1U =
IICBSY0
)

296 
IICAMK0
 = 0U;

297 
°©us
 = 
MD_ERROR1
;

301 
STT0
 = 1U;

302 
IICAMK0
 = 0U;

305 
waô
--)

310 i‡(0U =
STD0
)

312 
°©us
 = 
MD_ERROR2
;

316 
g_iiˇ0_tx_˙t
 = 
tx_num
;

317 
gp_iiˇ0_tx_addªss
 = 
tx_buf
;

318 
g_iiˇ0_ma°î_°©us_Êag
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

319 
adr
 &(
uöt8_t
)~0x01U;

320 
IICA0
 = 
adr
;

323  (
°©us
);

324 
	}
}

340 
MD_STATUS
 
	$R_IICA0_Ma°î_Re˚ive
(
uöt8_t
 
adr
, uöt8_à* c⁄° 
rx_buf
, 
uöt16_t
 
rx_num
, uöt8_à
waô
)

342 
MD_STATUS
 
°©us
 = 
MD_OK
;

344 
IICAMK0
 = 1U;

346 i‡(1U =
IICBSY0
)

349 
IICAMK0
 = 0U;

350 
°©us
 = 
MD_ERROR1
;

354 
STT0
 = 1U;

355 
IICAMK0
 = 0U;

358 
waô
--)

363 i‡(0U =
STD0
)

365 
°©us
 = 
MD_ERROR2
;

369 
g_iiˇ0_rx_Àn
 = 
rx_num
;

370 
g_iiˇ0_rx_˙t
 = 0U;

371 
gp_iiˇ0_rx_addªss
 = 
rx_buf
;

372 
g_iiˇ0_ma°î_°©us_Êag
 = 
_00_IICA_MASTER_FLAG_CLEAR
;

373 
adr
 |= 0x01U;

374 
IICA0
 = 
adr
;

377  (
°©us
);

378 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_serial.h

29 #i‚de‡
SERIAL_H


30 
	#SERIAL_H


	)

39 
	#_0000_SAU_CK00_FCLK_0
 (0x0000UË

	)

40 
	#_0001_SAU_CK00_FCLK_1
 (0x0001UË

	)

41 
	#_0002_SAU_CK00_FCLK_2
 (0x0002UË

	)

42 
	#_0003_SAU_CK00_FCLK_3
 (0x0003UË

	)

43 
	#_0004_SAU_CK00_FCLK_4
 (0x0004UË

	)

44 
	#_0005_SAU_CK00_FCLK_5
 (0x0005UË

	)

45 
	#_0006_SAU_CK00_FCLK_6
 (0x0006UË

	)

46 
	#_0007_SAU_CK00_FCLK_7
 (0x0007UË

	)

47 
	#_0008_SAU_CK00_FCLK_8
 (0x0008UË

	)

48 
	#_0009_SAU_CK00_FCLK_9
 (0x0009UË

	)

49 
	#_000A_SAU_CK00_FCLK_10
 (0x000AUË

	)

50 
	#_000B_SAU_CK00_FCLK_11
 (0x000BUË

	)

51 
	#_000C_SAU_CK00_FCLK_12
 (0x000CUË

	)

52 
	#_000D_SAU_CK00_FCLK_13
 (0x000DUË

	)

53 
	#_000E_SAU_CK00_FCLK_14
 (0x000EUË

	)

54 
	#_000F_SAU_CK00_FCLK_15
 (0x000FUË

	)

56 
	#_0000_SAU_CK01_FCLK_0
 (0x0000UË

	)

57 
	#_0010_SAU_CK01_FCLK_1
 (0x0010UË

	)

58 
	#_0020_SAU_CK01_FCLK_2
 (0x0020UË

	)

59 
	#_0030_SAU_CK01_FCLK_3
 (0x0030UË

	)

60 
	#_0040_SAU_CK01_FCLK_4
 (0x0040UË

	)

61 
	#_0050_SAU_CK01_FCLK_5
 (0x0050UË

	)

62 
	#_0060_SAU_CK01_FCLK_6
 (0x0060UË

	)

63 
	#_0070_SAU_CK01_FCLK_7
 (0x0070UË

	)

64 
	#_0080_SAU_CK01_FCLK_8
 (0x0080UË

	)

65 
	#_0090_SAU_CK01_FCLK_9
 (0x0090UË

	)

66 
	#_00A0_SAU_CK01_FCLK_10
 (0x00A0UË

	)

67 
	#_00B0_SAU_CK01_FCLK_11
 (0x00B0UË

	)

68 
	#_00C0_SAU_CK01_FCLK_12
 (0x00C0UË

	)

69 
	#_00D0_SAU_CK01_FCLK_13
 (0x00D0UË

	)

70 
	#_00E0_SAU_CK01_FCLK_14
 (0x00E0UË

	)

71 
	#_00F0_SAU_CK01_FCLK_15
 (0x00F0UË

	)

76 
	#_0020_SAU_SMRMN_INITIALVALUE
 (0x0020U)

	)

78 
	#_0000_SAU_CLOCK_SELECT_CK00
 (0x0000UË

	)

79 
	#_8000_SAU_CLOCK_SELECT_CK01
 (0x8000UË

	)

81 
	#_0000_SAU_CLOCK_MODE_CKS
 (0x0000UË

	)

82 
	#_4000_SAU_CLOCK_MODE_TI0N
 (0x4000UË

	)

84 
	#_0000_SAU_TRIGGER_SOFTWARE
 (0x0000UË

	)

85 
	#_0100_SAU_TRIGGER_RXD
 (0x0100UË

	)

87 
	#_0000_SAU_EDGE_FALL
 (0x0000UË

	)

88 
	#_0040_SAU_EDGE_RISING
 (0x0040UË

	)

90 
	#_0000_SAU_MODE_CSI
 (0x0000UË

	)

91 
	#_0002_SAU_MODE_UART
 (0x0002UË

	)

92 
	#_0004_SAU_MODE_IIC
 (0x0004UË

	)

94 
	#_0000_SAU_TRANSFER_END
 (0x0000UË

	)

95 
	#_0001_SAU_BUFFER_EMPTY
 (0x0001UË

	)

101 
	#_0000_SAU_NOT_COMMUNICATION
 (0x0000UË

	)

102 
	#_4000_SAU_RECEPTION
 (0x4000UË

	)

103 
	#_8000_SAU_TRANSMISSION
 (0x8000UË

	)

104 
	#_C000_SAU_RECEPTION_TRANSMISSION
 (0xC000UË

	)

106 
	#_0000_SAU_TIMING_1
 (0x0000UË

	)

107 
	#_1000_SAU_TIMING_2
 (0x1000UË

	)

108 
	#_2000_SAU_TIMING_3
 (0x2000UË

	)

109 
	#_3000_SAU_TIMING_4
 (0x3000UË

	)

111 
	#_0000_SAU_INTSRE_MASK
 (0x0000UË

	)

112 
	#_0400_SAU_INTSRE_ENABLE
 (0x0400UË

	)

114 
	#_0000_SAU_PARITY_NONE
 (0x0000UË

	)

115 
	#_0100_SAU_PARITY_ZERO
 (0x0100UË

	)

116 
	#_0200_SAU_PARITY_EVEN
 (0x0200UË

	)

117 
	#_0300_SAU_PARITY_ODD
 (0x0300UË

	)

119 
	#_0000_SAU_MSB
 (0x0000UË

	)

120 
	#_0080_SAU_LSB
 (0x0080UË

	)

122 
	#_0000_SAU_STOP_NONE
 (0x0000UË

	)

123 
	#_0010_SAU_STOP_1
 (0x0010UË

	)

124 
	#_0020_SAU_STOP_2
 (0x0020UË

	)

126 
	#_0005_SAU_LENGTH_9
 (0x0005UË

	)

127 
	#_0006_SAU_LENGTH_7
 (0x0006UË

	)

128 
	#_0007_SAU_LENGTH_8
 (0x0007UË

	)

134 
	#_0000_SAU_CHANNEL0_NORMAL
 (0x0000UË

	)

135 
	#_0001_SAU_CHANNEL0_INVERTED
 (0x0001UË

	)

136 
	#_0000_SAU_CHANNEL1_NORMAL
 (0x0000UË

	)

137 
	#_0002_SAU_CHANNEL1_INVERTED
 (0x0002UË

	)

138 
	#_0000_SAU_CHANNEL2_NORMAL
 (0x0000UË

	)

139 
	#_0004_SAU_CHANNEL2_INVERTED
 (0x0004UË

	)

140 
	#_0000_SAU_CHANNEL3_NORMAL
 (0x0000UË

	)

141 
	#_0008_SAU_CHANNEL3_INVERTED
 (0x0008UË

	)

147 
	#_00_SAU_RXD3_FILTER_OFF
 (0x00UË

	)

148 
	#_40_SAU_RXD3_FILTER_ON
 (0x40UË

	)

149 
	#_00_SAU_RXD2_FILTER_OFF
 (0x00UË

	)

150 
	#_10_SAU_RXD2_FILTER_ON
 (0x10UË

	)

151 
	#_00_SAU_RXD1_FILTER_OFF
 (0x00UË

	)

152 
	#_04_SAU_RXD1_FILTER_ON
 (0x04UË

	)

153 
	#_00_SAU_RXD0_FILTER_OFF
 (0x00UË

	)

154 
	#_01_SAU_RXD0_FILTER_ON
 (0x01UË

	)

160 
	#_0040_SAU_UNDER_EXECUTE
 (0x0040UË

	)

162 
	#_0020_SAU_VALID_STORED
 (0x0020UË

	)

164 
	#_0004_SAU_FRAM_ERROR
 (0x0004UË

	)

166 
	#_0002_SAU_PARITY_ERROR
 (0x0002UË

	)

168 
	#_0001_SAU_OVERRUN_ERROR
 (0x0001UË

	)

174 
	#_0000_SAU_CH0_START_TRG_OFF
 (0x0000UË

	)

175 
	#_0001_SAU_CH0_START_TRG_ON
 (0x0001UË

	)

177 
	#_0000_SAU_CH1_START_TRG_OFF
 (0x0000UË

	)

178 
	#_0002_SAU_CH1_START_TRG_ON
 (0x0002UË

	)

180 
	#_0000_SAU_CH2_START_TRG_OFF
 (0x0000UË

	)

181 
	#_0004_SAU_CH2_START_TRG_ON
 (0x0004UË

	)

183 
	#_0000_SAU_CH3_START_TRG_OFF
 (0x0000UË

	)

184 
	#_0008_SAU_CH3_START_TRG_ON
 (0x0008UË

	)

190 
	#_0000_SAU_CH0_STOP_TRG_OFF
 (0x0000UË

	)

191 
	#_0001_SAU_CH0_STOP_TRG_ON
 (0x0001UË

	)

193 
	#_0000_SAU_CH1_STOP_TRG_OFF
 (0x0000UË

	)

194 
	#_0002_SAU_CH1_STOP_TRG_ON
 (0x0002UË

	)

196 
	#_0000_SAU_CH2_STOP_TRG_OFF
 (0x0000UË

	)

197 
	#_0004_SAU_CH2_STOP_TRG_ON
 (0x0004UË

	)

199 
	#_0000_SAU_CH3_STOP_TRG_OFF
 (0x0000UË

	)

200 
	#_0008_SAU_CH3_STOP_TRG_ON
 (0x0008UË

	)

206 
	#_0001_SAU_SIRMN_OVCTMN
 (0x0001U)

	)

208 
	#_0002_SAU_SIRMN_PECTMN
 (0x0002U)

	)

210 
	#_0004_SAU_SIRMN_FECTMN
 (0x0004U)

	)

216 
	#_0001_SAU_CH0_OUTPUT_ENABLE
 (0x0001UË

	)

217 
	#_0000_SAU_CH0_OUTPUT_DISABLE
 (0x0000UË

	)

219 
	#_0002_SAU_CH1_OUTPUT_ENABLE
 (0x0002UË

	)

220 
	#_0000_SAU_CH1_OUTPUT_DISABLE
 (0x0000UË

	)

222 
	#_0004_SAU_CH2_OUTPUT_ENABLE
 (0x0004UË

	)

223 
	#_0000_SAU_CH2_OUTPUT_DISABLE
 (0x0000UË

	)

225 
	#_0008_SAU_CH3_OUTPUT_ENABLE
 (0x0008UË

	)

226 
	#_0000_SAU_CH3_OUTPUT_DISABLE
 (0x0000UË

	)

232 
	#_0000_SAU_CH0_DATA_OUTPUT_0
 (0x0000UË

	)

233 
	#_0001_SAU_CH0_DATA_OUTPUT_1
 (0x0001UË

	)

235 
	#_0000_SAU_CH1_DATA_OUTPUT_0
 (0x0000UË

	)

236 
	#_0002_SAU_CH1_DATA_OUTPUT_1
 (0x0002UË

	)

238 
	#_0000_SAU_CH2_DATA_OUTPUT_0
 (0x0000UË

	)

239 
	#_0004_SAU_CH2_DATA_OUTPUT_1
 (0x0004UË

	)

241 
	#_0000_SAU_CH3_DATA_OUTPUT_0
 (0x0000UË

	)

242 
	#_0008_SAU_CH3_DATA_OUTPUT_1
 (0x0008UË

	)

244 
	#_0000_SAU_CH0_CLOCK_OUTPUT_0
 (0x0000UË

	)

245 
	#_0100_SAU_CH0_CLOCK_OUTPUT_1
 (0x0100UË

	)

247 
	#_0000_SAU_CH1_CLOCK_OUTPUT_0
 (0x0000UË

	)

248 
	#_0200_SAU_CH1_CLOCK_OUTPUT_1
 (0x0200UË

	)

250 
	#_0000_SAU_CH2_CLOCK_OUTPUT_0
 (0x0000UË

	)

251 
	#_0400_SAU_CH2_CLOCK_OUTPUT_1
 (0x0400UË

	)

253 
	#_0000_SAU_CH3_CLOCK_OUTPUT_0
 (0x0000UË

	)

254 
	#_0800_SAU_CH3_CLOCK_OUTPUT_1
 (0x0800UË

	)

260 
	#_0000_SAU_CH0_SNOOZE_OFF
 (0x0000UË

	)

261 
	#_0001_SAU_CH0_SNOOZE_ON
 (0x0001UË

	)

264 
	#_00_SAU_IIC_MASTER_FLAG_CLEAR
 (0x00U)

	)

265 
	#_01_SAU_IIC_SEND_FLAG
 (0x01U)

	)

266 
	#_02_SAU_IIC_RECEIVE_FLAG
 (0x02U)

	)

267 
	#_04_SAU_IIC_SENDED_ADDRESS_FLAG
 (0x04U)

	)

273 
	#_00_SAU_SSI00_UNUSED
 (0x00UË

	)

274 
	#_80_SAU_SSI00_USED
 (0x80UË

	)

280 
	#_00_IICA_OPERATION_DISABLE
 (0x00UË

	)

281 
	#_80_IICA_OPERATION_ENABLE
 (0x80UË

	)

283 
	#_00_IICA_COMMUNICATION_NORMAL
 (0x00UË

	)

284 
	#_40_IICA_COMMUNICATION_EXIT
 (0x40UË

	)

286 
	#_00_IICA_WAIT_NOTCANCEL
 (0x00UË

	)

287 
	#_20_IICA_WAIT_CANCEL
 (0x20UË

	)

289 
	#_00_IICA_STOPINT_DISABLE
 (0x00UË

	)

290 
	#_10_IICA_STOPINT_ENABLE
 (0x10UË

	)

292 
	#_00_IICA_WAITINT_CLK8FALLING
 (0x00UË

	)

293 
	#_08_IICA_WAITINT_CLK9FALLING
 (0x08UË

	)

295 
	#_00_IICA_ACK_DISABLE
 (0x00UË

	)

296 
	#_04_IICA_ACK_ENABLE
 (0x04UË

	)

298 
	#_00_IICA_START_NOTGENERATE
 (0x00UË

	)

299 
	#_02_IICA_START_GENERATE
 (0x02UË

	)

301 
	#_00_IICA_STOP_NOTGENERATE
 (0x00UË

	)

302 
	#_01_IICA_STOP_GENERATE
 (0x01UË

	)

308 
	#_00_IICA_STATUS_NOTMASTER
 (0x00UË

	)

309 
	#_80_IICA_STATUS_MASTER
 (0x80UË

	)

311 
	#_00_IICA_ARBITRATION_NO
 (0x00UË

	)

312 
	#_40_IICA_ARBITRATION_LOSS
 (0x40UË

	)

314 
	#_00_IICA_EXTCODE_NOT
 (0x00UË

	)

315 
	#_20_IICA_EXTCODE_RECEIVED
 (0x20UË

	)

317 
	#_00_IICA_ADDRESS_NOTMATCH
 (0x00UË

	)

318 
	#_10_IICA_ADDRESS_MATCH
 (0x10UË

	)

320 
	#_00_IICA_STATUS_RECEIVE
 (0x00UË

	)

321 
	#_08_IICA_STATUS_TRANSMIT
 (0x08UË

	)

323 
	#_00_IICA_ACK_NOTDETECTED
 (0x00UË

	)

324 
	#_04_IICA_ACK_DETECTED
 (0x04UË

	)

326 
	#_00_IICA_START_NOTDETECTED
 (0x00UË

	)

327 
	#_02_IICA_START_DETECTED
 (0x02UË

	)

329 
	#_00_IICA_STOP_NOTDETECTED
 (0x00UË

	)

330 
	#_01_IICA_STOP_DETECTED
 (0x01UË

	)

336 
	#_00_IICA_STARTFLAG_GENERATE
 (0x00UË

	)

337 
	#_80_IICA_STARTFLAG_UNSUCCESSFUL
 (0x80UË

	)

339 
	#_00_IICA_BUS_RELEASE
 (0x00UË

	)

340 
	#_40_IICA_BUS_COMMUNICATION
 (0x40UË

	)

342 
	#_00_IICA_START_WITHSTOP
 (0x00UË

	)

343 
	#_02_IICA_START_WITHOUTSTOP
 (0x02UË

	)

345 
	#_00_IICA_RESERVATION_ENABLE
 (0x00UË

	)

346 
	#_01_IICA_RESERVATION_DISABLE
 (0x01UË

	)

352 
	#_00_IICA_WAKEUP_STOP
 (0x00UË

	)

353 
	#_80_IICA_WAKEUP_ENABLE
 (0x80UË

	)

355 
	#_00_IICA_SCL_LOW
 (0x00UË

	)

356 
	#_20_IICA_SCL_HIGH
 (0x20UË

	)

358 
	#_00_IICA_SDA_LOW
 (0x00UË

	)

359 
	#_10_IICA_SDA_HIGH
 (0x10UË

	)

361 
	#_00_IICA_MODE_STANDARD
 (0x00UË

	)

362 
	#_08_IICA_MODE_HIGHSPEED
 (0x08UË

	)

364 
	#_00_IICA_FILTER_OFF
 (0x00UË

	)

365 
	#_04_IICA_FILTER_ON
 (0x04UË

	)

367 
	#_00_IICA_fCLK
 (0x00UË

	)

368 
	#_01_IICA_fCLK_HALF
 (0x01UË

	)

370 
	#_80_IICA_ADDRESS_COMPLETE
 (0x80U)

	)

371 
	#_00_IICA_MASTER_FLAG_CLEAR
 (0x00U)

	)

376 
	#_8800_UART1_RECEIVE_DIVISOR
 (0x8800U)

	)

377 
	#_8800_UART1_TRANSMIT_DIVISOR
 (0x8800U)

	)

378 
	#_10_IICA0_MASTERADDRESS
 (0x10U)

	)

379 
	#_55_IICA0_IICWH_VALUE
 (0x55U)

	)

380 
	#_4C_IICA0_IICWL_VALUE
 (0x4CU)

	)

389 
R_SAU0_Cª©e
();

390 
R_UART1_Cª©e
();

391 
R_UART1_Sèπ
();

392 
R_UART1_St›
();

393 
MD_STATUS
 
R_UART1_Síd
(
uöt8_t
 * c⁄° 
tx_buf
, 
uöt16_t
 
tx_num
);

394 
MD_STATUS
 
R_UART1_Re˚ive
(
uöt8_t
 * c⁄° 
rx_buf
, 
uöt16_t
 
rx_num
);

395 
r_u¨t1_ˇŒback_îr‹
(
uöt8_t
 
îr_ty≥
);

396 
r_u¨t1_ˇŒback_ª˚ivìnd
();

397 
r_u¨t1_ˇŒback_£ndíd
();

398 
r_u¨t1_ˇŒback_so·w¨eovîrun
(
uöt16_t
 
rx_d©a
);

399 
R_IICA0_Cª©e
();

400 
MD_STATUS
 
R_IICA0_Ma°î_Síd
(
uöt8_t
 
adr
, uöt8_à* c⁄° 
tx_buf
, 
uöt16_t
 
tx_num
, uöt8_à
waô
);

401 
MD_STATUS
 
R_IICA0_Ma°î_Re˚ive
(
uöt8_t
 
adr
, uöt8_à* c⁄° 
rx_buf
, 
uöt16_t
 
rx_num
, uöt8_à
waô
);

402 
R_IICA0_St›
();

403 
R_IICA0_St›C⁄dôi⁄
();

404 
r_iiˇ0_ˇŒback_ma°î_£ndíd
();

405 
r_iiˇ0_ˇŒback_ma°î_ª˚ivìnd
();

406 
r_iiˇ0_ˇŒback_ma°î_îr‹
(
MD_STATUS
 
Êag
);

407 
iiˇ0_ma°î_h™dÀr
();

408 
iiˇ0_¶ave_h™dÀr
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_serial_user.c

32 #¥agm®
öãºu±
 
INTST1
 
r_u¨t1_öãºu±_£nd


33 #¥agm®
öãºu±
 
INTSR1
 
r_u¨t1_öãºu±_ª˚ive


34 #¥agm®
öãºu±
 
INTIICA0
 
r_iiˇ0_öãºu±


41 
	~"r_cg_ma¸odrivî.h
"

42 
	~"r_cg_£rül.h
"

45 
	~"r_cg_u£rdeföe.h
"

50 vﬁ©ûê
uöt8_t
 * 
gp_u¨t1_tx_addªss
;

51 vﬁ©ûê
uöt16_t
 
g_u¨t1_tx_cou¡
;

52 vﬁ©ûê
uöt8_t
 * 
gp_u¨t1_rx_addªss
;

53 vﬁ©ûê
uöt16_t
 
g_u¨t1_rx_cou¡
;

54 vﬁ©ûê
uöt16_t
 
g_u¨t1_rx_Àngth
;

55 vﬁ©ûê
uöt8_t
 
g_iiˇ0_ma°î_°©us_Êag
;

56 vﬁ©ûê
uöt8_t
 
g_iiˇ0_¶ave_°©us_Êag
;

57 vﬁ©ûê
uöt8_t
 * 
gp_iiˇ0_rx_addªss
;

58 vﬁ©ûê
uöt16_t
 
g_iiˇ0_rx_˙t
;

59 vﬁ©ûê
uöt16_t
 
g_iiˇ0_rx_Àn
;

60 vﬁ©ûê
uöt8_t
 * 
gp_iiˇ0_tx_addªss
;

61 vﬁ©ûê
uöt16_t
 
g_iiˇ0_tx_˙t
;

71 
__öãºu±
 
	$r_u¨t1_öãºu±_ª˚ive
()

73 vﬁ©ûê
uöt8_t
 
rx_d©a
;

74 vﬁ©ûê
uöt8_t
 
îr_ty≥
;

76 
îr_ty≥
 = (
uöt8_t
)(
SSR03
 & 0x0007U);

77 
SIR03
 = (
uöt16_t
)
îr_ty≥
;

79 i‡(
îr_ty≥
 != 0U)

81 
	`r_u¨t1_ˇŒback_îr‹
(
îr_ty≥
);

84 
rx_d©a
 = 
RXD1
;

86 i‡(
g_u¨t1_rx_Àngth
 > 
g_u¨t1_rx_cou¡
)

88 *
gp_u¨t1_rx_addªss
 = 
rx_d©a
;

89 
gp_u¨t1_rx_addªss
++;

90 
g_u¨t1_rx_cou¡
++;

92 i‡(
g_u¨t1_rx_Àngth
 =
g_u¨t1_rx_cou¡
)

94 
	`r_u¨t1_ˇŒback_ª˚ivìnd
();

99 
	`r_u¨t1_ˇŒback_so·w¨eovîrun
(
rx_d©a
);

101 
	}
}

109 
__öãºu±
 
	$r_u¨t1_öãºu±_£nd
()

111 i‡(
g_u¨t1_tx_cou¡
 > 0U)

113 
TXD1
 = *
gp_u¨t1_tx_addªss
;

114 
gp_u¨t1_tx_addªss
++;

115 
g_u¨t1_tx_cou¡
--;

119 
	`r_u¨t1_ˇŒback_£ndíd
();

121 
	}
}

129 
	$r_u¨t1_ˇŒback_ª˚ivìnd
()

133 
	}
}

142 
	$r_u¨t1_ˇŒback_so·w¨eovîrun
(
uöt16_t
 
rx_d©a
)

146 
	}
}

154 
	$r_u¨t1_ˇŒback_£ndíd
()

158 
	}
}

167 
	$r_u¨t1_ˇŒback_îr‹
(
uöt8_t
 
îr_ty≥
)

171 
	}
}

179 
__öãºu±
 
	$r_iiˇ0_öãºu±
()

181 i‡((
IICS0
 & 
_80_IICA_STATUS_MASTER
) == 0x80U)

183 
	`iiˇ0_ma°î_h™dÀr
();

185 
	}
}

193 
	$iiˇ0_ma°î_h™dÀr
()

196 i‡((0U =
IICBSY0
Ë&& (
g_iiˇ0_tx_˙t
 != 0U))

198 
	`r_iiˇ0_ˇŒback_ma°î_îr‹
(
MD_SPT
);

203 i‡((
g_iiˇ0_ma°î_°©us_Êag
 & 
_80_IICA_ADDRESS_COMPLETE
) == 0U)

205 i‡(1U =
ACKD0
)

207 
g_iiˇ0_ma°î_°©us_Êag
 |
_80_IICA_ADDRESS_COMPLETE
;

209 i‡(1U =
TRC0
)

211 
WTIM0
 = 1U;

213 i‡(
g_iiˇ0_tx_˙t
 > 0U)

215 
IICA0
 = *
gp_iiˇ0_tx_addªss
;

216 
gp_iiˇ0_tx_addªss
++;

217 
g_iiˇ0_tx_˙t
--;

221 
	`r_iiˇ0_ˇŒback_ma°î_£ndíd
();

226 
ACKE0
 = 1U;

227 
WTIM0
 = 0U;

228 
WREL0
 = 1U;

233 
	`r_iiˇ0_ˇŒback_ma°î_îr‹
(
MD_NACK
);

239 i‡(1U =
TRC0
)

241 i‡((0U =
ACKD0
Ë&& (
g_iiˇ0_tx_˙t
 != 0U))

243 
	`r_iiˇ0_ˇŒback_ma°î_îr‹
(
MD_NACK
);

247 i‡(
g_iiˇ0_tx_˙t
 > 0U)

249 
IICA0
 = *
gp_iiˇ0_tx_addªss
;

250 
gp_iiˇ0_tx_addªss
++;

251 
g_iiˇ0_tx_˙t
--;

255 
	`r_iiˇ0_ˇŒback_ma°î_£ndíd
();

262 i‡(
g_iiˇ0_rx_˙t
 < 
g_iiˇ0_rx_Àn
)

264 *
gp_iiˇ0_rx_addªss
 = 
IICA0
;

265 
gp_iiˇ0_rx_addªss
++;

266 
g_iiˇ0_rx_˙t
++;

268 i‡(
g_iiˇ0_rx_˙t
 =
g_iiˇ0_rx_Àn
)

270 
ACKE0
 = 0U;

271 
WTIM0
 = 1U;

272 
WREL0
 = 1U;

276 
WREL0
 = 1U;

281 
	`r_iiˇ0_ˇŒback_ma°î_ª˚ivìnd
();

286 
	}
}

294 
	$r_iiˇ0_ˇŒback_ma°î_îr‹
(
MD_STATUS
 
Êag
)

298 
	}
}

306 
	$r_iiˇ0_ˇŒback_ma°î_ª˚ivìnd
()

308 
SPT0
 = 1U;

311 
	}
}

319 
	$r_iiˇ0_ˇŒback_ma°î_£ndíd
()

321 
SPT0
 = 1U;

324 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_timer.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_timî.h
"

42 
	~"r_cg_u£rdeföe.h
"

56 
	$R_TAU0_Cª©e
()

58 
TAU0EN
 = 1U;

59 
TPS0
 = 
_0000_TAU_CKM0_FCLK_0
 | 
_0000_TAU_CKM1_FCLK_0
 | 
_0000_TAU_CKM2_FCLK_1
 | 
_0000_TAU_CKM3_FCLK_8
;

61 
TT0
 = 
_0001_TAU_CH0_STOP_TRG_ON
 | 
_0002_TAU_CH1_STOP_TRG_ON
 | 
_0004_TAU_CH2_STOP_TRG_ON
 |

62 
_0008_TAU_CH3_STOP_TRG_ON
 | 
_0010_TAU_CH4_STOP_TRG_ON
 | 
_0020_TAU_CH5_STOP_TRG_ON
 |

63 
_0040_TAU_CH6_STOP_TRG_ON
 | 
_0080_TAU_CH7_STOP_TRG_ON
 | 
_0200_TAU_CH1_H8_STOP_TRG_ON
 |

64 
_0800_TAU_CH3_H8_STOP_TRG_ON
;

66 
TMMK00
 = 1U;

67 
TMIF00
 = 0U;

69 
TMMK01
 = 1U;

70 
TMIF01
 = 0U;

72 
TMMK01H
 = 1U;

73 
TMIF01H
 = 0U;

75 
TMMK02
 = 1U;

76 
TMIF02
 = 0U;

78 
TMMK03
 = 1U;

79 
TMIF03
 = 0U;

81 
TMMK03H
 = 1U;

82 
TMIF03H
 = 0U;

84 
TMMK04
 = 1U;

85 
TMIF04
 = 0U;

87 
TMMK05
 = 1U;

88 
TMIF05
 = 0U;

90 
TMMK06
 = 1U;

91 
TMIF06
 = 0U;

93 
TMMK07
 = 1U;

94 
TMIF07
 = 0U;

96 
TMPR100
 = 1U;

97 
TMPR000
 = 1U;

99 
TMR00
 = 
_0000_TAU_CLOCK_SELECT_CKM0
 | 
_0000_TAU_CLOCK_MODE_CKS
 | 
_0000_TAU_COMBINATION_SLAVE
 |

100 
_0000_TAU_TRIGGER_SOFTWARE
 | 
_0000_TAU_MODE_INTERVAL_TIMER
 | 
_0000_TAU_START_INT_UNUSED
;

101 
TDR00
 = 
_7CFF_TAU_TDR00_VALUE
;

102 
TO0
 &~
_0001_TAU_CH0_OUTPUT_VALUE_1
;

103 
TOE0
 &~
_0001_TAU_CH0_OUTPUT_ENABLE
;

104 
	}
}

112 
	$R_TAU0_Ch™√l0_Sèπ
()

114 
TMIF00
 = 0U;

115 
TMMK00
 = 0U;

116 
TS0
 |
_0001_TAU_CH0_START_TRG_ON
;

117 
	}
}

125 
	$R_TAU0_Ch™√l0_St›
()

127 
TT0
 |
_0001_TAU_CH0_STOP_TRG_ON
;

129 
TMMK00
 = 1U;

130 
TMIF00
 = 0U;

131 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_timer.h

29 #i‚de‡
TAU_H


30 
	#TAU_H


	)

39 
	#_00_TAU0_CLOCK_STOP
 (0x00UË

	)

40 
	#_01_TAU0_CLOCK_SUPPLY
 (0x01UË

	)

46 
	#_0000_TAU_CKM0_FCLK_0
 (0x0000UË

	)

47 
	#_0001_TAU_CKM0_FCLK_1
 (0x0001UË

	)

48 
	#_0002_TAU_CKM0_FCLK_2
 (0x0002UË

	)

49 
	#_0003_TAU_CKM0_FCLK_3
 (0x0003UË

	)

50 
	#_0004_TAU_CKM0_FCLK_4
 (0x0004UË

	)

51 
	#_0005_TAU_CKM0_FCLK_5
 (0x0005UË

	)

52 
	#_0006_TAU_CKM0_FCLK_6
 (0x0006UË

	)

53 
	#_0007_TAU_CKM0_FCLK_7
 (0x0007UË

	)

54 
	#_0008_TAU_CKM0_FCLK_8
 (0x0008UË

	)

55 
	#_0009_TAU_CKM0_FCLK_9
 (0x0009UË

	)

56 
	#_000A_TAU_CKM0_FCLK_10
 (0x000AUË

	)

57 
	#_000B_TAU_CKM0_FCLK_11
 (0x000BUË

	)

58 
	#_000C_TAU_CKM0_FCLK_12
 (0x000CUË

	)

59 
	#_000D_TAU_CKM0_FCLK_13
 (0x000DUË

	)

60 
	#_000E_TAU_CKM0_FCLK_14
 (0x000EUË

	)

61 
	#_000F_TAU_CKM0_FCLK_15
 (0x000FUË

	)

63 
	#_0000_TAU_CKM1_FCLK_0
 (0x0000UË

	)

64 
	#_0010_TAU_CKM1_FCLK_1
 (0x0010UË

	)

65 
	#_0020_TAU_CKM1_FCLK_2
 (0x0020UË

	)

66 
	#_0030_TAU_CKM1_FCLK_3
 (0x0030UË

	)

67 
	#_0040_TAU_CKM1_FCLK_4
 (0x0040UË

	)

68 
	#_0050_TAU_CKM1_FCLK_5
 (0x0050UË

	)

69 
	#_0060_TAU_CKM1_FCLK_6
 (0x0060UË

	)

70 
	#_0070_TAU_CKM1_FCLK_7
 (0x0070UË

	)

71 
	#_0080_TAU_CKM1_FCLK_8
 (0x0080UË

	)

72 
	#_0090_TAU_CKM1_FCLK_9
 (0x0090UË

	)

73 
	#_00A0_TAU_CKM1_FCLK_10
 (0x00A0UË

	)

74 
	#_00B0_TAU_CKM1_FCLK_11
 (0x00B0UË

	)

75 
	#_00C0_TAU_CKM1_FCLK_12
 (0x00C0UË

	)

76 
	#_00D0_TAU_CKM1_FCLK_13
 (0x00D0UË

	)

77 
	#_00E0_TAU_CKM1_FCLK_14
 (0x00E0UË

	)

78 
	#_00F0_TAU_CKM1_FCLK_15
 (0x00F0UË

	)

80 
	#_0000_TAU_CKM2_FCLK_1
 (0x0000UË

	)

81 
	#_0100_TAU_CKM2_FCLK_2
 (0x0100UË

	)

82 
	#_0200_TAU_CKM2_FCLK_4
 (0x0200UË

	)

83 
	#_0300_TAU_CKM2_FCLK_6
 (0x0300UË

	)

85 
	#_0000_TAU_CKM3_FCLK_8
 (0x0000UË

	)

86 
	#_1000_TAU_CKM3_FCLK_10
 (0x1000UË

	)

87 
	#_2000_TAU_CKM3_FCLK_12
 (0x2000UË

	)

88 
	#_3000_TAU_CKM3_FCLK_14
 (0x3000UË

	)

94 
	#_0000_TAU_CLOCK_SELECT_CKM0
 (0x0000UË

	)

95 
	#_8000_TAU_CLOCK_SELECT_CKM1
 (0x8000UË

	)

96 
	#_4000_TAU_CLOCK_SELECT_CKM2
 (0x4000UË

	)

97 
	#_C000_TAU_CLOCK_SELECT_CKM3
 (0xC000UË

	)

99 
	#_0000_TAU_CLOCK_MODE_CKS
 (0x0000UË

	)

100 
	#_1000_TAU_CLOCK_MODE_TIMN
 (0x1000UË

	)

102 
	#_0000_TAU_COMBINATION_SLAVE
 (0x0000UË

	)

103 
	#_0000_TAU_COMBINATION_MASTER
 (0x0000UË

	)

104 
	#_0800_TAU_COMBINATION_MASTER
 (0x0800UË

	)

106 
	#_0000_TAU_16BITS_MODE
 (0x0000UË

	)

107 
	#_0800_TAU_8BITS_MODE
 (0x0800UË

	)

109 
	#_0000_TAU_TRIGGER_SOFTWARE
 (0x0000UË

	)

110 
	#_0100_TAU_TRIGGER_TIMN_VALID
 (0x0100UË

	)

111 
	#_0200_TAU_TRIGGER_TIMN_BOTH
 (0x0200UË

	)

112 
	#_0400_TAU_TRIGGER_MASTER_INT
 (0x0400UË

	)

114 
	#_0000_TAU_TIMN_EDGE_FALLING
 (0x0000UË

	)

115 
	#_0040_TAU_TIMN_EDGE_RISING
 (0x0040UË

	)

116 
	#_0080_TAU_TIMN_EDGE_BOTH_LOW
 (0x0080UË

	)

117 
	#_00C0_TAU_TIMN_EDGE_BOTH_HIGH
 (0x00C0UË

	)

119 
	#_0000_TAU_MODE_INTERVAL_TIMER
 (0x0000UË

	)

120 
	#_0004_TAU_MODE_CAPTURE
 (0x0004UË

	)

121 
	#_0006_TAU_MODE_EVENT_COUNT
 (0x0006UË

	)

122 
	#_0008_TAU_MODE_ONE_COUNT
 (0x0008UË

	)

123 
	#_000C_TAU_MODE_HIGHLOW_MEASURE
 (0x000CUË

	)

124 
	#_0001_TAU_MODE_PWM_MASTER
 (0x0001UË

	)

125 
	#_0009_TAU_MODE_PWM_SLAVE
 (0x0009UË

	)

126 
	#_0008_TAU_MODE_ONESHOT
 (0x0008UË

	)

128 
	#_0000_TAU_START_INT_UNUSED
 (0x0000UË

	)

129 
	#_0001_TAU_START_INT_USED
 (0x0001UË

	)

135 
	#_0000_TAU_OVERFLOW_NOT_OCCURS
 (0x0000UË

	)

136 
	#_0001_TAU_OVERFLOW_OCCURS
 (0x0001UË

	)

142 
	#_0000_TAU_CH0_OPERATION_STOP
 (0x0000UË

	)

143 
	#_0001_TAU_CH0_OPERATION_ENABLE
 (0x0001UË

	)

145 
	#_0000_TAU_CH1_OPERATION_STOP
 (0x0000UË

	)

146 
	#_0002_TAU_CH1_OPERATION_ENABLE
 (0x0002UË

	)

148 
	#_0000_TAU_CH2_OPERATION_STOP
 (0x0000UË

	)

149 
	#_0004_TAU_CH2_OPERATION_ENABLE
 (0x0004UË

	)

151 
	#_0000_TAU_CH3_OPERATION_STOP
 (0x0000UË

	)

152 
	#_0008_TAU_CH3_OPERATION_ENABLE
 (0x0008UË

	)

154 
	#_0000_TAU_CH4_OPERATION_STOP
 (0x0000UË

	)

155 
	#_0010_TAU_CH4_OPERATION_ENABLE
 (0x0010UË

	)

157 
	#_0000_TAU_CH5_OPERATION_STOP
 (0x0000UË

	)

158 
	#_0020_TAU_CH5_OPERATION_ENABLE
 (0x0020UË

	)

160 
	#_0000_TAU_CH6_OPERATION_STOP
 (0x0000UË

	)

161 
	#_0040_TAU_CH6_OPERATION_ENABLE
 (0x0040UË

	)

163 
	#_0000_TAU_CH7_OPERATION_STOP
 (0x0000UË

	)

164 
	#_0080_TAU_CH7_OPERATION_ENABLE
 (0x0080UË

	)

166 
	#_0000_TAU_CH1_H8_OPERATION_STOP
 (0x0000UË

	)

167 
	#_0200_TAU_CH1_H8_OPERATION_ENABLE
 (0x0200UË

	)

169 
	#_0000_TAU_CH3_H8_OPERATION_STOP
 (0x0000UË

	)

170 
	#_0800_TAU_CH3_H8_OPERATION_ENABLE
 (0x0800UË

	)

176 
	#_0000_TAU_CH0_START_TRG_OFF
 (0x0000UË

	)

177 
	#_0001_TAU_CH0_START_TRG_ON
 (0x0001UË

	)

179 
	#_0000_TAU_CH1_START_TRG_OFF
 (0x0000UË

	)

180 
	#_0002_TAU_CH1_START_TRG_ON
 (0x0002UË

	)

182 
	#_0000_TAU_CH2_START_TRG_OFF
 (0x0000UË

	)

183 
	#_0004_TAU_CH2_START_TRG_ON
 (0x0004UË

	)

185 
	#_0000_TAU_CH3_START_TRG_OFF
 (0x0000UË

	)

186 
	#_0008_TAU_CH3_START_TRG_ON
 (0x0008UË

	)

188 
	#_0000_TAU_CH4_START_TRG_OFF
 (0x0000UË

	)

189 
	#_0010_TAU_CH4_START_TRG_ON
 (0x0010UË

	)

191 
	#_0000_TAU_CH5_START_TRG_OFF
 (0x0000UË

	)

192 
	#_0020_TAU_CH5_START_TRG_ON
 (0x0020UË

	)

194 
	#_0000_TAU_CH6_START_TRG_OFF
 (0x0000UË

	)

195 
	#_0040_TAU_CH6_START_TRG_ON
 (0x0040UË

	)

197 
	#_0000_TAU_CH7_START_TRG_OFF
 (0x0000UË

	)

198 
	#_0080_TAU_CH7_START_TRG_ON
 (0x0080UË

	)

200 
	#_0000_TAU_CH1_H8_START_TRG_OFF
 (0x0000UË

	)

201 
	#_0200_TAU_CH1_H8_START_TRG_ON
 (0x0200UË

	)

203 
	#_0000_TAU_CH3_H8_START_TRG_OFF
 (0x0000UË

	)

204 
	#_0800_TAU_CH3_H8_START_TRG_ON
 (0x0800UË

	)

210 
	#_0000_TAU_CH0_STOP_TRG_OFF
 (0x0000UË

	)

211 
	#_0001_TAU_CH0_STOP_TRG_ON
 (0x0001UË

	)

213 
	#_0000_TAU_CH1_STOP_TRG_OFF
 (0x0000UË

	)

214 
	#_0002_TAU_CH1_STOP_TRG_ON
 (0x0002UË

	)

216 
	#_0000_TAU_CH2_STOP_TRG_OFF
 (0x0000UË

	)

217 
	#_0004_TAU_CH2_STOP_TRG_ON
 (0x0004UË

	)

219 
	#_0000_TAU_CH3_STOP_TRG_OFF
 (0x0000UË

	)

220 
	#_0008_TAU_CH3_STOP_TRG_ON
 (0x0008UË

	)

222 
	#_0000_TAU_CH4_STOP_TRG_OFF
 (0x0000UË

	)

223 
	#_0010_TAU_CH4_STOP_TRG_ON
 (0x0010UË

	)

225 
	#_0000_TAU_CH5_STOP_TRG_OFF
 (0x0000UË

	)

226 
	#_0020_TAU_CH5_STOP_TRG_ON
 (0x0020UË

	)

228 
	#_0000_TAU_CH6_STOP_TRG_OFF
 (0x0000UË

	)

229 
	#_0040_TAU_CH6_STOP_TRG_ON
 (0x0040UË

	)

231 
	#_0000_TAU_CH7_STOP_TRG_OFF
 (0x0000UË

	)

232 
	#_0080_TAU_CH7_STOP_TRG_ON
 (0x0080UË

	)

234 
	#_0000_TAU_CH1_H8_STOP_TRG_OFF
 (0x0000UË

	)

235 
	#_0200_TAU_CH1_H8_STOP_TRG_ON
 (0x0200UË

	)

237 
	#_0000_TAU_CH3_H8_STOP_TRG_OFF
 (0x0000UË

	)

238 
	#_0800_TAU_CH3_H8_STOP_TRG_ON
 (0x0800UË

	)

244 
	#_00_TAU_CH5_INPUT_TI05
 (0x00UË

	)

245 
	#_01_TAU_CH5_INPUT_TI05
 (0x01UË

	)

246 
	#_02_TAU_CH5_INPUT_TI05
 (0x02UË

	)

247 
	#_03_TAU_CH5_INPUT_TI05
 (0x03UË

	)

248 
	#_04_TAU_CH5_INPUT_FIL
 (0x04UË

	)

249 
	#_05_TAU_CH5_INPUT_FSUB
 (0x05UË

	)

255 
	#_0001_TAU_CH0_OUTPUT_ENABLE
 (0x0001UË

	)

256 
	#_0000_TAU_CH0_OUTPUT_DISABLE
 (0x0000UË

	)

258 
	#_0002_TAU_CH1_OUTPUT_ENABLE
 (0x0002UË

	)

259 
	#_0000_TAU_CH1_OUTPUT_DISABLE
 (0x0000UË

	)

261 
	#_0004_TAU_CH2_OUTPUT_ENABLE
 (0x0004UË

	)

262 
	#_0000_TAU_CH2_OUTPUT_DISABLE
 (0x0000UË

	)

264 
	#_0008_TAU_CH3_OUTPUT_ENABLE
 (0x0008UË

	)

265 
	#_0000_TAU_CH3_OUTPUT_DISABLE
 (0x0000UË

	)

267 
	#_0010_TAU_CH4_OUTPUT_ENABLE
 (0x0010UË

	)

268 
	#_0000_TAU_CH4_OUTPUT_DISABLE
 (0x0000UË

	)

270 
	#_0020_TAU_CH5_OUTPUT_ENABLE
 (0x0020UË

	)

271 
	#_0000_TAU_CH5_OUTPUT_DISABLE
 (0x0000UË

	)

273 
	#_0040_TAU_CH6_OUTPUT_ENABLE
 (0x0040UË

	)

274 
	#_0000_TAU_CH6_OUTPUT_DISABLE
 (0x0000UË

	)

276 
	#_0080_TAU_CH7_OUTPUT_ENABLE
 (0x0080UË

	)

277 
	#_0000_TAU_CH7_OUTPUT_DISABLE
 (0x0000UË

	)

283 
	#_0000_TAU_CH0_OUTPUT_VALUE_0
 (0x0000UË

	)

284 
	#_0001_TAU_CH0_OUTPUT_VALUE_1
 (0x0001UË

	)

286 
	#_0000_TAU_CH1_OUTPUT_VALUE_0
 (0x0000UË

	)

287 
	#_0002_TAU_CH1_OUTPUT_VALUE_1
 (0x0002UË

	)

289 
	#_0000_TAU_CH2_OUTPUT_VALUE_0
 (0x0000UË

	)

290 
	#_0004_TAU_CH2_OUTPUT_VALUE_1
 (0x0004UË

	)

292 
	#_0000_TAU_CH3_OUTPUT_VALUE_0
 (0x0000UË

	)

293 
	#_0008_TAU_CH3_OUTPUT_VALUE_1
 (0x0008UË

	)

295 
	#_0000_TAU_CH4_OUTPUT_VALUE_0
 (0x0000UË

	)

296 
	#_0010_TAU_CH4_OUTPUT_VALUE_1
 (0x0010UË

	)

298 
	#_0000_TAU_CH5_OUTPUT_VALUE_0
 (0x0000UË

	)

299 
	#_0020_TAU_CH5_OUTPUT_VALUE_1
 (0x0020UË

	)

301 
	#_0000_TAU_CH6_OUTPUT_VALUE_0
 (0x0000UË

	)

302 
	#_0040_TAU_CH6_OUTPUT_VALUE_1
 (0x0040UË

	)

304 
	#_0000_TAU_CH7_OUTPUT_VALUE_0
 (0x0000UË

	)

305 
	#_0080_TAU_CH7_OUTPUT_VALUE_1
 (0x0080UË

	)

311 
	#_0000_TAU_CH1_OUTPUT_LEVEL_H
 (0x0000UË

	)

312 
	#_0002_TAU_CH1_OUTPUT_LEVEL_L
 (0x0002UË

	)

314 
	#_0000_TAU_CH2_OUTPUT_LEVEL_H
 (0x0000UË

	)

315 
	#_0004_TAU_CH2_OUTPUT_LEVEL_L
 (0x0004UË

	)

317 
	#_0000_TAU_CH3_OUTPUT_LEVEL_H
 (0x0000UË

	)

318 
	#_0008_TAU_CH3_OUTPUT_LEVEL_L
 (0x0008UË

	)

320 
	#_0000_TAU_CH4_OUTPUT_LEVEL_H
 (0x0000UË

	)

321 
	#_0010_TAU_CH4_OUTPUT_LEVEL_L
 (0x0010UË

	)

323 
	#_0000_TAU_CH5_OUTPUT_LEVEL_H
 (0x0000UË

	)

324 
	#_0020_TAU_CH5_OUTPUT_LEVEL_L
 (0x0020UË

	)

326 
	#_0000_TAU_CH6_OUTPUT_LEVEL_H
 (0x0000UË

	)

327 
	#_0040_TAU_CH6_OUTPUT_LEVEL_L
 (0x0040UË

	)

329 
	#_0000_TAU_CH7_OUTPUT_LEVEL_H
 (0x0000UË

	)

330 
	#_0080_TAU_CH7_OUTPUT_LEVEL_L
 (0x0080UË

	)

336 
	#_0000_TAU_CH1_OUTPUT_TOGGLE
 (0x0000UË

	)

337 
	#_0002_TAU_CH1_OUTPUT_COMBIN
 (0x0002UË

	)

339 
	#_0000_TAU_CH2_OUTPUT_TOGGLE
 (0x0000UË

	)

340 
	#_0004_TAU_CH2_OUTPUT_COMBIN
 (0x0004UË

	)

342 
	#_0000_TAU_CH3_OUTPUT_TOGGLE
 (0x0000UË

	)

343 
	#_0008_TAU_CH3_OUTPUT_COMBIN
 (0x0008UË

	)

345 
	#_0000_TAU_CH4_OUTPUT_TOGGLE
 (0x0000UË

	)

346 
	#_0010_TAU_CH4_OUTPUT_COMBIN
 (0x0010UË

	)

348 
	#_0000_TAU_CH5_OUTPUT_TOGGLE
 (0x0000UË

	)

349 
	#_0020_TAU_CH5_OUTPUT_COMBIN
 (0x0020UË

	)

351 
	#_0000_TAU_CH6_OUTPUT_TOGGLE
 (0x0000UË

	)

352 
	#_0040_TAU_CH6_OUTPUT_COMBIN
 (0x0040UË

	)

354 
	#_0000_TAU_CH7_OUTPUT_TOGGLE
 (0x0000UË

	)

355 
	#_0080_TAU_CH7_OUTPUT_COMBIN
 (0x0080UË

	)

361 
	#_00_TAU_CH7_NO_INPUT
 (0x00UË

	)

362 
	#_02_TAU_CH7_RXD3_INPUT
 (0x02UË

	)

368 
	#_00_TAU_CH7_NOISE_OFF
 (0x00UË

	)

369 
	#_80_TAU_CH7_NOISE_ON
 (0x80UË

	)

371 
	#_00_TAU_CH6_NOISE_OFF
 (0x00UË

	)

372 
	#_40_TAU_CH6_NOISE_ON
 (0x40UË

	)

374 
	#_00_TAU_CH5_NOISE_OFF
 (0x00UË

	)

375 
	#_20_TAU_CH5_NOISE_ON
 (0x20UË

	)

377 
	#_00_TAU_CH4_NOISE_OFF
 (0x00UË

	)

378 
	#_10_TAU_CH4_NOISE_ON
 (0x10UË

	)

380 
	#_00_TAU_CH3_NOISE_OFF
 (0x00UË

	)

381 
	#_08_TAU_CH3_NOISE_ON
 (0x08UË

	)

383 
	#_00_TAU_CH2_NOISE_OFF
 (0x00UË

	)

384 
	#_04_TAU_CH2_NOISE_ON
 (0x04UË

	)

386 
	#_00_TAU_CH1_NOISE_OFF
 (0x00UË

	)

387 
	#_02_TAU_CH1_NOISE_ON
 (0x02UË

	)

389 
	#_00_TAU_CH0_NOISE_OFF
 (0x00UË

	)

390 
	#_01_TAU_CH0_NOISE_ON
 (0x01UË

	)

397 
	#_7CFF_TAU_TDR00_VALUE
 (0x7CFFU)

	)

399 
	#_0001_TAU0_CHANNEL0_DIVISOR
 (0x0001U)

	)

408 
R_TAU0_Cª©e
();

409 
R_TAU0_Ch™√l0_Sèπ
();

410 
R_TAU0_Ch™√l0_St›
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_timer_user.c

32 #¥agm®
öãºu±
 
INTTM00
 
r_èu0_ch™√l0_öãºu±


39 
	~"r_cg_ma¸odrivî.h
"

40 
	~"r_cg_timî.h
"

43 
	~"r_cg_u£rdeföe.h
"

57 
__öãºu±
 
	$r_èu0_ch™√l0_öãºu±
()

61 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_userdefine.h

29 #i‚de‡
_USER_DEF_H


30 
	#_USER_DEF_H


	)

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_wdt.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_wdt.h
"

42 
	~"r_cg_u£rdeföe.h
"

56 
	$R_WDT_Cª©e
()

58 
WDTIMK
 = 1U;

59 
WDTIIF
 = 0U;

60 
	}
}

68 
	$R_WDT_Re°¨t
()

70 
WDTE
 = 0xACU;

71 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_wdt.h

29 #i‚de‡
WDT_H


30 
	#WDT_H


	)

47 
R_WDT_Cª©e
();

48 
R_WDT_Re°¨t
();

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_wdt_user.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_wdt.h
"

42 
	~"r_cg_u£rdeföe.h
"

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_main.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_cgc.h
"

40 
	~"r_cg_p‹t.h
"

41 
	~"r_cg_ötc.h
"

42 
	~"r_cg_£rül.h
"

43 
	~"r_cg_timî.h
"

44 
	~"r_cg_wdt.h
"

47 
	~"r_cg_u£rdeföe.h
"

54 
R_MAIN_U£rInô
();

62 
	$maö
()

64 
	`R_MAIN_U£rInô
();

71 
	}
}

79 
	$R_MAIN_U£rInô
()

82 
	`EI
();

84 
	}
}

	@D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_systeminit.c

38 
	~"r_cg_ma¸odrivî.h
"

39 
	~"r_cg_cgc.h
"

40 
	~"r_cg_p‹t.h
"

41 
	~"r_cg_ötc.h
"

42 
	~"r_cg_£rül.h
"

43 
	~"r_cg_timî.h
"

44 
	~"r_cg_wdt.h
"

47 
	~"r_cg_u£rdeföe.h
"

61 
	$R_Sy°emöô
()

63 
PIOR
 = 0x00U;

64 
	`R_CGC_Gë_Re£tSour˚
();

65 
	`R_CGC_Cª©e
();

66 
	`R_PORT_Cª©e
();

67 
	`R_SAU0_Cª©e
();

68 
	`R_IICA0_Cª©e
();

69 
	`R_TAU0_Cª©e
();

70 
	`R_WDT_Cª©e
();

71 
	`R_INTC_Cª©e
();

73 
IAWCTL
 = 0x00U;

74 
	}
}

83 
	$hdwöô
()

85 
	`DI
();

86 
	`R_Sy°emöô
();

87 
	}
}

	@r_cg_adc.h

29 #i‚de‡
ADC_H


30 
	#ADC_H


	)

39 
	#_00_AD_CLOCK_STOP
 (0x00UË

	)

40 
	#_20_AD_CLOCK_SUPPLY
 (0x20UË

	)

45 
	#_00_AD_ADM0_INITIALVALUE
 (0x00U)

	)

47 
	#_80_AD_CONVERSION_ENABLE
 (0x80UË

	)

48 
	#_00_AD_CONVERSION_DISABLE
 (0x00UË

	)

50 
	#_00_AD_OPERMODE_SELECT
 (0x00UË

	)

51 
	#_40_AD_OPERMODE_SCAN
 (0x40UË

	)

53 
	#_00_AD_CONVERSION_CLOCK_64
 (0x00UË

	)

54 
	#_08_AD_CONVERSION_CLOCK_32
 (0x08UË

	)

55 
	#_10_AD_CONVERSION_CLOCK_16
 (0x10UË

	)

56 
	#_18_AD_CONVERSION_CLOCK_8
 (0x18UË

	)

57 
	#_20_AD_CONVERSION_CLOCK_6
 (0x20UË

	)

58 
	#_28_AD_CONVERSION_CLOCK_5
 (0x28UË

	)

59 
	#_30_AD_CONVERSION_CLOCK_4
 (0x30UË

	)

60 
	#_38_AD_CONVERSION_CLOCK_2
 (0x38UË

	)

62 
	#_00_AD_TIME_MODE_NORMAL_1
 (0x00UË

	)

63 
	#_02_AD_TIME_MODE_NORMAL_2
 (0x02UË

	)

64 
	#_04_AD_TIME_MODE_LOWVOLTAGE_1
 (0x04UË

	)

65 
	#_06_AD_TIME_MODE_LOWVOLTAGE_2
 (0x06UË

	)

67 
	#_01_AD_COMPARATOR_ENABLE
 (0x01UË

	)

68 
	#_00_AD_COMPARATOR_DISABLE
 (0x00UË

	)

75 
	#_00_AD_INPUT_CHANNEL_0
 (0x00UË

	)

76 
	#_01_AD_INPUT_CHANNEL_1
 (0x01UË

	)

77 
	#_02_AD_INPUT_CHANNEL_2
 (0x02UË

	)

78 
	#_03_AD_INPUT_CHANNEL_3
 (0x03UË

	)

79 
	#_04_AD_INPUT_CHANNEL_4
 (0x04UË

	)

80 
	#_05_AD_INPUT_CHANNEL_5
 (0x05UË

	)

81 
	#_06_AD_INPUT_CHANNEL_6
 (0x06UË

	)

82 
	#_07_AD_INPUT_CHANNEL_7
 (0x07UË

	)

83 
	#_08_AD_INPUT_CHANNEL_8
 (0x08UË

	)

84 
	#_09_AD_INPUT_CHANNEL_9
 (0x09UË

	)

85 
	#_0A_AD_INPUT_CHANNEL_10
 (0x0AUË

	)

86 
	#_0B_AD_INPUT_CHANNEL_11
 (0x0BUË

	)

87 
	#_0C_AD_INPUT_CHANNEL_12
 (0x0CUË

	)

88 
	#_0D_AD_INPUT_CHANNEL_13
 (0x0DUË

	)

89 
	#_0E_AD_INPUT_CHANNEL_14
 (0x0EUË

	)

90 
	#_10_AD_INPUT_CHANNEL_16
 (0x10UË

	)

91 
	#_11_AD_INPUT_CHANNEL_17
 (0x11UË

	)

92 
	#_12_AD_INPUT_CHANNEL_18
 (0x12UË

	)

93 
	#_13_AD_INPUT_CHANNEL_19
 (0x13UË

	)

94 
	#_14_AD_INPUT_CHANNEL_20
 (0x14UË

	)

95 
	#_80_AD_INPUT_TEMPERSENSOR_0
 (0x80UË

	)

96 
	#_81_AD_INPUT_INTERREFVOLT
 (0x81UË

	)

98 
	#_00_AD_INPUT_CHANNEL_0_3
 (0x00UË

	)

99 
	#_01_AD_INPUT_CHANNEL_1_4
 (0x01UË

	)

100 
	#_02_AD_INPUT_CHANNEL_2_5
 (0x02UË

	)

101 
	#_03_AD_INPUT_CHANNEL_3_6
 (0x03UË

	)

102 
	#_04_AD_INPUT_CHANNEL_4_7
 (0x04UË

	)

103 
	#_05_AD_INPUT_CHANNEL_5_8
 (0x05UË

	)

104 
	#_06_AD_INPUT_CHANNEL_6_9
 (0x06UË

	)

105 
	#_07_AD_INPUT_CHANNEL_7_10
 (0x07UË

	)

106 
	#_08_AD_INPUT_CHANNEL_8_11
 (0x08UË

	)

107 
	#_09_AD_INPUT_CHANNEL_9_12
 (0x09UË

	)

108 
	#_0A_AD_INPUT_CHANNEL_10_13
 (0x0AUË

	)

109 
	#_0B_AD_INPUT_CHANNEL_11_14
 (0x0BUË

	)

115 
	#_00_AD_TRIGGER_SOFTWARE
 (0x00UË

	)

116 
	#_80_AD_TRIGGER_HARDWARE_NOWAIT
 (0x80UË

	)

117 
	#_C0_AD_TRIGGER_HARDWARE_WAIT
 (0xC0UË

	)

119 
	#_00_AD_CONVMODE_CONSELECT
 (0x00UË

	)

120 
	#_20_AD_CONVMODE_ONESELECT
 (0x20UË

	)

122 
	#_00_AD_TRIGGER_INTTM01
 (0x00UË

	)

123 
	#_02_AD_TRIGGER_INTRTC
 (0x02UË

	)

124 
	#_03_AD_TRIGGER_INTIT
 (0x03UË

	)

130 
	#_00_AD_POSITIVE_VDD
 (0x00UË

	)

131 
	#_40_AD_POSITIVE_AVREFP
 (0x40UË

	)

132 
	#_80_AD_POSITIVE_INTERVOLT
 (0x80UË

	)

134 
	#_00_AD_NEGATIVE_VSS
 (0x00UË

	)

135 
	#_20_AD_NEGATIVE_AVREFM
 (0x20UË

	)

137 
	#_00_AD_AREA_MODE_1
 (0x00UË

	)

138 
	#_08_AD_AREA_MODE_2_3
 (0x08UË

	)

140 
	#_00_AD_WAKEUP_OFF
 (0x00UË

	)

141 
	#_04_AD_WAKEUP_ON
 (0x04UË

	)

143 
	#_00_AD_RESOLUTION_10BIT
 (0x00UË

	)

144 
	#_01_AD_RESOLUTION_8BIT
 (0x01UË

	)

150 
	#_00_AD_NORMAL_INPUT
 (0x00UË

	)

151 
	#_02_AD_TEST_AVREFM
 (0x02UË

	)

152 
	#_03_AD_TEST_AVREFP
 (0x03UË

	)

158 
	#_00_AD_ADPC_15ANALOG
 (0x00UË

	)

159 
	#_0F_AD_ADPC_14ANALOG
 (0x0FUË

	)

160 
	#_0E_AD_ADPC_13ANALOG
 (0x0EUË

	)

161 
	#_0D_AD_ADPC_12ANALOG
 (0x0DUË

	)

162 
	#_0C_AD_ADPC_11ANALOG
 (0x0CUË

	)

163 
	#_0B_AD_ADPC_10ANALOG
 (0x0BUË

	)

164 
	#_0A_AD_ADPC_9ANALOG
 (0x0AUË

	)

165 
	#_09_AD_ADPC_8ANALOG
 (0x09UË

	)

166 
	#_08_AD_ADPC_7ANALOG
 (0x08UË

	)

167 
	#_07_AD_ADPC_6ANALOG
 (0x07UË

	)

168 
	#_06_AD_ADPC_5ANALOG
 (0x06UË

	)

169 
	#_05_AD_ADPC_4ANALOG
 (0x05UË

	)

170 
	#_04_AD_ADPC_3ANALOG
 (0x04UË

	)

171 
	#_03_AD_ADPC_2ANALOG
 (0x03UË

	)

172 
	#_02_AD_ADPC_1ANALOG
 (0x02UË

	)

173 
	#_01_AD_ADPC_0ANALOG
 (0x01UË

	)

179 
	#_FF_AD_ADUL_VALUE
 (0xFFU)

	)

181 
	#_00_AD_ADLL_VALUE
 (0x00U)

	)

188 
	mADCHANNEL0
, 
	mADCHANNEL1
, 
	mADCHANNEL2
, 
	mADCHANNEL3
, 
	mADCHANNEL4
, 
	mADCHANNEL5
,

189 
	mADCHANNEL6
, 
	mADCHANNEL7
, 
	mADCHANNEL8
, 
	mADCHANNEL9
, 
	mADCHANNEL10
, 
	mADCHANNEL11
,

190 
	mADCHANNEL12
, 
	mADCHANNEL13
, 
	mADCHANNEL14
, 
	mADCHANNEL16
 = 16U, 
	mADCHANNEL17
,

191 
	mADCHANNEL18
, 
	mADCHANNEL19
, 
	mADCHANNEL20
, 
	mADTEMPERSENSOR0
 = 128U, 
	mADINTERREFVOLT


192 } 
	tad_ch™√l_t
;

195 
	mADNORMALINPUT
,

196 
	mADAVREFM
 = 2U,

197 
	mADAVREFP


198 } 
	tã°_ch™√l_t
;

203 
R_ADC_Cª©e
();

204 
R_ADC_Sèπ
();

205 
R_ADC_St›
();

206 
R_ADC_Së_O≥øti⁄On
();

207 
R_ADC_Së_O≥øti⁄Off
();

208 
R_ADC_Gë_Resu…
(
uöt16_t
 * c⁄° 
buf„r
);

	@r_cg_cgc.h

29 #i‚de‡
CGC_H


30 
	#CGC_H


	)

39 
	#_C0_CGC_HISYS_PIN
 (0xC0U)

	)

40 
	#_00_CGC_HISYS_PORT
 (0x00UË

	)

41 
	#_40_CGC_HISYS_OSC
 (0x40UË

	)

42 
	#_80_CGC_HISYS_PORT1
 (0x80UË

	)

43 
	#_C0_CGC_HISYS_EXT
 (0xC0UË

	)

45 
	#_30_CGC_SUB_PIN
 (0x30U)

	)

46 
	#_00_CGC_SUB_PORT
 (0x00UË

	)

47 
	#_10_CGC_SUB_OSC
 (0x10UË

	)

48 
	#_20_CGC_SUB_PORT1
 (0x20UË

	)

49 
	#_30_CGC_SUB_EXT
 (0x30UË

	)

51 
	#_00_CGC_SUBMODE_DEFAULT
 (0x00U)

	)

52 
	#_00_CGC_SUBMODE_LOW
 (0x00UË

	)

53 
	#_02_CGC_SUBMODE_NORMAL
 (0x02UË

	)

54 
	#_04_CGC_SUBMODE_ULOW
 (0x04UË

	)

56 
	#_00_CGC_SYSOSC_DEFAULT
 (0x00U)

	)

57 
	#_00_CGC_SYSOSC_UNDER10M
 (0x00UË

	)

58 
	#_01_CGC_SYSOSC_OVER10M
 (0x01UË

	)

64 
	#_00_CGC_HISYS_OPER
 (0x00UË

	)

65 
	#_80_CGC_HISYS_STOP
 (0x80UË

	)

67 
	#_00_CGC_SUB_OPER
 (0x00UË

	)

68 
	#_40_CGC_SUB_STOP
 (0x40UË

	)

70 
	#_00_CGC_HIO_OPER
 (0x00UË

	)

71 
	#_01_CGC_HIO_STOP
 (0x01UË

	)

77 
	#_00_CGC_OSCSTAB_STA0
 (0x00UË

	)

78 
	#_80_CGC_OSCSTAB_STA8
 (0x80UË

	)

79 
	#_C0_CGC_OSCSTAB_STA9
 (0xC0UË

	)

80 
	#_E0_CGC_OSCSTAB_STA10
 (0xE0UË

	)

81 
	#_F0_CGC_OSCSTAB_STA11
 (0xF0UË

	)

82 
	#_F8_CGC_OSCSTAB_STA13
 (0xF8UË

	)

83 
	#_FC_CGC_OSCSTAB_STA15
 (0xFCUË

	)

84 
	#_FE_CGC_OSCSTAB_STA17
 (0xFEUË

	)

85 
	#_FF_CGC_OSCSTAB_STA18
 (0xFFUË

	)

91 
	#_00_CGC_OSCSTAB_SEL8
 (0x00UË

	)

92 
	#_01_CGC_OSCSTAB_SEL9
 (0x01UË

	)

93 
	#_02_CGC_OSCSTAB_SEL10
 (0x02UË

	)

94 
	#_03_CGC_OSCSTAB_SEL11
 (0x03UË

	)

95 
	#_04_CGC_OSCSTAB_SEL13
 (0x04UË

	)

96 
	#_05_CGC_OSCSTAB_SEL15
 (0x05UË

	)

97 
	#_06_CGC_OSCSTAB_SEL17
 (0x06UË

	)

98 
	#_07_CGC_OSCSTAB_SEL18
 (0x07UË

	)

104 
	#_00_CGC_CPUCLK_MAIN
 (0x00UË

	)

105 
	#_80_CGC_CPUCLK_SUB
 (0x80UË

	)

107 
	#_00_CGC_CPUCLK_SELMAIN
 (0x00UË

	)

108 
	#_40_CGC_CPUCLK_SELSUB
 (0x40UË

	)

110 
	#_00_CGC_MAINCLK_HIO
 (0x00UË

	)

111 
	#_20_CGC_MAINCLK_HISYS
 (0x20UË

	)

113 
	#_00_CGC_MAINCLK_SELHIO
 (0x00UË

	)

114 
	#_10_CGC_MAINCLK_SELHISYS
 (0x10UË

	)

120 
	#_00_CGC_SUBINHALT_ON
 (0x00UË

	)

121 
	#_80_CGC_SUBINHALT_OFF
 (0x80UË

	)

123 
	#_00_CGC_RTC_CLK_FSUB
 (0x00UË

	)

124 
	#_10_CGC_RTC_CLK_FIL
 (0x10UË

	)

130 
	#_00_CGC_ILLEGAL_ACCESS_OFF
 (0x00UË

	)

131 
	#_80_CGC_ILLEGAL_ACCESS_ON
 (0x80UË

	)

133 
	#_00_CGC_RAM_GUARD_OFF
 (0x00UË

	)

134 
	#_10_CGC_RAM_GUARD_ARAE0
 (0x10UË

	)

135 
	#_20_CGC_RAM_GUARD_ARAE1
 (0x20UË

	)

136 
	#_30_CGC_RAM_GUARD_ARAE2
 (0x30UË

	)

138 
	#_00_CGC_PORT_GUARD_OFF
 (0x00UË

	)

139 
	#_04_CGC_PORT_GUARD_ON
 (0x04UË

	)

141 
	#_00_CGC_INT_GUARD_OFF
 (0x00UË

	)

142 
	#_02_CGC_INT_GUARD_ON
 (0x02UË

	)

144 
	#_00_CGC_CSC_GUARD_OFF
 (0x00UË

	)

145 
	#_01_CGC_CSC_GUARD_ON
 (0x01UË

	)

156 
	mHIOCLK
,

157 
	mSYSX1CLK
,

158 
	mSYSEXTCLK
,

159 
	mSUBXT1CLK
,

160 
	mSUBEXTCLK


161 } 
	t˛ock_mode_t
;

166 
R_CGC_Cª©e
();

167 
R_CGC_Gë_Re£tSour˚
();

	@r_cg_intc.h

29 #i‚de‡
INTC_H


30 
	#INTC_H


	)

40 
	#_01_INTP0_EDGE_RISING_SEL
 (0x01UË

	)

41 
	#_00_INTP0_EDGE_RISING_UNSEL
 (0x00UË

	)

42 
	#_02_INTP1_EDGE_RISING_SEL
 (0x02UË

	)

43 
	#_00_INTP1_EDGE_RISING_UNSEL
 (0x00UË

	)

44 
	#_04_INTP2_EDGE_RISING_SEL
 (0x04UË

	)

45 
	#_00_INTP2_EDGE_RISING_UNSEL
 (0x00UË

	)

46 
	#_08_INTP3_EDGE_RISING_SEL
 (0x08UË

	)

47 
	#_00_INTP3_EDGE_RISING_UNSEL
 (0x00UË

	)

48 
	#_10_INTP4_EDGE_RISING_SEL
 (0x10UË

	)

49 
	#_00_INTP4_EDGE_RISING_UNSEL
 (0x00UË

	)

50 
	#_20_INTP5_EDGE_RISING_SEL
 (0x20UË

	)

51 
	#_00_INTP5_EDGE_RISING_UNSEL
 (0x00UË

	)

52 
	#_40_INTP6_EDGE_RISING_SEL
 (0x40UË

	)

53 
	#_00_INTP6_EDGE_RISING_UNSEL
 (0x00UË

	)

59 
	#_01_INTP0_EDGE_FALLING_SEL
 (0x01UË

	)

60 
	#_00_INTP0_EDGE_FALLING_UNSEL
 (0x00UË

	)

61 
	#_02_INTP1_EDGE_FALLING_SEL
 (0x02UË

	)

62 
	#_00_INTP1_EDGE_FALLING_UNSEL
 (0x00UË

	)

63 
	#_04_INTP2_EDGE_FALLING_SEL
 (0x04UË

	)

64 
	#_00_INTP2_EDGE_FALLING_UNSEL
 (0x00UË

	)

65 
	#_08_INTP3_EDGE_FALLING_SEL
 (0x08UË

	)

66 
	#_00_INTP3_EDGE_FALLING_UNSEL
 (0x00UË

	)

67 
	#_10_INTP4_EDGE_FALLING_SEL
 (0x10UË

	)

68 
	#_00_INTP4_EDGE_FALLING_UNSEL
 (0x00UË

	)

69 
	#_20_INTP5_EDGE_FALLING_SEL
 (0x20UË

	)

70 
	#_00_INTP5_EDGE_FALLING_UNSEL
 (0x00UË

	)

71 
	#_40_INTP6_EDGE_FALLING_SEL
 (0x40UË

	)

72 
	#_00_INTP6_EDGE_FALLING_UNSEL
 (0x00UË

	)

78 
	#_01_INTP8_EDGE_RISING_SEL
 (0x01UË

	)

79 
	#_00_INTP8_EDGE_RISING_UNSEL
 (0x00UË

	)

80 
	#_02_INTP9_EDGE_RISING_SEL
 (0x02UË

	)

81 
	#_00_INTP9_EDGE_RISING_UNSEL
 (0x00UË

	)

87 
	#_01_INTP8_EDGE_FALLING_SEL
 (0x01UË

	)

88 
	#_00_INTP8_EDGE_FALLING_UNSEL
 (0x00UË

	)

89 
	#_02_INTP9_EDGE_FALLING_SEL
 (0x02UË

	)

90 
	#_00_INTP9_EDGE_FALLING_UNSEL
 (0x00UË

	)

96 
	#_00_KR0_SIGNAL_DETECT_OFF
 (0x00UË

	)

97 
	#_01_KR0_SIGNAL_DETECT_ON
 (0x01UË

	)

99 
	#_00_KR1_SIGNAL_DETECT_OFF
 (0x00UË

	)

100 
	#_02_KR1_SIGNAL_DETECT_ON
 (0x02UË

	)

102 
	#_00_KR2_SIGNAL_DETECT_OFF
 (0x00UË

	)

103 
	#_04_KR2_SIGNAL_DETECT_ON
 (0x04UË

	)

105 
	#_00_KR3_SIGNAL_DETECT_OFF
 (0x00UË

	)

106 
	#_08_KR3_SIGNAL_DETECT_ON
 (0x08UË

	)

108 
	#_00_KR4_SIGNAL_DETECT_OFF
 (0x00UË

	)

109 
	#_10_KR4_SIGNAL_DETECT_ON
 (0x10UË

	)

111 
	#_00_KR5_SIGNAL_DETECT_OFF
 (0x00UË

	)

112 
	#_20_KR5_SIGNAL_DETECT_ON
 (0x20UË

	)

117 
	#KEY_WAITTIME
 (8UË

	)

126 
R_INTC_Cª©e
();

127 
R_INTC2_Sèπ
();

128 
R_INTC2_St›
();

129 
R_INTC3_Sèπ
();

130 
R_INTC3_St›
();

131 
R_INTC4_Sèπ
();

132 
R_INTC4_St›
();

133 
R_INTC5_Sèπ
();

134 
R_INTC5_St›
();

135 
R_INTC6_Sèπ
();

136 
R_INTC6_St›
();

137 
R_INTC8_Sèπ
();

138 
R_INTC8_St›
();

139 
R_INTC9_Sèπ
();

140 
R_INTC9_St›
();

	@r_cg_macrodriver.h

29 #i‚de‡
STATUS_H


30 
	#STATUS_H


	)

34 #¥agm®
s‰


35 #¥agm®
DI


36 #¥agm®
EI


37 #¥agm®
NOP


38 #¥agm®
HALT


39 #¥agm®
STOP


48 #i‚de‡
__TYPEDEF__


50 
	#MD_STATUSBASE
 (0x00U)

	)

51 
	#MD_OK
 (
MD_STATUSBASE
 + 0x00UË

	)

52 
	#MD_SPT
 (
MD_STATUSBASE
 + 0x01UË

	)

53 
	#MD_NACK
 (
MD_STATUSBASE
 + 0x02UË

	)

54 
	#MD_BUSY1
 (
MD_STATUSBASE
 + 0x03UË

	)

55 
	#MD_BUSY2
 (
MD_STATUSBASE
 + 0x04UË

	)

56 
	#MD_OVERRUN
 (
MD_STATUSBASE
 + 0x05UË

	)

59 
	#MD_ERRORBASE
 (0x80U)

	)

60 
	#MD_ERROR
 (
MD_ERRORBASE
 + 0x00UË

	)

61 
	#MD_ARGERROR
 (
MD_ERRORBASE
 + 0x01UË

	)

62 
	#MD_ERROR1
 (
MD_ERRORBASE
 + 0x02UË

	)

63 
	#MD_ERROR2
 (
MD_ERRORBASE
 + 0x03UË

	)

64 
	#MD_ERROR3
 (
MD_ERRORBASE
 + 0x04UË

	)

65 
	#MD_ERROR4
 (
MD_ERRORBASE
 + 0x05UË

	)

71 #i‚de‡
__TYPEDEF__


72 sig√d 
	töt8_t
;

73 
	tuöt8_t
;

74 sig√d 
	töt16_t
;

75 
	tuöt16_t
;

76 sig√d 
	töt32_t
;

77 
	tuöt32_t
;

78 
	tMD_STATUS
;

79 
	#__TYPEDEF__


	)

	@r_cg_port.h

29 #i‚de‡
PORT_H


30 
	#PORT_H


	)

39 
	#_01_PMn0_NOT_USE
 (0x01UË

	)

40 
	#_01_PMn0_MODE_INPUT
 (0x01UË

	)

41 
	#_00_PMn0_MODE_OUTPUT
 (0x00UË

	)

42 
	#_02_PMn1_NOT_USE
 (0x02UË

	)

43 
	#_02_PMn1_MODE_INPUT
 (0x02UË

	)

44 
	#_00_PMn1_MODE_OUTPUT
 (0x00UË

	)

45 
	#_04_PMn2_NOT_USE
 (0x04UË

	)

46 
	#_04_PMn2_MODE_INPUT
 (0x04UË

	)

47 
	#_00_PMn2_MODE_OUTPUT
 (0x00UË

	)

48 
	#_08_PMn3_NOT_USE
 (0x08UË

	)

49 
	#_08_PMn3_MODE_INPUT
 (0x08UË

	)

50 
	#_00_PMn3_MODE_OUTPUT
 (0x00UË

	)

51 
	#_10_PMn4_NOT_USE
 (0x10UË

	)

52 
	#_10_PMn4_MODE_INPUT
 (0x10UË

	)

53 
	#_00_PMn4_MODE_OUTPUT
 (0x00UË

	)

54 
	#_20_PMn5_NOT_USE
 (0x20UË

	)

55 
	#_20_PMn5_MODE_INPUT
 (0x20UË

	)

56 
	#_00_PMn5_MODE_OUTPUT
 (0x00UË

	)

57 
	#_40_PMn6_NOT_USE
 (0x40UË

	)

58 
	#_40_PMn6_MODE_INPUT
 (0x40UË

	)

59 
	#_00_PMn6_MODE_OUTPUT
 (0x00UË

	)

60 
	#_80_PMn7_NOT_USE
 (0x80UË

	)

61 
	#_80_PMn7_MODE_INPUT
 (0x80UË

	)

62 
	#_00_PMn7_MODE_OUTPUT
 (0x00UË

	)

68 
	#_00_Pn0_OUTPUT_0
 (0x00UË

	)

69 
	#_01_Pn0_OUTPUT_1
 (0x01UË

	)

70 
	#_00_Pn1_OUTPUT_0
 (0x00UË

	)

71 
	#_02_Pn1_OUTPUT_1
 (0x02UË

	)

72 
	#_00_Pn2_OUTPUT_0
 (0x00UË

	)

73 
	#_04_Pn2_OUTPUT_1
 (0x04UË

	)

74 
	#_00_Pn3_OUTPUT_0
 (0x00UË

	)

75 
	#_08_Pn3_OUTPUT_1
 (0x08UË

	)

76 
	#_00_Pn4_OUTPUT_0
 (0x00UË

	)

77 
	#_10_Pn4_OUTPUT_1
 (0x10UË

	)

78 
	#_00_Pn5_OUTPUT_0
 (0x00UË

	)

79 
	#_20_Pn5_OUTPUT_1
 (0x20UË

	)

80 
	#_00_Pn6_OUTPUT_0
 (0x00UË

	)

81 
	#_40_Pn6_OUTPUT_1
 (0x40UË

	)

82 
	#_00_Pn7_OUTPUT_0
 (0x00UË

	)

83 
	#_80_Pn7_OUTPUT_1
 (0x80UË

	)

89 
	#_00_PUn0_PULLUP_OFF
 (0x00UË

	)

90 
	#_01_PUn0_PULLUP_ON
 (0x01UË

	)

91 
	#_00_PUn1_PULLUP_OFF
 (0x00UË

	)

92 
	#_02_PUn1_PULLUP_ON
 (0x02UË

	)

93 
	#_00_PUn2_PULLUP_OFF
 (0x00UË

	)

94 
	#_04_PUn2_PULLUP_ON
 (0x04UË

	)

95 
	#_00_PUn3_PULLUP_OFF
 (0x00UË

	)

96 
	#_08_PUn3_PULLUP_ON
 (0x08UË

	)

97 
	#_00_PUn4_PULLUP_OFF
 (0x00UË

	)

98 
	#_10_PUn4_PULLUP_ON
 (0x10UË

	)

99 
	#_00_PUn5_PULLUP_OFF
 (0x00UË

	)

100 
	#_20_PUn5_PULLUP_ON
 (0x20UË

	)

101 
	#_00_PUn6_PULLUP_OFF
 (0x00UË

	)

102 
	#_40_PUn6_PULLUP_ON
 (0x40UË

	)

103 
	#_00_PUn7_PULLUP_OFF
 (0x00UË

	)

104 
	#_80_PUn7_PULLUP_ON
 (0x80UË

	)

110 
	#_00_PIMn0_TTL_OFF
 (0x00UË

	)

111 
	#_01_PIMn0_TTL_ON
 (0x01UË

	)

112 
	#_00_PIMn1_TTL_OFF
 (0x00UË

	)

113 
	#_02_PIMn1_TTL_ON
 (0x02UË

	)

114 
	#_00_PIMn2_TTL_OFF
 (0x00UË

	)

115 
	#_04_PIMn2_TTL_ON
 (0x04UË

	)

116 
	#_00_PIMn3_TTL_OFF
 (0x00UË

	)

117 
	#_08_PIMn3_TTL_ON
 (0x08UË

	)

118 
	#_00_PIMn4_TTL_OFF
 (0x00UË

	)

119 
	#_10_PIMn4_TTL_ON
 (0x10UË

	)

120 
	#_00_PIMn5_TTL_OFF
 (0x00UË

	)

121 
	#_20_PIMn5_TTL_ON
 (0x20UË

	)

122 
	#_00_PIMn6_TTL_OFF
 (0x00UË

	)

123 
	#_40_PIMn6_TTL_ON
 (0x40UË

	)

124 
	#_00_PIMn7_TTL_OFF
 (0x00UË

	)

125 
	#_80_PIMn7_TTL_ON
 (0x80UË

	)

131 
	#_00_POMn0_NCH_OFF
 (0x00UË

	)

132 
	#_01_POMn0_NCH_ON
 (0x01UË

	)

133 
	#_00_POMn1_NCH_OFF
 (0x00UË

	)

134 
	#_02_POMn1_NCH_ON
 (0x02UË

	)

135 
	#_00_POMn2_NCH_OFF
 (0x00UË

	)

136 
	#_04_POMn2_NCH_ON
 (0x04UË

	)

137 
	#_00_POMn3_NCH_OFF
 (0x00UË

	)

138 
	#_08_POMn3_NCH_ON
 (0x08UË

	)

139 
	#_00_POMn4_NCH_OFF
 (0x00UË

	)

140 
	#_10_POMn4_NCH_ON
 (0x10UË

	)

141 
	#_00_POMn5_NCH_OFF
 (0x00UË

	)

142 
	#_20_POMn5_NCH_ON
 (0x20UË

	)

143 
	#_00_POMn6_NCH_OFF
 (0x00UË

	)

144 
	#_40_POMn6_NCH_ON
 (0x40UË

	)

145 
	#_00_POMn7_NCH_OFF
 (0x00UË

	)

146 
	#_80_POMn7_NCH_ON
 (0x80UË

	)

152 
	#_01_PMCn0_NOT_USE
 (0x01UË

	)

153 
	#_00_PMCn0_DI_ON
 (0x00UË

	)

154 
	#_02_PMCn1_NOT_USE
 (0x02UË

	)

155 
	#_00_PMCn1_DI_ON
 (0x00UË

	)

156 
	#_04_PMCn2_NOT_USE
 (0x04UË

	)

157 
	#_00_PMCn2_DI_ON
 (0x00UË

	)

158 
	#_08_PMCn3_NOT_USE
 (0x08UË

	)

159 
	#_00_PMCn3_DI_ON
 (0x00UË

	)

160 
	#_10_PMCn4_NOT_USE
 (0x10UË

	)

161 
	#_00_PMCn4_DI_ON
 (0x00UË

	)

162 
	#_20_PMCn5_NOT_USE
 (0x20UË

	)

163 
	#_00_PMCn5_DI_ON
 (0x00UË

	)

164 
	#_40_PMCn6_NOT_USE
 (0x40UË

	)

165 
	#_00_PMCn6_DI_ON
 (0x00UË

	)

166 
	#_80_PMCn7_NOT_USE
 (0x80UË

	)

167 
	#_00_PMCn7_DI_ON
 (0x00UË

	)

173 
	#_00_ADPC_DI_OFF
 (0x00UË

	)

174 
	#_08_ADPC_DI_ON
 (0x08UË

	)

175 
	#_07_ADPC_DI_ON
 (0x07UË

	)

176 
	#_06_ADPC_DI_ON
 (0x06UË

	)

177 
	#_05_ADPC_DI_ON
 (0x05UË

	)

178 
	#_04_ADPC_DI_ON
 (0x04UË

	)

179 
	#_03_ADPC_DI_ON
 (0x03UË

	)

180 
	#_02_ADPC_DI_ON
 (0x02UË

	)

181 
	#_01_ADPC_DI_ON
 (0x01UË

	)

186 
	#_FC_PM0_DEFAULT
 (0xFCUË

	)

187 
	#_FC_PM3_DEFAULT
 (0xFCUË

	)

188 
	#_FC_PM4_DEFAULT
 (0xFCUË

	)

189 
	#_FC_PM5_DEFAULT
 (0xFCUË

	)

190 
	#_F0_PM6_DEFAULT
 (0xF0UË

	)

191 
	#_C0_PM7_DEFAULT
 (0xC0UË

	)

192 
	#_FE_PM12_DEFAULT
 (0xFEUË

	)

193 
	#_3E_PM14_DEFAULT
 (0x3EUË

	)

194 
	#_FE_PMC12_DEFAULT
 (0xFEUË

	)

195 
	#_7F_PMC14_DEFAULT
 (0x7FUË

	)

204 
R_PORT_Cª©e
();

	@r_cg_serial.h

29 #i‚de‡
SERIAL_H


30 
	#SERIAL_H


	)

39 
	#_0000_SAU_CK00_FCLK_0
 (0x0000UË

	)

40 
	#_0001_SAU_CK00_FCLK_1
 (0x0001UË

	)

41 
	#_0002_SAU_CK00_FCLK_2
 (0x0002UË

	)

42 
	#_0003_SAU_CK00_FCLK_3
 (0x0003UË

	)

43 
	#_0004_SAU_CK00_FCLK_4
 (0x0004UË

	)

44 
	#_0005_SAU_CK00_FCLK_5
 (0x0005UË

	)

45 
	#_0006_SAU_CK00_FCLK_6
 (0x0006UË

	)

46 
	#_0007_SAU_CK00_FCLK_7
 (0x0007UË

	)

47 
	#_0008_SAU_CK00_FCLK_8
 (0x0008UË

	)

48 
	#_0009_SAU_CK00_FCLK_9
 (0x0009UË

	)

49 
	#_000A_SAU_CK00_FCLK_10
 (0x000AUË

	)

50 
	#_000B_SAU_CK00_FCLK_11
 (0x000BUË

	)

51 
	#_000C_SAU_CK00_FCLK_12
 (0x000CUË

	)

52 
	#_000D_SAU_CK00_FCLK_13
 (0x000DUË

	)

53 
	#_000E_SAU_CK00_FCLK_14
 (0x000EUË

	)

54 
	#_000F_SAU_CK00_FCLK_15
 (0x000FUË

	)

56 
	#_0000_SAU_CK01_FCLK_0
 (0x0000UË

	)

57 
	#_0010_SAU_CK01_FCLK_1
 (0x0010UË

	)

58 
	#_0020_SAU_CK01_FCLK_2
 (0x0020UË

	)

59 
	#_0030_SAU_CK01_FCLK_3
 (0x0030UË

	)

60 
	#_0040_SAU_CK01_FCLK_4
 (0x0040UË

	)

61 
	#_0050_SAU_CK01_FCLK_5
 (0x0050UË

	)

62 
	#_0060_SAU_CK01_FCLK_6
 (0x0060UË

	)

63 
	#_0070_SAU_CK01_FCLK_7
 (0x0070UË

	)

64 
	#_0080_SAU_CK01_FCLK_8
 (0x0080UË

	)

65 
	#_0090_SAU_CK01_FCLK_9
 (0x0090UË

	)

66 
	#_00A0_SAU_CK01_FCLK_10
 (0x00A0UË

	)

67 
	#_00B0_SAU_CK01_FCLK_11
 (0x00B0UË

	)

68 
	#_00C0_SAU_CK01_FCLK_12
 (0x00C0UË

	)

69 
	#_00D0_SAU_CK01_FCLK_13
 (0x00D0UË

	)

70 
	#_00E0_SAU_CK01_FCLK_14
 (0x00E0UË

	)

71 
	#_00F0_SAU_CK01_FCLK_15
 (0x00F0UË

	)

76 
	#_0020_SAU_SMRMN_INITIALVALUE
 (0x0020U)

	)

78 
	#_0000_SAU_CLOCK_SELECT_CK00
 (0x0000UË

	)

79 
	#_8000_SAU_CLOCK_SELECT_CK01
 (0x8000UË

	)

81 
	#_0000_SAU_CLOCK_MODE_CKS
 (0x0000UË

	)

82 
	#_4000_SAU_CLOCK_MODE_TI0N
 (0x4000UË

	)

84 
	#_0000_SAU_TRIGGER_SOFTWARE
 (0x0000UË

	)

85 
	#_0100_SAU_TRIGGER_RXD
 (0x0100UË

	)

87 
	#_0000_SAU_EDGE_FALL
 (0x0000UË

	)

88 
	#_0040_SAU_EDGE_RISING
 (0x0040UË

	)

90 
	#_0000_SAU_MODE_CSI
 (0x0000UË

	)

91 
	#_0002_SAU_MODE_UART
 (0x0002UË

	)

92 
	#_0004_SAU_MODE_IIC
 (0x0004UË

	)

94 
	#_0000_SAU_TRANSFER_END
 (0x0000UË

	)

95 
	#_0001_SAU_BUFFER_EMPTY
 (0x0001UË

	)

101 
	#_0000_SAU_NOT_COMMUNICATION
 (0x0000UË

	)

102 
	#_4000_SAU_RECEPTION
 (0x4000UË

	)

103 
	#_8000_SAU_TRANSMISSION
 (0x8000UË

	)

104 
	#_C000_SAU_RECEPTION_TRANSMISSION
 (0xC000UË

	)

106 
	#_0000_SAU_TIMING_1
 (0x0000UË

	)

107 
	#_1000_SAU_TIMING_2
 (0x1000UË

	)

108 
	#_2000_SAU_TIMING_3
 (0x2000UË

	)

109 
	#_3000_SAU_TIMING_4
 (0x3000UË

	)

111 
	#_0000_SAU_INTSRE_MASK
 (0x0000UË

	)

112 
	#_0400_SAU_INTSRE_ENABLE
 (0x0400UË

	)

114 
	#_0000_SAU_PARITY_NONE
 (0x0000UË

	)

115 
	#_0100_SAU_PARITY_ZERO
 (0x0100UË

	)

116 
	#_0200_SAU_PARITY_EVEN
 (0x0200UË

	)

117 
	#_0300_SAU_PARITY_ODD
 (0x0300UË

	)

119 
	#_0000_SAU_MSB
 (0x0000UË

	)

120 
	#_0080_SAU_LSB
 (0x0080UË

	)

122 
	#_0000_SAU_STOP_NONE
 (0x0000UË

	)

123 
	#_0010_SAU_STOP_1
 (0x0010UË

	)

124 
	#_0020_SAU_STOP_2
 (0x0020UË

	)

126 
	#_0005_SAU_LENGTH_9
 (0x0005UË

	)

127 
	#_0006_SAU_LENGTH_7
 (0x0006UË

	)

128 
	#_0007_SAU_LENGTH_8
 (0x0007UË

	)

134 
	#_0000_SAU_CHANNEL0_NORMAL
 (0x0000UË

	)

135 
	#_0001_SAU_CHANNEL0_INVERTED
 (0x0001UË

	)

136 
	#_0000_SAU_CHANNEL1_NORMAL
 (0x0000UË

	)

137 
	#_0002_SAU_CHANNEL1_INVERTED
 (0x0002UË

	)

138 
	#_0000_SAU_CHANNEL2_NORMAL
 (0x0000UË

	)

139 
	#_0004_SAU_CHANNEL2_INVERTED
 (0x0004UË

	)

140 
	#_0000_SAU_CHANNEL3_NORMAL
 (0x0000UË

	)

141 
	#_0008_SAU_CHANNEL3_INVERTED
 (0x0008UË

	)

147 
	#_00_SAU_RXD3_FILTER_OFF
 (0x00UË

	)

148 
	#_40_SAU_RXD3_FILTER_ON
 (0x40UË

	)

149 
	#_00_SAU_RXD2_FILTER_OFF
 (0x00UË

	)

150 
	#_10_SAU_RXD2_FILTER_ON
 (0x10UË

	)

151 
	#_00_SAU_RXD1_FILTER_OFF
 (0x00UË

	)

152 
	#_04_SAU_RXD1_FILTER_ON
 (0x04UË

	)

153 
	#_00_SAU_RXD0_FILTER_OFF
 (0x00UË

	)

154 
	#_01_SAU_RXD0_FILTER_ON
 (0x01UË

	)

160 
	#_0040_SAU_UNDER_EXECUTE
 (0x0040UË

	)

162 
	#_0020_SAU_VALID_STORED
 (0x0020UË

	)

164 
	#_0004_SAU_FRAM_ERROR
 (0x0004UË

	)

166 
	#_0002_SAU_PARITY_ERROR
 (0x0002UË

	)

168 
	#_0001_SAU_OVERRUN_ERROR
 (0x0001UË

	)

174 
	#_0000_SAU_CH0_START_TRG_OFF
 (0x0000UË

	)

175 
	#_0001_SAU_CH0_START_TRG_ON
 (0x0001UË

	)

177 
	#_0000_SAU_CH1_START_TRG_OFF
 (0x0000UË

	)

178 
	#_0002_SAU_CH1_START_TRG_ON
 (0x0002UË

	)

180 
	#_0000_SAU_CH2_START_TRG_OFF
 (0x0000UË

	)

181 
	#_0004_SAU_CH2_START_TRG_ON
 (0x0004UË

	)

183 
	#_0000_SAU_CH3_START_TRG_OFF
 (0x0000UË

	)

184 
	#_0008_SAU_CH3_START_TRG_ON
 (0x0008UË

	)

190 
	#_0000_SAU_CH0_STOP_TRG_OFF
 (0x0000UË

	)

191 
	#_0001_SAU_CH0_STOP_TRG_ON
 (0x0001UË

	)

193 
	#_0000_SAU_CH1_STOP_TRG_OFF
 (0x0000UË

	)

194 
	#_0002_SAU_CH1_STOP_TRG_ON
 (0x0002UË

	)

196 
	#_0000_SAU_CH2_STOP_TRG_OFF
 (0x0000UË

	)

197 
	#_0004_SAU_CH2_STOP_TRG_ON
 (0x0004UË

	)

199 
	#_0000_SAU_CH3_STOP_TRG_OFF
 (0x0000UË

	)

200 
	#_0008_SAU_CH3_STOP_TRG_ON
 (0x0008UË

	)

206 
	#_0001_SAU_SIRMN_OVCTMN
 (0x0001U)

	)

208 
	#_0002_SAU_SIRMN_PECTMN
 (0x0002U)

	)

210 
	#_0004_SAU_SIRMN_FECTMN
 (0x0004U)

	)

216 
	#_0001_SAU_CH0_OUTPUT_ENABLE
 (0x0001UË

	)

217 
	#_0000_SAU_CH0_OUTPUT_DISABLE
 (0x0000UË

	)

219 
	#_0002_SAU_CH1_OUTPUT_ENABLE
 (0x0002UË

	)

220 
	#_0000_SAU_CH1_OUTPUT_DISABLE
 (0x0000UË

	)

222 
	#_0004_SAU_CH2_OUTPUT_ENABLE
 (0x0004UË

	)

223 
	#_0000_SAU_CH2_OUTPUT_DISABLE
 (0x0000UË

	)

225 
	#_0008_SAU_CH3_OUTPUT_ENABLE
 (0x0008UË

	)

226 
	#_0000_SAU_CH3_OUTPUT_DISABLE
 (0x0000UË

	)

232 
	#_0000_SAU_CH0_DATA_OUTPUT_0
 (0x0000UË

	)

233 
	#_0001_SAU_CH0_DATA_OUTPUT_1
 (0x0001UË

	)

235 
	#_0000_SAU_CH1_DATA_OUTPUT_0
 (0x0000UË

	)

236 
	#_0002_SAU_CH1_DATA_OUTPUT_1
 (0x0002UË

	)

238 
	#_0000_SAU_CH2_DATA_OUTPUT_0
 (0x0000UË

	)

239 
	#_0004_SAU_CH2_DATA_OUTPUT_1
 (0x0004UË

	)

241 
	#_0000_SAU_CH3_DATA_OUTPUT_0
 (0x0000UË

	)

242 
	#_0008_SAU_CH3_DATA_OUTPUT_1
 (0x0008UË

	)

244 
	#_0000_SAU_CH0_CLOCK_OUTPUT_0
 (0x0000UË

	)

245 
	#_0100_SAU_CH0_CLOCK_OUTPUT_1
 (0x0100UË

	)

247 
	#_0000_SAU_CH1_CLOCK_OUTPUT_0
 (0x0000UË

	)

248 
	#_0200_SAU_CH1_CLOCK_OUTPUT_1
 (0x0200UË

	)

250 
	#_0000_SAU_CH2_CLOCK_OUTPUT_0
 (0x0000UË

	)

251 
	#_0400_SAU_CH2_CLOCK_OUTPUT_1
 (0x0400UË

	)

253 
	#_0000_SAU_CH3_CLOCK_OUTPUT_0
 (0x0000UË

	)

254 
	#_0800_SAU_CH3_CLOCK_OUTPUT_1
 (0x0800UË

	)

260 
	#_0000_SAU_CH0_SNOOZE_OFF
 (0x0000UË

	)

261 
	#_0001_SAU_CH0_SNOOZE_ON
 (0x0001UË

	)

264 
	#_00_SAU_IIC_MASTER_FLAG_CLEAR
 (0x00U)

	)

265 
	#_01_SAU_IIC_SEND_FLAG
 (0x01U)

	)

266 
	#_02_SAU_IIC_RECEIVE_FLAG
 (0x02U)

	)

267 
	#_04_SAU_IIC_SENDED_ADDRESS_FLAG
 (0x04U)

	)

273 
	#_00_SAU_SSI00_UNUSED
 (0x00UË

	)

274 
	#_80_SAU_SSI00_USED
 (0x80UË

	)

280 
	#_00_IICA_OPERATION_DISABLE
 (0x00UË

	)

281 
	#_80_IICA_OPERATION_ENABLE
 (0x80UË

	)

283 
	#_00_IICA_COMMUNICATION_NORMAL
 (0x00UË

	)

284 
	#_40_IICA_COMMUNICATION_EXIT
 (0x40UË

	)

286 
	#_00_IICA_WAIT_NOTCANCEL
 (0x00UË

	)

287 
	#_20_IICA_WAIT_CANCEL
 (0x20UË

	)

289 
	#_00_IICA_STOPINT_DISABLE
 (0x00UË

	)

290 
	#_10_IICA_STOPINT_ENABLE
 (0x10UË

	)

292 
	#_00_IICA_WAITINT_CLK8FALLING
 (0x00UË

	)

293 
	#_08_IICA_WAITINT_CLK9FALLING
 (0x08UË

	)

295 
	#_00_IICA_ACK_DISABLE
 (0x00UË

	)

296 
	#_04_IICA_ACK_ENABLE
 (0x04UË

	)

298 
	#_00_IICA_START_NOTGENERATE
 (0x00UË

	)

299 
	#_02_IICA_START_GENERATE
 (0x02UË

	)

301 
	#_00_IICA_STOP_NOTGENERATE
 (0x00UË

	)

302 
	#_01_IICA_STOP_GENERATE
 (0x01UË

	)

308 
	#_00_IICA_STATUS_NOTMASTER
 (0x00UË

	)

309 
	#_80_IICA_STATUS_MASTER
 (0x80UË

	)

311 
	#_00_IICA_ARBITRATION_NO
 (0x00UË

	)

312 
	#_40_IICA_ARBITRATION_LOSS
 (0x40UË

	)

314 
	#_00_IICA_EXTCODE_NOT
 (0x00UË

	)

315 
	#_20_IICA_EXTCODE_RECEIVED
 (0x20UË

	)

317 
	#_00_IICA_ADDRESS_NOTMATCH
 (0x00UË

	)

318 
	#_10_IICA_ADDRESS_MATCH
 (0x10UË

	)

320 
	#_00_IICA_STATUS_RECEIVE
 (0x00UË

	)

321 
	#_08_IICA_STATUS_TRANSMIT
 (0x08UË

	)

323 
	#_00_IICA_ACK_NOTDETECTED
 (0x00UË

	)

324 
	#_04_IICA_ACK_DETECTED
 (0x04UË

	)

326 
	#_00_IICA_START_NOTDETECTED
 (0x00UË

	)

327 
	#_02_IICA_START_DETECTED
 (0x02UË

	)

329 
	#_00_IICA_STOP_NOTDETECTED
 (0x00UË

	)

330 
	#_01_IICA_STOP_DETECTED
 (0x01UË

	)

336 
	#_00_IICA_STARTFLAG_GENERATE
 (0x00UË

	)

337 
	#_80_IICA_STARTFLAG_UNSUCCESSFUL
 (0x80UË

	)

339 
	#_00_IICA_BUS_RELEASE
 (0x00UË

	)

340 
	#_40_IICA_BUS_COMMUNICATION
 (0x40UË

	)

342 
	#_00_IICA_START_WITHSTOP
 (0x00UË

	)

343 
	#_02_IICA_START_WITHOUTSTOP
 (0x02UË

	)

345 
	#_00_IICA_RESERVATION_ENABLE
 (0x00UË

	)

346 
	#_01_IICA_RESERVATION_DISABLE
 (0x01UË

	)

352 
	#_00_IICA_WAKEUP_STOP
 (0x00UË

	)

353 
	#_80_IICA_WAKEUP_ENABLE
 (0x80UË

	)

355 
	#_00_IICA_SCL_LOW
 (0x00UË

	)

356 
	#_20_IICA_SCL_HIGH
 (0x20UË

	)

358 
	#_00_IICA_SDA_LOW
 (0x00UË

	)

359 
	#_10_IICA_SDA_HIGH
 (0x10UË

	)

361 
	#_00_IICA_MODE_STANDARD
 (0x00UË

	)

362 
	#_08_IICA_MODE_HIGHSPEED
 (0x08UË

	)

364 
	#_00_IICA_FILTER_OFF
 (0x00UË

	)

365 
	#_04_IICA_FILTER_ON
 (0x04UË

	)

367 
	#_00_IICA_fCLK
 (0x00UË

	)

368 
	#_01_IICA_fCLK_HALF
 (0x01UË

	)

370 
	#_80_IICA_ADDRESS_COMPLETE
 (0x80U)

	)

371 
	#_00_IICA_MASTER_FLAG_CLEAR
 (0x00U)

	)

376 
	#_8800_UART1_RECEIVE_DIVISOR
 (0x8800U)

	)

377 
	#_8800_UART1_TRANSMIT_DIVISOR
 (0x8800U)

	)

378 
	#_10_IICA0_MASTERADDRESS
 (0x10U)

	)

379 
	#_55_IICA0_IICWH_VALUE
 (0x55U)

	)

380 
	#_4C_IICA0_IICWL_VALUE
 (0x4CU)

	)

389 
R_SAU0_Cª©e
();

390 
R_UART1_Cª©e
();

391 
R_UART1_Sèπ
();

392 
R_UART1_St›
();

393 
MD_STATUS
 
R_UART1_Síd
(
uöt8_t
 * c⁄° 
tx_buf
, 
uöt16_t
 
tx_num
);

394 
MD_STATUS
 
R_UART1_Re˚ive
(
uöt8_t
 * c⁄° 
rx_buf
, 
uöt16_t
 
rx_num
);

395 
r_u¨t1_ˇŒback_îr‹
(
uöt8_t
 
îr_ty≥
);

396 
r_u¨t1_ˇŒback_ª˚ivìnd
();

397 
r_u¨t1_ˇŒback_£ndíd
();

398 
r_u¨t1_ˇŒback_so·w¨eovîrun
(
uöt16_t
 
rx_d©a
);

399 
R_IICA0_Cª©e
();

400 
MD_STATUS
 
R_IICA0_Ma°î_Síd
(
uöt8_t
 
adr
, uöt8_à* c⁄° 
tx_buf
, 
uöt16_t
 
tx_num
, uöt8_à
waô
);

401 
MD_STATUS
 
R_IICA0_Ma°î_Re˚ive
(
uöt8_t
 
adr
, uöt8_à* c⁄° 
rx_buf
, 
uöt16_t
 
rx_num
, uöt8_à
waô
);

402 
R_IICA0_St›
();

403 
R_IICA0_St›C⁄dôi⁄
();

404 
r_iiˇ0_ˇŒback_ma°î_£ndíd
();

405 
r_iiˇ0_ˇŒback_ma°î_ª˚ivìnd
();

406 
r_iiˇ0_ˇŒback_ma°î_îr‹
(
MD_STATUS
 
Êag
);

407 
iiˇ0_ma°î_h™dÀr
();

408 
iiˇ0_¶ave_h™dÀr
();

	@r_cg_timer.h

29 #i‚de‡
TAU_H


30 
	#TAU_H


	)

39 
	#_00_TAU0_CLOCK_STOP
 (0x00UË

	)

40 
	#_01_TAU0_CLOCK_SUPPLY
 (0x01UË

	)

46 
	#_0000_TAU_CKM0_FCLK_0
 (0x0000UË

	)

47 
	#_0001_TAU_CKM0_FCLK_1
 (0x0001UË

	)

48 
	#_0002_TAU_CKM0_FCLK_2
 (0x0002UË

	)

49 
	#_0003_TAU_CKM0_FCLK_3
 (0x0003UË

	)

50 
	#_0004_TAU_CKM0_FCLK_4
 (0x0004UË

	)

51 
	#_0005_TAU_CKM0_FCLK_5
 (0x0005UË

	)

52 
	#_0006_TAU_CKM0_FCLK_6
 (0x0006UË

	)

53 
	#_0007_TAU_CKM0_FCLK_7
 (0x0007UË

	)

54 
	#_0008_TAU_CKM0_FCLK_8
 (0x0008UË

	)

55 
	#_0009_TAU_CKM0_FCLK_9
 (0x0009UË

	)

56 
	#_000A_TAU_CKM0_FCLK_10
 (0x000AUË

	)

57 
	#_000B_TAU_CKM0_FCLK_11
 (0x000BUË

	)

58 
	#_000C_TAU_CKM0_FCLK_12
 (0x000CUË

	)

59 
	#_000D_TAU_CKM0_FCLK_13
 (0x000DUË

	)

60 
	#_000E_TAU_CKM0_FCLK_14
 (0x000EUË

	)

61 
	#_000F_TAU_CKM0_FCLK_15
 (0x000FUË

	)

63 
	#_0000_TAU_CKM1_FCLK_0
 (0x0000UË

	)

64 
	#_0010_TAU_CKM1_FCLK_1
 (0x0010UË

	)

65 
	#_0020_TAU_CKM1_FCLK_2
 (0x0020UË

	)

66 
	#_0030_TAU_CKM1_FCLK_3
 (0x0030UË

	)

67 
	#_0040_TAU_CKM1_FCLK_4
 (0x0040UË

	)

68 
	#_0050_TAU_CKM1_FCLK_5
 (0x0050UË

	)

69 
	#_0060_TAU_CKM1_FCLK_6
 (0x0060UË

	)

70 
	#_0070_TAU_CKM1_FCLK_7
 (0x0070UË

	)

71 
	#_0080_TAU_CKM1_FCLK_8
 (0x0080UË

	)

72 
	#_0090_TAU_CKM1_FCLK_9
 (0x0090UË

	)

73 
	#_00A0_TAU_CKM1_FCLK_10
 (0x00A0UË

	)

74 
	#_00B0_TAU_CKM1_FCLK_11
 (0x00B0UË

	)

75 
	#_00C0_TAU_CKM1_FCLK_12
 (0x00C0UË

	)

76 
	#_00D0_TAU_CKM1_FCLK_13
 (0x00D0UË

	)

77 
	#_00E0_TAU_CKM1_FCLK_14
 (0x00E0UË

	)

78 
	#_00F0_TAU_CKM1_FCLK_15
 (0x00F0UË

	)

80 
	#_0000_TAU_CKM2_FCLK_1
 (0x0000UË

	)

81 
	#_0100_TAU_CKM2_FCLK_2
 (0x0100UË

	)

82 
	#_0200_TAU_CKM2_FCLK_4
 (0x0200UË

	)

83 
	#_0300_TAU_CKM2_FCLK_6
 (0x0300UË

	)

85 
	#_0000_TAU_CKM3_FCLK_8
 (0x0000UË

	)

86 
	#_1000_TAU_CKM3_FCLK_10
 (0x1000UË

	)

87 
	#_2000_TAU_CKM3_FCLK_12
 (0x2000UË

	)

88 
	#_3000_TAU_CKM3_FCLK_14
 (0x3000UË

	)

94 
	#_0000_TAU_CLOCK_SELECT_CKM0
 (0x0000UË

	)

95 
	#_8000_TAU_CLOCK_SELECT_CKM1
 (0x8000UË

	)

96 
	#_4000_TAU_CLOCK_SELECT_CKM2
 (0x4000UË

	)

97 
	#_C000_TAU_CLOCK_SELECT_CKM3
 (0xC000UË

	)

99 
	#_0000_TAU_CLOCK_MODE_CKS
 (0x0000UË

	)

100 
	#_1000_TAU_CLOCK_MODE_TIMN
 (0x1000UË

	)

102 
	#_0000_TAU_COMBINATION_SLAVE
 (0x0000UË

	)

103 
	#_0000_TAU_COMBINATION_MASTER
 (0x0000UË

	)

104 
	#_0800_TAU_COMBINATION_MASTER
 (0x0800UË

	)

106 
	#_0000_TAU_16BITS_MODE
 (0x0000UË

	)

107 
	#_0800_TAU_8BITS_MODE
 (0x0800UË

	)

109 
	#_0000_TAU_TRIGGER_SOFTWARE
 (0x0000UË

	)

110 
	#_0100_TAU_TRIGGER_TIMN_VALID
 (0x0100UË

	)

111 
	#_0200_TAU_TRIGGER_TIMN_BOTH
 (0x0200UË

	)

112 
	#_0400_TAU_TRIGGER_MASTER_INT
 (0x0400UË

	)

114 
	#_0000_TAU_TIMN_EDGE_FALLING
 (0x0000UË

	)

115 
	#_0040_TAU_TIMN_EDGE_RISING
 (0x0040UË

	)

116 
	#_0080_TAU_TIMN_EDGE_BOTH_LOW
 (0x0080UË

	)

117 
	#_00C0_TAU_TIMN_EDGE_BOTH_HIGH
 (0x00C0UË

	)

119 
	#_0000_TAU_MODE_INTERVAL_TIMER
 (0x0000UË

	)

120 
	#_0004_TAU_MODE_CAPTURE
 (0x0004UË

	)

121 
	#_0006_TAU_MODE_EVENT_COUNT
 (0x0006UË

	)

122 
	#_0008_TAU_MODE_ONE_COUNT
 (0x0008UË

	)

123 
	#_000C_TAU_MODE_HIGHLOW_MEASURE
 (0x000CUË

	)

124 
	#_0001_TAU_MODE_PWM_MASTER
 (0x0001UË

	)

125 
	#_0009_TAU_MODE_PWM_SLAVE
 (0x0009UË

	)

126 
	#_0008_TAU_MODE_ONESHOT
 (0x0008UË

	)

128 
	#_0000_TAU_START_INT_UNUSED
 (0x0000UË

	)

129 
	#_0001_TAU_START_INT_USED
 (0x0001UË

	)

135 
	#_0000_TAU_OVERFLOW_NOT_OCCURS
 (0x0000UË

	)

136 
	#_0001_TAU_OVERFLOW_OCCURS
 (0x0001UË

	)

142 
	#_0000_TAU_CH0_OPERATION_STOP
 (0x0000UË

	)

143 
	#_0001_TAU_CH0_OPERATION_ENABLE
 (0x0001UË

	)

145 
	#_0000_TAU_CH1_OPERATION_STOP
 (0x0000UË

	)

146 
	#_0002_TAU_CH1_OPERATION_ENABLE
 (0x0002UË

	)

148 
	#_0000_TAU_CH2_OPERATION_STOP
 (0x0000UË

	)

149 
	#_0004_TAU_CH2_OPERATION_ENABLE
 (0x0004UË

	)

151 
	#_0000_TAU_CH3_OPERATION_STOP
 (0x0000UË

	)

152 
	#_0008_TAU_CH3_OPERATION_ENABLE
 (0x0008UË

	)

154 
	#_0000_TAU_CH4_OPERATION_STOP
 (0x0000UË

	)

155 
	#_0010_TAU_CH4_OPERATION_ENABLE
 (0x0010UË

	)

157 
	#_0000_TAU_CH5_OPERATION_STOP
 (0x0000UË

	)

158 
	#_0020_TAU_CH5_OPERATION_ENABLE
 (0x0020UË

	)

160 
	#_0000_TAU_CH6_OPERATION_STOP
 (0x0000UË

	)

161 
	#_0040_TAU_CH6_OPERATION_ENABLE
 (0x0040UË

	)

163 
	#_0000_TAU_CH7_OPERATION_STOP
 (0x0000UË

	)

164 
	#_0080_TAU_CH7_OPERATION_ENABLE
 (0x0080UË

	)

166 
	#_0000_TAU_CH1_H8_OPERATION_STOP
 (0x0000UË

	)

167 
	#_0200_TAU_CH1_H8_OPERATION_ENABLE
 (0x0200UË

	)

169 
	#_0000_TAU_CH3_H8_OPERATION_STOP
 (0x0000UË

	)

170 
	#_0800_TAU_CH3_H8_OPERATION_ENABLE
 (0x0800UË

	)

176 
	#_0000_TAU_CH0_START_TRG_OFF
 (0x0000UË

	)

177 
	#_0001_TAU_CH0_START_TRG_ON
 (0x0001UË

	)

179 
	#_0000_TAU_CH1_START_TRG_OFF
 (0x0000UË

	)

180 
	#_0002_TAU_CH1_START_TRG_ON
 (0x0002UË

	)

182 
	#_0000_TAU_CH2_START_TRG_OFF
 (0x0000UË

	)

183 
	#_0004_TAU_CH2_START_TRG_ON
 (0x0004UË

	)

185 
	#_0000_TAU_CH3_START_TRG_OFF
 (0x0000UË

	)

186 
	#_0008_TAU_CH3_START_TRG_ON
 (0x0008UË

	)

188 
	#_0000_TAU_CH4_START_TRG_OFF
 (0x0000UË

	)

189 
	#_0010_TAU_CH4_START_TRG_ON
 (0x0010UË

	)

191 
	#_0000_TAU_CH5_START_TRG_OFF
 (0x0000UË

	)

192 
	#_0020_TAU_CH5_START_TRG_ON
 (0x0020UË

	)

194 
	#_0000_TAU_CH6_START_TRG_OFF
 (0x0000UË

	)

195 
	#_0040_TAU_CH6_START_TRG_ON
 (0x0040UË

	)

197 
	#_0000_TAU_CH7_START_TRG_OFF
 (0x0000UË

	)

198 
	#_0080_TAU_CH7_START_TRG_ON
 (0x0080UË

	)

200 
	#_0000_TAU_CH1_H8_START_TRG_OFF
 (0x0000UË

	)

201 
	#_0200_TAU_CH1_H8_START_TRG_ON
 (0x0200UË

	)

203 
	#_0000_TAU_CH3_H8_START_TRG_OFF
 (0x0000UË

	)

204 
	#_0800_TAU_CH3_H8_START_TRG_ON
 (0x0800UË

	)

210 
	#_0000_TAU_CH0_STOP_TRG_OFF
 (0x0000UË

	)

211 
	#_0001_TAU_CH0_STOP_TRG_ON
 (0x0001UË

	)

213 
	#_0000_TAU_CH1_STOP_TRG_OFF
 (0x0000UË

	)

214 
	#_0002_TAU_CH1_STOP_TRG_ON
 (0x0002UË

	)

216 
	#_0000_TAU_CH2_STOP_TRG_OFF
 (0x0000UË

	)

217 
	#_0004_TAU_CH2_STOP_TRG_ON
 (0x0004UË

	)

219 
	#_0000_TAU_CH3_STOP_TRG_OFF
 (0x0000UË

	)

220 
	#_0008_TAU_CH3_STOP_TRG_ON
 (0x0008UË

	)

222 
	#_0000_TAU_CH4_STOP_TRG_OFF
 (0x0000UË

	)

223 
	#_0010_TAU_CH4_STOP_TRG_ON
 (0x0010UË

	)

225 
	#_0000_TAU_CH5_STOP_TRG_OFF
 (0x0000UË

	)

226 
	#_0020_TAU_CH5_STOP_TRG_ON
 (0x0020UË

	)

228 
	#_0000_TAU_CH6_STOP_TRG_OFF
 (0x0000UË

	)

229 
	#_0040_TAU_CH6_STOP_TRG_ON
 (0x0040UË

	)

231 
	#_0000_TAU_CH7_STOP_TRG_OFF
 (0x0000UË

	)

232 
	#_0080_TAU_CH7_STOP_TRG_ON
 (0x0080UË

	)

234 
	#_0000_TAU_CH1_H8_STOP_TRG_OFF
 (0x0000UË

	)

235 
	#_0200_TAU_CH1_H8_STOP_TRG_ON
 (0x0200UË

	)

237 
	#_0000_TAU_CH3_H8_STOP_TRG_OFF
 (0x0000UË

	)

238 
	#_0800_TAU_CH3_H8_STOP_TRG_ON
 (0x0800UË

	)

244 
	#_00_TAU_CH5_INPUT_TI05
 (0x00UË

	)

245 
	#_01_TAU_CH5_INPUT_TI05
 (0x01UË

	)

246 
	#_02_TAU_CH5_INPUT_TI05
 (0x02UË

	)

247 
	#_03_TAU_CH5_INPUT_TI05
 (0x03UË

	)

248 
	#_04_TAU_CH5_INPUT_FIL
 (0x04UË

	)

249 
	#_05_TAU_CH5_INPUT_FSUB
 (0x05UË

	)

255 
	#_0001_TAU_CH0_OUTPUT_ENABLE
 (0x0001UË

	)

256 
	#_0000_TAU_CH0_OUTPUT_DISABLE
 (0x0000UË

	)

258 
	#_0002_TAU_CH1_OUTPUT_ENABLE
 (0x0002UË

	)

259 
	#_0000_TAU_CH1_OUTPUT_DISABLE
 (0x0000UË

	)

261 
	#_0004_TAU_CH2_OUTPUT_ENABLE
 (0x0004UË

	)

262 
	#_0000_TAU_CH2_OUTPUT_DISABLE
 (0x0000UË

	)

264 
	#_0008_TAU_CH3_OUTPUT_ENABLE
 (0x0008UË

	)

265 
	#_0000_TAU_CH3_OUTPUT_DISABLE
 (0x0000UË

	)

267 
	#_0010_TAU_CH4_OUTPUT_ENABLE
 (0x0010UË

	)

268 
	#_0000_TAU_CH4_OUTPUT_DISABLE
 (0x0000UË

	)

270 
	#_0020_TAU_CH5_OUTPUT_ENABLE
 (0x0020UË

	)

271 
	#_0000_TAU_CH5_OUTPUT_DISABLE
 (0x0000UË

	)

273 
	#_0040_TAU_CH6_OUTPUT_ENABLE
 (0x0040UË

	)

274 
	#_0000_TAU_CH6_OUTPUT_DISABLE
 (0x0000UË

	)

276 
	#_0080_TAU_CH7_OUTPUT_ENABLE
 (0x0080UË

	)

277 
	#_0000_TAU_CH7_OUTPUT_DISABLE
 (0x0000UË

	)

283 
	#_0000_TAU_CH0_OUTPUT_VALUE_0
 (0x0000UË

	)

284 
	#_0001_TAU_CH0_OUTPUT_VALUE_1
 (0x0001UË

	)

286 
	#_0000_TAU_CH1_OUTPUT_VALUE_0
 (0x0000UË

	)

287 
	#_0002_TAU_CH1_OUTPUT_VALUE_1
 (0x0002UË

	)

289 
	#_0000_TAU_CH2_OUTPUT_VALUE_0
 (0x0000UË

	)

290 
	#_0004_TAU_CH2_OUTPUT_VALUE_1
 (0x0004UË

	)

292 
	#_0000_TAU_CH3_OUTPUT_VALUE_0
 (0x0000UË

	)

293 
	#_0008_TAU_CH3_OUTPUT_VALUE_1
 (0x0008UË

	)

295 
	#_0000_TAU_CH4_OUTPUT_VALUE_0
 (0x0000UË

	)

296 
	#_0010_TAU_CH4_OUTPUT_VALUE_1
 (0x0010UË

	)

298 
	#_0000_TAU_CH5_OUTPUT_VALUE_0
 (0x0000UË

	)

299 
	#_0020_TAU_CH5_OUTPUT_VALUE_1
 (0x0020UË

	)

301 
	#_0000_TAU_CH6_OUTPUT_VALUE_0
 (0x0000UË

	)

302 
	#_0040_TAU_CH6_OUTPUT_VALUE_1
 (0x0040UË

	)

304 
	#_0000_TAU_CH7_OUTPUT_VALUE_0
 (0x0000UË

	)

305 
	#_0080_TAU_CH7_OUTPUT_VALUE_1
 (0x0080UË

	)

311 
	#_0000_TAU_CH1_OUTPUT_LEVEL_H
 (0x0000UË

	)

312 
	#_0002_TAU_CH1_OUTPUT_LEVEL_L
 (0x0002UË

	)

314 
	#_0000_TAU_CH2_OUTPUT_LEVEL_H
 (0x0000UË

	)

315 
	#_0004_TAU_CH2_OUTPUT_LEVEL_L
 (0x0004UË

	)

317 
	#_0000_TAU_CH3_OUTPUT_LEVEL_H
 (0x0000UË

	)

318 
	#_0008_TAU_CH3_OUTPUT_LEVEL_L
 (0x0008UË

	)

320 
	#_0000_TAU_CH4_OUTPUT_LEVEL_H
 (0x0000UË

	)

321 
	#_0010_TAU_CH4_OUTPUT_LEVEL_L
 (0x0010UË

	)

323 
	#_0000_TAU_CH5_OUTPUT_LEVEL_H
 (0x0000UË

	)

324 
	#_0020_TAU_CH5_OUTPUT_LEVEL_L
 (0x0020UË

	)

326 
	#_0000_TAU_CH6_OUTPUT_LEVEL_H
 (0x0000UË

	)

327 
	#_0040_TAU_CH6_OUTPUT_LEVEL_L
 (0x0040UË

	)

329 
	#_0000_TAU_CH7_OUTPUT_LEVEL_H
 (0x0000UË

	)

330 
	#_0080_TAU_CH7_OUTPUT_LEVEL_L
 (0x0080UË

	)

336 
	#_0000_TAU_CH1_OUTPUT_TOGGLE
 (0x0000UË

	)

337 
	#_0002_TAU_CH1_OUTPUT_COMBIN
 (0x0002UË

	)

339 
	#_0000_TAU_CH2_OUTPUT_TOGGLE
 (0x0000UË

	)

340 
	#_0004_TAU_CH2_OUTPUT_COMBIN
 (0x0004UË

	)

342 
	#_0000_TAU_CH3_OUTPUT_TOGGLE
 (0x0000UË

	)

343 
	#_0008_TAU_CH3_OUTPUT_COMBIN
 (0x0008UË

	)

345 
	#_0000_TAU_CH4_OUTPUT_TOGGLE
 (0x0000UË

	)

346 
	#_0010_TAU_CH4_OUTPUT_COMBIN
 (0x0010UË

	)

348 
	#_0000_TAU_CH5_OUTPUT_TOGGLE
 (0x0000UË

	)

349 
	#_0020_TAU_CH5_OUTPUT_COMBIN
 (0x0020UË

	)

351 
	#_0000_TAU_CH6_OUTPUT_TOGGLE
 (0x0000UË

	)

352 
	#_0040_TAU_CH6_OUTPUT_COMBIN
 (0x0040UË

	)

354 
	#_0000_TAU_CH7_OUTPUT_TOGGLE
 (0x0000UË

	)

355 
	#_0080_TAU_CH7_OUTPUT_COMBIN
 (0x0080UË

	)

361 
	#_00_TAU_CH7_NO_INPUT
 (0x00UË

	)

362 
	#_02_TAU_CH7_RXD3_INPUT
 (0x02UË

	)

368 
	#_00_TAU_CH7_NOISE_OFF
 (0x00UË

	)

369 
	#_80_TAU_CH7_NOISE_ON
 (0x80UË

	)

371 
	#_00_TAU_CH6_NOISE_OFF
 (0x00UË

	)

372 
	#_40_TAU_CH6_NOISE_ON
 (0x40UË

	)

374 
	#_00_TAU_CH5_NOISE_OFF
 (0x00UË

	)

375 
	#_20_TAU_CH5_NOISE_ON
 (0x20UË

	)

377 
	#_00_TAU_CH4_NOISE_OFF
 (0x00UË

	)

378 
	#_10_TAU_CH4_NOISE_ON
 (0x10UË

	)

380 
	#_00_TAU_CH3_NOISE_OFF
 (0x00UË

	)

381 
	#_08_TAU_CH3_NOISE_ON
 (0x08UË

	)

383 
	#_00_TAU_CH2_NOISE_OFF
 (0x00UË

	)

384 
	#_04_TAU_CH2_NOISE_ON
 (0x04UË

	)

386 
	#_00_TAU_CH1_NOISE_OFF
 (0x00UË

	)

387 
	#_02_TAU_CH1_NOISE_ON
 (0x02UË

	)

389 
	#_00_TAU_CH0_NOISE_OFF
 (0x00UË

	)

390 
	#_01_TAU_CH0_NOISE_ON
 (0x01UË

	)

397 
	#_7CFF_TAU_TDR00_VALUE
 (0x7CFFU)

	)

399 
	#_0001_TAU0_CHANNEL0_DIVISOR
 (0x0001U)

	)

408 
R_TAU0_Cª©e
();

409 
R_TAU0_Ch™√l0_Sèπ
();

410 
R_TAU0_Ch™√l0_St›
();

	@r_cg_userdefine.h

29 #i‚de‡
_USER_DEF_H


30 
	#_USER_DEF_H


	)

	@r_cg_wdt.h

29 #i‚de‡
WDT_H


30 
	#WDT_H


	)

47 
R_WDT_Cª©e
();

48 
R_WDT_Re°¨t
();

	@
1
.
0
92
7981
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\comm.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\comm.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\crc16.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\crc16.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_debug.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_debug.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_eol.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_eol.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_tof.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\comm\parser_tof.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\config.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\eeprom\eeprom.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\eeprom\eeprom.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_room_level.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_room_level.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp_cold_water.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp_cold_water.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp_hot_water.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\err_temp_hot_water.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\error.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\error.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\process_error.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\error\process_error.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\fct.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\fct.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\key_fct_handler.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\key_fct_handler.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\process_fct.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\fct\process_fct.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap04vt_api.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap04vt_api.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap04vt_firmware.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap04vt_firmware.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap_i2c.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\gp2ap_i2c.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\tof.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\gp2ap04vt\tof.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_eeprom.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_eeprom.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_i2c.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_i2c.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_serial.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hal_serial.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\hw.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\hal\mcu.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\main.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\prj_type.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\process_sys_event.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\process_sys_event.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\timer\timer.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\timer\timer.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\timer\timer_id.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\util.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\Source\util.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_adc.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_adc.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_adc_user.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_cgc.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_cgc.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_cgc_user.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_intc.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_intc.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_intc_user.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_macrodriver.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_port.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_port.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_port_user.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_serial.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_serial.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_serial_user.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_timer.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_timer.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_timer_user.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_userdefine.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_wdt.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_wdt.h
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_cg_wdt_user.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_main.c
D:\Work\project_svn\2024\TECH_MOVING_FAUCET_TOF\Program\MainMulti_V100_7\r_systeminit.c
r_cg_adc.h
r_cg_cgc.h
r_cg_intc.h
r_cg_macrodriver.h
r_cg_port.h
r_cg_serial.h
r_cg_timer.h
r_cg_userdefine.h
r_cg_wdt.h
